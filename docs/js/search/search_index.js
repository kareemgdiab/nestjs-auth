var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.512,1,2.285]],["body/controllers/AppController.html",[0,2.505,1,3.784,2,1.505,3,0.304,4,0.271,5,0.239,6,2.879,7,2.067,8,3.923,9,3.923,10,0.489,11,1.558,12,4.639,13,3.404,14,1.222,15,0.026,16,2.879,17,3.404,18,0.664,19,3.404,20,4.639,21,3.923,22,3.451,23,3.923,24,4.639,25,1.143,26,0.664,27,1.143,28,3.923,29,1.143,30,2.879,31,0.53,32,0.53,33,2.532,34,2.274,35,0.573,36,3.098,37,2.274,38,1.505,39,1.748,40,3.404,41,1.402,42,2.532,43,2.583,44,2.532,45,3.404,46,0.304,47,0.038,48,2.274,49,3.404,50,3.404,51,3.404,52,1.619,53,0.876,54,1.143,55,3.404,56,0.017,57,0.017]],["title/modules/AppModule.html",[58,1.075,59,2.285]],["body/modules/AppModule.html",[1,3.385,2,1.945,3,0.282,4,0.251,5,0.221,15,0.026,32,0.568,35,0.53,46,0.282,47,0.036,56,0.016,57,0.016,58,1.382,59,4.445,60,1.298,61,1.945,62,2.666,63,2.666,64,2.666,65,3.628,66,3.628,67,3.068,68,3.326,69,3.628,70,2.259,71,1.619,72,1.619,73,3.153,74,2.449,75,2.259,76,2.666,77,2.345,78,3.153,79,3.153,80,3.153,81,3.153,82,3.153,83,3.153,84,3.273,85,3.153,86,3.153,87,3.153,88,3.153,89,2.106]],["title/injectables/AppService.html",[69,2.077,90,0.62]],["body/injectables/AppService.html",[3,0.402,4,0.358,5,0.316,10,0.646,11,1.867,15,0.025,18,0.878,29,1.51,32,0.402,35,0.757,46,0.402,47,0.051,53,1.431,54,1.51,56,0.021,57,0.021,69,3.376,90,1.008,91,1.728,92,3.803,93,6.304,94,4.498,95,4.498,96,4.498]],["title/controllers/AuthenticationController.html",[0,1.512,97,2.285]],["body/controllers/AuthenticationController.html",[0,1.147,2,1.147,3,0.232,4,0.207,5,0.182,10,0.372,11,1.285,14,1.801,15,0.026,18,0.979,23,2.194,25,1.684,26,0.979,27,1.684,28,4.241,29,1.684,31,0.707,32,0.517,33,1.93,34,1.733,35,0.437,36,2.555,37,1.733,38,1.147,39,1.332,46,0.232,47,0.029,48,1.733,54,1.684,56,0.014,57,0.014,97,2.555,98,2.194,99,1.93,100,2.272,101,2.846,102,2.846,103,4.544,104,3.826,105,3.235,106,2.595,107,2.595,108,2.595,109,2.595,110,3.731,111,2.595,112,2.595,113,2.595,114,2.595,115,3.045,116,3.826,117,2.595,118,3.842,119,2.194,120,2.792,121,3.826,122,2.595,123,1.575,124,2.194,125,3.826,126,1.82,127,2.595,128,1.733,129,2.595,130,2.194,131,2.323,132,2.595,133,2.595,134,2.595,135,2.595,136,1.576,137,1.147,138,1.93,139,2.595,140,2.595,141,2.595,142,2.595,143,2.595,144,2.595,145,2.595,146,2.595,147,2.595,148,2.595,149,2.595]],["title/modules/AuthenticationModule.html",[58,1.075,65,2.077]],["body/modules/AuthenticationModule.html",[2,1.805,3,0.254,4,0.226,5,0.199,15,0.026,32,0.57,35,0.477,46,0.254,47,0.032,56,0.015,57,0.015,58,1.283,60,1.169,61,1.805,65,4.047,67,2.964,68,3.214,70,2.097,71,1.457,72,1.457,74,2.274,75,2.097,97,3.195,126,3.062,150,2.4,151,2.4,152,2.4,153,2.4,154,3.505,155,3.505,156,3.505,157,2.838,158,2.727,159,2.838,160,2.111,161,4.084,162,1.58,163,2.838,164,2.4,165,2.838,166,1.896,167,2.4,168,2.838,169,2.111,170,2.838,171,2.838,172,2.838,173,2.4,174,2.4,175,2.838,176,2.4,177,2.838]],["title/injectables/AuthenticationService.html",[90,0.62,126,1.627]],["body/injectables/AuthenticationService.html",[3,0.108,4,0.096,5,0.085,10,0.173,11,0.694,15,0.026,18,0.91,25,1.566,26,0.944,27,1.566,29,1.499,31,0.726,32,0.417,35,0.202,46,0.108,47,0.014,52,1.531,53,1.2,54,1.42,56,0.008,57,0.008,89,1.38,90,0.375,91,0.462,100,2.041,101,1.536,102,1.536,105,1.747,110,2.018,119,1.747,120,1.791,123,1.741,126,0.982,130,1.018,160,0.895,176,3.063,178,0.895,179,2.065,180,2.065,181,2.065,182,2.065,183,2.065,184,0.982,185,1.203,186,2.03,187,2.354,188,2.011,189,4.229,190,1.203,191,2.065,192,2.568,193,5.349,194,2.149,195,1.203,196,2.065,197,2.713,198,1.203,199,1.88,200,2.065,201,1.203,202,2.065,203,1.203,204,3.063,205,2.065,206,1.203,207,1.203,208,2.065,209,1.203,210,0.731,211,2.065,212,2.713,213,1.203,214,0.913,215,1.018,216,1.747,217,1.203,218,1.203,219,1.018,220,1.203,221,1.203,222,1.203,223,1.018,224,1.203,225,2.882,226,2.694,227,1.018,228,1.747,229,1.018,230,1.791,231,3.573,232,2.713,233,2.419,234,1.203,235,2.824,236,1.203,237,2.018,238,2.713,239,3.111,240,2.018,241,3.342,242,2.394,243,3.576,244,3.146,245,2.065,246,1.203,247,2.065,248,1.203,249,1.203,250,1.15,251,2.713,252,1.203,253,2.713,254,2.065,255,2.065,256,2.721,257,3.953,258,2.065,259,1.203,260,1.236,261,1.018,262,2.713,263,1.018,264,1.203,265,1.203,266,2.065,267,1.203,268,1.018,269,0.895,270,2.065,271,1.203,272,1.203,273,1.203,274,1.203,275,1.203,276,1.203,277,1.203,278,1.203,279,1.747,280,2.713,281,2.065,282,1.747,283,1.203,284,1.203,285,1.203,286,1.203,287,1.203,288,1.747,289,1.203,290,2.065,291,1.203,292,1.203,293,1.203]],["title/classes/Constant.html",[47,0.039,294,2.077]],["body/classes/Constant.html",[3,0.372,4,0.331,5,0.292,10,0.597,14,1.493,15,0.026,18,0.812,31,0.824,32,0.473,41,2.398,46,0.521,47,0.047,53,1.362,56,0.02,57,0.02,210,3.214,225,2.136,294,3.536,295,1.838,296,2.778,297,2.18,298,3.889,299,4.159,300,2.518,301,2.778,302,1.307,303,1.713,304,3.094,305,2.778,306,3.517]],["title/modules/ConstantModule.html",[58,1.075,307,2.285]],["body/modules/ConstantModule.html",[3,0.353,4,0.315,5,0.277,15,0.026,26,0.771,32,0.538,35,0.664,46,0.353,47,0.044,56,0.019,57,0.019,58,1.609,60,1.626,61,2.263,70,2.629,71,2.028,72,2.028,74,2.85,75,2.028,294,2.398,300,1.878,302,1.241,305,3.42,307,4.262,308,3.339,309,3.339,310,3.875,311,3.949,312,2.398,313,3.339,314,3.949,315,2.638,316,3.949]],["title/injectables/ConstantService.html",[90,0.62,310,2.077]],["body/injectables/ConstantService.html",[3,0.294,4,0.262,5,0.231,10,0.472,11,1.52,15,0.026,18,1.011,25,1.739,26,1.011,27,1.739,29,1.52,31,0.806,32,0.499,35,0.553,46,0.294,47,0.037,54,1.52,56,0.017,57,0.017,90,0.821,91,1.262,100,2.173,184,2.153,214,2.467,230,1.829,294,1.995,302,1.032,303,1.353,304,4.152,310,2.749,313,2.778,317,2.778,318,3.459,319,3.728,320,3.285,321,3.728,322,3.285,323,4.527,324,2.194,325,3.728,326,3.285,327,3.024,328,4.527,329,3.285,330,2.194,331,2.194,332,3.285,333,3.285,334,3.285]],["title/classes/CreateRoleDto.html",[47,0.039,335,2.077]],["body/classes/CreateRoleDto.html",[3,0.374,4,0.333,5,0.293,10,0.6,14,1.906,15,0.025,18,1.036,26,1.138,31,0.826,32,0.374,38,1.847,41,2.402,46,0.374,47,0.047,53,1.58,56,0.02,57,0.02,137,2.863,295,1.847,297,2.186,335,3.223,336,3.532,337,4.233,338,4.178,339,4.178]],["title/classes/CreateUserDto.html",[47,0.039,120,1.904]],["body/classes/CreateUserDto.html",[3,0.327,4,0.291,5,0.257,10,0.525,14,2.095,15,0.025,18,1.138,26,1.068,31,0.908,32,0.327,38,1.616,46,0.327,47,0.041,52,2.603,53,1.667,56,0.018,57,0.018,120,2.71,137,2.972,250,3.046,260,2.103,295,1.616,297,2.004,337,4.379,340,3.092,341,3.657,342,3.657,343,3.657,344,3.657]],["title/modules/DatabaseModule.html",[58,1.075,66,2.077]],["body/modules/DatabaseModule.html",[3,0.382,4,0.34,5,0.3,15,0.026,32,0.527,35,0.719,46,0.382,47,0.048,56,0.02,57,0.02,58,1.692,60,1.759,66,3.27,75,2.765,76,4.553,77,3.178,100,1.534,302,1.342,312,2.595,345,4.273,346,5.896,347,4.273,348,4.273,349,4.273,350,4.273,351,4.273,352,4.273]],["title/injectables/JwtAuthGuard.html",[39,1.756,90,0.62]],["body/injectables/JwtAuthGuard.html",[3,0.427,4,0.38,5,0.335,15,0.025,32,0.516,35,0.803,39,2.96,46,0.427,47,0.054,56,0.021,57,0.021,90,1.046,91,1.834,162,2.657,353,4.036,354,4.036,355,3.188,356,4.773]],["title/injectables/JwtStrategy.html",[90,0.62,155,2.077]],["body/injectables/JwtStrategy.html",[3,0.303,4,0.27,5,0.238,10,0.487,11,1.554,15,0.026,18,0.903,25,1.554,26,0.903,27,1.554,29,1.139,31,0.72,32,0.53,35,0.571,46,0.303,47,0.038,52,1.613,54,1.139,56,0.017,57,0.017,90,0.839,91,1.304,100,1.891,110,2.523,126,2.691,136,2.06,137,1.499,138,3.442,155,2.81,162,1.889,166,2.266,167,2.868,169,2.523,174,2.868,184,1.613,204,2.868,231,2.266,235,2.266,242,2.523,260,1.304,279,2.868,288,2.868,355,2.266,357,2.868,358,3.913,359,2.868,360,3.392,361,4.627,362,3.392,363,3.392,364,2.868,365,2.523,366,2.868,367,2.868,368,2.868,369,2.868,370,3.392,371,3.392,372,3.392,373,3.392,374,3.392,375,3.392,376,3.392,377,3.392]],["title/injectables/LocalAuthGuard.html",[90,0.62,128,2.285]],["body/injectables/LocalAuthGuard.html",[3,0.427,4,0.38,5,0.335,15,0.025,32,0.516,35,0.803,46,0.427,47,0.054,56,0.021,57,0.021,90,1.046,91,1.834,128,3.85,162,2.657,354,4.036,355,3.188,378,4.036,379,4.773]],["title/injectables/LocalStrategy.html",[90,0.62,156,2.077]],["body/injectables/LocalStrategy.html",[3,0.3,4,0.267,5,0.236,10,0.482,11,1.543,15,0.026,18,0.896,25,1.543,26,0.896,27,1.543,29,1.127,31,0.715,32,0.504,35,0.565,46,0.3,47,0.038,52,2.185,53,1.568,54,1.127,56,0.017,57,0.017,90,0.833,91,1.29,100,1.881,123,2.157,126,2.679,136,2.038,138,3.417,156,2.789,162,1.868,169,2.496,184,1.596,214,2.03,216,3.884,225,1.723,231,2.241,239,2.038,244,2.496,250,3.284,355,2.241,358,3.884,359,2.838,364,2.838,365,2.496,367,2.838,368,2.838,369,2.838,380,2.838,381,3.356,382,4.593,383,3.356,384,2.838,385,3.356,386,3.356,387,3.356]],["title/classes/LoginCredentialsDto.html",[47,0.039,131,2.077]],["body/classes/LoginCredentialsDto.html",[3,0.359,4,0.32,5,0.282,10,0.577,14,1.859,15,0.025,18,1.01,31,0.806,32,0.359,38,1.775,46,0.463,47,0.058,52,2.724,53,1.611,56,0.019,57,0.019,115,2.439,131,3.143,137,2.883,199,1.91,250,3.189,295,1.775,297,2.131,337,4.281,388,2.988,389,4.017,390,4.017]],["title/guards/PermissionsGuard.html",[43,1.904,391,2.545]],["body/guards/PermissionsGuard.html",[3,0.273,4,0.243,5,0.214,10,0.438,11,1.444,15,0.026,18,0.839,25,1.444,26,0.839,27,1.444,29,1.024,31,0.669,32,0.483,33,3.703,35,0.513,41,1.256,43,2.393,46,0.273,47,0.034,54,1.444,56,0.016,57,0.016,89,2.037,90,0.78,100,1.787,137,1.9,184,2.045,188,2.89,214,1.9,215,2.579,225,2.775,230,2.393,231,2.037,233,2.037,239,1.852,243,2.579,244,2.269,260,1.652,261,2.579,263,2.579,282,2.579,392,3.05,393,2.579,394,5.405,395,3.05,396,5.912,397,3.05,398,4.299,399,5.405,400,3.05,401,3.05,402,2.579,403,2.579,404,3.05,405,3.05,406,4.299,407,3.05,408,3.05,409,3.05,410,3.05,411,4.299,412,3.05,413,3.05]],["title/classes/RefreshToken.html",[47,0.039,199,1.627]],["body/classes/RefreshToken.html",[3,0.293,4,0.261,5,0.23,10,0.47,14,1.856,15,0.026,18,1.009,31,0.964,32,0.462,46,0.462,47,0.037,56,0.017,57,0.017,89,3.723,123,1.348,194,2.187,199,2.459,210,2.742,223,2.768,225,1.681,235,3.453,237,3.846,240,3.359,241,4.372,242,3.359,269,2.435,295,1.447,297,1.86,298,3.723,300,2.148,301,2.187,302,1.029,303,1.348,414,2.187,415,4.372,416,4.713,417,5.574,418,3.274,419,4.516,420,3.819,421,3.274,422,5.17,423,3.819,424,3.274,425,3.274,426,3.274,427,3.274,428,3.274,429,2.187,430,2.768]],["title/classes/RefreshTokenDto.html",[47,0.039,115,2.077]],["body/classes/RefreshTokenDto.html",[3,0.379,4,0.337,5,0.297,10,0.608,14,1.52,15,0.025,18,0.826,31,0.659,32,0.379,38,1.872,46,0.479,47,0.06,52,2.014,53,1.588,56,0.02,57,0.02,115,3.251,131,2.571,137,2.813,199,2.793,250,2.357,295,1.872,297,2.204,337,4.25,388,3.15,431,4.234]],["title/modules/RefreshTokenModule.html",[58,1.075,154,2.077]],["body/modules/RefreshTokenModule.html",[3,0.338,4,0.301,5,0.265,15,0.026,26,0.736,32,0.528,35,0.635,46,0.338,47,0.043,56,0.018,57,0.018,58,1.562,60,1.554,61,2.197,70,2.552,71,1.938,72,1.938,74,2.767,75,1.938,154,3.902,158,3.32,187,3.761,199,1.795,300,1.795,302,1.186,312,2.292,315,2.521,429,3.32,432,3.191,433,3.191,434,3.191,435,3.774,436,3.191,437,3.774,438,3.774]],["title/injectables/RefreshTokenService.html",[90,0.62,187,1.904]],["body/injectables/RefreshTokenService.html",[3,0.249,4,0.222,5,0.196,10,0.4,11,1.354,15,0.026,18,1.012,25,1.742,26,1.012,27,1.742,29,1.59,30,3.409,31,0.893,32,0.464,35,0.469,46,0.249,47,0.031,53,0.717,54,1.59,56,0.015,57,0.015,90,0.731,91,1.071,100,2.217,184,1.917,187,2.244,194,1.862,199,2.468,214,2.536,230,1.552,235,1.862,237,3.859,240,3.522,302,0.876,303,1.148,318,3.163,319,3.465,321,3.465,324,1.862,325,3.952,327,3.465,330,1.862,331,1.862,436,2.357,439,2.357,440,3.163,441,4.735,442,2.787,443,2.787,444,4.031,445,2.787,446,2.787,447,2.787,448,2.787,449,5.188,450,2.787,451,2.787,452,2.787,453,2.787,454,2.787]],["title/classes/Role.html",[47,0.039,260,1.314]],["body/classes/Role.html",[3,0.352,4,0.313,5,0.276,10,0.565,14,1.833,15,0.026,18,0.996,26,1.106,31,0.883,32,0.457,41,2.335,46,0.507,47,0.044,53,1.545,56,0.019,57,0.019,210,3.101,225,2.019,260,2.179,295,1.738,297,2.102,298,4.154,300,2.429,301,2.626,302,1.236,303,1.619,455,2.626,456,3.932,457,3.932,458,2.626,459,2.626,460,3.325]],["title/controllers/RoleController.html",[0,1.512,461,2.285]],["body/controllers/RoleController.html",[0,0.9,2,0.9,3,0.182,4,0.162,5,0.143,7,2.69,10,0.292,11,1.069,14,1.59,15,0.026,16,2.692,18,0.864,21,3.745,25,1.316,26,0.765,27,1.316,29,1.614,31,0.61,32,0.506,34,1.361,35,0.343,36,2.617,37,1.361,38,0.9,39,1.046,41,2.191,42,1.515,43,2.675,44,1.515,46,0.182,47,0.023,48,2.958,53,1.311,54,1.487,56,0.012,57,0.012,99,1.515,100,2.152,118,2.692,124,3.313,136,1.237,137,0.9,188,1.864,214,2.434,239,1.237,260,2.175,303,0.839,319,2.617,331,1.361,335,3.232,440,2.126,458,1.361,461,2.126,462,1.722,463,2.692,464,2.617,465,2.958,466,1.722,467,2.037,468,1.361,469,2.037,470,2.037,471,2.958,472,2.037,473,1.722,474,2.037,475,2.037,476,1.722,477,2.037,478,1.722,479,1.722,480,1.515,481,1.722,482,2.037,483,2.037,484,2.037,485,4.429,486,4.429,487,4.805,488,4.429,489,4.429,490,2.037,491,2.037,492,2.037,493,2.037,494,2.037,495,2.037,496,2.037,497,2.037,498,2.037,499,2.037,500,2.037,501,2.037,502,2.037,503,2.037,504,1.722,505,2.037,506,1.722,507,1.722,508,2.037]],["title/modules/RoleModule.html",[58,1.075,67,1.756]],["body/modules/RoleModule.html",[2,2.157,3,0.328,4,0.292,5,0.258,15,0.026,26,0.716,32,0.544,35,0.618,46,0.328,47,0.041,56,0.018,57,0.018,58,1.533,60,1.512,61,2.157,67,3.277,70,2.506,71,1.885,72,1.885,74,2.717,75,1.885,158,3.259,188,3.2,260,1.411,300,1.746,302,1.153,312,2.229,315,2.452,459,3.259,461,3.662,480,2.731,481,3.104,509,3.104,510,3.104,511,3.104,512,3.671,513,3.671,514,3.104]],["title/injectables/RoleService.html",[90,0.62,188,1.627]],["body/injectables/RoleService.html",[3,0.218,4,0.194,5,0.171,10,0.349,11,1.225,15,0.026,18,1.066,25,1.835,26,1.066,27,1.835,29,1.748,31,0.851,32,0.465,35,0.409,46,0.218,47,0.027,53,1.406,54,1.748,56,0.014,57,0.014,90,0.662,91,0.935,100,2.307,184,1.735,188,1.735,214,2.683,230,1.355,233,2.436,260,2.1,302,0.765,303,1.002,318,2.922,319,2.922,321,3.245,324,1.625,325,3.784,327,2.922,330,1.625,331,1.625,335,3.441,440,2.436,458,1.625,464,2.436,465,2.436,466,3.084,468,2.436,471,3.477,473,2.058,479,2.058,480,1.81,515,2.058,516,2.433,517,2.433,518,3.647,519,2.433,520,2.433,521,3.084,522,2.433,523,2.433,524,2.433,525,2.433,526,2.433,527,2.433,528,2.433,529,2.433,530,2.433,531,2.433]],["title/classes/User.html",[47,0.039,123,1.409]],["body/classes/User.html",[3,0.301,4,0.268,5,0.237,10,0.483,14,2.025,15,0.026,18,1.101,26,1.024,31,0.949,32,0.469,46,0.469,47,0.038,52,2.496,53,1.569,56,0.017,57,0.017,123,2.161,192,2.045,210,2.796,225,1.729,250,2.921,260,2.168,295,1.489,297,1.896,298,4.245,300,2.19,301,2.249,302,1.058,303,1.387,415,2.848,416,3.894,423,3.894,514,2.848,532,2.249,533,3.368,534,3.368,535,3.368,536,5.247,537,3.368,538,3.368,539,3.368,540,2.249,541,2.848]],["title/controllers/UserController.html",[0,1.512,542,2.285]],["body/controllers/UserController.html",[0,1.318,2,1.318,3,0.267,4,0.238,5,0.209,7,2.569,10,0.428,11,1.421,14,1.519,15,0.026,18,0.826,25,1.002,26,0.582,27,1.002,29,1.651,31,0.464,32,0.54,34,1.992,35,0.502,36,2.826,37,1.992,38,1.318,39,1.531,41,2.203,42,2.219,43,2.738,44,2.219,46,0.267,47,0.034,48,3.574,53,1.265,54,1.421,56,0.016,57,0.016,99,2.219,100,2.107,123,1.228,136,1.811,137,1.318,186,2.525,192,1.811,214,2.365,464,3.284,465,3.574,468,1.992,471,2.826,476,2.522,478,2.522,504,2.522,506,2.522,507,2.522,542,2.826,543,2.522,544,4.231,545,2.982,546,2.982,547,2.982,548,2.982,549,2.219,550,2.522,551,2.982,552,2.982,553,2.982,554,2.982,555,2.982,556,2.982,557,2.982,558,2.982]],["title/modules/UserModule.html",[58,1.075,68,1.904]],["body/modules/UserModule.html",[2,2.076,3,0.31,4,0.276,5,0.244,15,0.026,26,0.677,32,0.55,35,0.583,46,0.31,47,0.039,56,0.017,57,0.017,58,1.476,60,1.428,61,2.076,67,3.159,68,3.611,70,2.412,71,1.78,72,1.78,74,2.615,75,2.412,123,1.428,158,3.137,164,2.932,186,3.424,269,2.579,300,1.649,302,1.089,312,2.106,315,2.316,540,3.137,542,3.558,549,2.579,550,2.932,559,2.932,560,2.932,561,2.932,562,3.467,563,3.467,564,3.467]],["title/injectables/UserService.html",[90,0.62,186,1.756]],["body/injectables/UserService.html",[3,0.244,4,0.218,5,0.192,10,0.392,11,1.334,15,0.026,18,1.065,25,1.833,26,1.065,27,1.833,29,1.726,31,0.85,32,0.488,35,0.459,46,0.244,47,0.031,53,1.204,54,1.726,56,0.015,57,0.015,90,0.72,91,1.049,100,2.295,120,2.861,123,1.635,184,1.889,186,2.039,192,1.658,214,2.663,230,1.52,233,1.824,302,0.858,303,1.124,318,3.126,321,3.432,324,1.824,325,3.927,327,3.126,330,1.824,440,2.652,464,2.652,465,2.652,468,2.652,471,2.652,521,3.358,549,2.031,565,2.309,566,2.731,567,2.731,568,3.971,569,3.971,570,2.731,571,2.731,572,2.731,573,2.731,574,2.731,575,2.731,576,2.731,577,2.731,578,2.731,579,2.731]],["title/changelog.html",[580,2.422,581,2.422,582,2.422]],["body/changelog.html",[5,0.374,8,3.548,15,0.022,22,3.96,41,1.728,56,0.02,57,0.02,101,3.121,102,3.121,463,3.548,582,3.548,583,4.196,584,4.196,585,3.121,586,4.196,587,4.196,588,4.196,589,3.548,590,4.196,591,4.196,592,3.548,593,5.323,594,5.323,595,4.196,596,5.323,597,4.196,598,4.196,599,4.196,600,4.196,601,4.196,602,4.196,603,4.196,604,4.196,605,4.196,606,5.323,607,4.196,608,4.196,609,4.196,610,4.196,611,4.196,612,4.196,613,4.196,614,4.196,615,4.196,616,4.196,617,4.196]],["title/coverage.html",[618,3.462]],["body/coverage.html",[0,2.145,1,1.621,5,0.17,6,2.052,15,0.026,31,0.378,39,1.246,41,0.999,43,1.351,47,0.066,56,0.014,57,0.014,69,1.474,84,1.805,90,1.1,92,2.052,97,1.621,98,2.052,115,1.474,120,1.351,123,0.999,126,1.154,128,1.621,131,1.474,155,1.474,156,1.474,166,1.621,178,2.708,186,1.246,187,1.351,188,1.154,199,1.154,226,1.805,239,1.474,260,0.933,294,1.474,296,2.431,305,1.621,310,1.474,317,2.052,335,1.474,336,2.052,340,2.052,353,2.052,357,2.052,378,2.052,380,2.052,388,2.708,391,1.805,393,2.052,414,2.431,429,1.621,439,2.052,455,2.431,459,1.621,461,1.621,462,2.052,515,2.052,532,2.431,540,1.621,542,1.621,543,2.052,565,2.052,618,1.805,619,2.427,620,2.427,621,2.427,622,4.368,623,2.427,624,6.837,625,4.368,626,2.052,627,5.955,628,6.159,629,5.199,630,2.427,631,5.661,632,3.64,633,2.427,634,2.427,635,3.078,636,2.052,637,2.052,638,3.078,639,3.64,640,2.052,641,3.64,642,2.052,643,2.427,644,2.427]],["title/dependencies.html",[61,1.817,645,2.422]],["body/dependencies.html",[15,0.026,35,0.67,38,1.76,56,0.019,57,0.019,61,1.76,77,2.962,160,2.962,162,2.217,219,3.368,302,1.251,303,1.64,365,4.243,366,4.353,384,3.368,402,3.368,403,4.353,646,5.704,647,3.982,648,3.982,649,3.982,650,3.982,651,3.982,652,3.982,653,3.982,654,3.982,655,3.982,656,3.982,657,3.982,658,3.982,659,3.982,660,3.982,661,3.982,662,3.982,663,3.982,664,3.982,665,3.982,666,3.982,667,3.368,668,3.982,669,3.982]],["title/miscellaneous/functions.html",[670,1.594,671,3.475]],["body/miscellaneous/functions.html",[9,3.646,10,0.619,15,0.022,25,1.448,26,0.841,27,1.448,31,0.671,56,0.02,57,0.02,585,3.208,638,3.646,640,5.006,642,4.579,667,3.646,670,2.401,671,3.646,672,5.415,673,4.312,674,4.312,675,4.312,676,4.312,677,5.415,678,4.312,679,4.312,680,3.646,681,3.646,682,4.312,683,4.312,684,6.21,685,5.415,686,4.312,687,4.312,688,4.312,689,4.312,690,4.312,691,4.312,692,3.646]],["title/index.html",[10,0.411,580,2.422,581,2.422]],["body/index.html",[4,0.281,7,2.145,15,0.025,22,3.538,56,0.018,57,0.018,585,2.628,618,2.628,680,2.987,681,5.23,692,2.987,693,3.533,694,3.533,695,4.756,696,3.533,697,3.533,698,3.533,699,3.533,700,3.533,701,3.533,702,5.377,703,3.533,704,3.533,705,3.533,706,3.533,707,6.321,708,3.533,709,3.533,710,3.533,711,3.533,712,4.756,713,3.533,714,3.533,715,3.533,716,3.533,717,4.756,718,3.533,719,3.533,720,3.533,721,4.756,722,4.756,723,3.533,724,3.533,725,3.533,726,3.533,727,2.987,728,3.533,729,3.533,730,3.533,731,3.533,732,3.533,733,3.533,734,3.533,735,3.533,736,3.533,737,2.987,738,3.533,739,3.533,740,3.533,741,3.533,742,3.533,743,3.533,744,2.987]],["title/modules.html",[60,1.916]],["body/modules.html",[15,0.021,56,0.021,57,0.021,59,3.004,60,1.852,65,2.731,66,2.731,67,2.31,68,2.504,154,2.731,307,3.004,727,5.579,745,6.598,746,6.598,747,6.687,748,4.498,749,4.498]],["title/overview.html",[750,3.935]],["body/overview.html",[2,1.27,15,0.025,56,0.015,57,0.015,59,4.31,60,1.183,61,1.821,62,2.429,63,2.429,64,2.429,65,4.033,66,2.925,67,3.136,68,3.462,69,2.925,70,2.115,71,1.475,72,1.475,91,1.104,126,2.84,150,2.429,151,2.429,152,2.429,153,2.429,154,3.52,155,2.925,156,2.925,186,3.066,187,3.324,188,2.84,256,2.429,268,2.429,295,1.27,307,3.514,308,2.429,309,2.429,310,2.925,391,2.137,432,2.429,433,2.429,434,2.429,509,2.429,510,2.429,511,2.429,559,2.429,560,2.429,561,2.429,750,2.429,751,2.873,752,2.873,753,2.873]],["title/properties.html",[297,1.692,645,2.422]],["body/properties.html",[7,3.086,15,0.025,56,0.022,57,0.022,297,2.093,589,4.298,592,4.298,737,4.298,744,4.298,754,5.083]],["title/miscellaneous/typealiases.html",[670,1.594,755,4.11]],["body/miscellaneous/typealiases.html",[10,0.696,15,0.022,31,0.754,56,0.022,57,0.022,192,3.533,194,3.886,296,3.237,304,4.328,414,3.237,455,3.237,458,3.886,532,3.237,670,2.698,756,4.846,757,4.098,758,4.098,759,4.098,760,4.098]],["title/miscellaneous/variables.html",[670,1.594,761,3.475]],["body/miscellaneous/variables.html",[10,0.503,15,0.026,31,0.546,41,2.362,53,0.902,56,0.018,57,0.018,84,3.52,166,3.161,173,2.965,178,2.608,226,3.52,227,2.965,228,4.002,229,2.965,296,2.342,305,3.161,306,2.965,414,2.342,420,5.497,429,3.161,430,2.965,455,2.342,459,3.161,460,2.965,532,2.342,540,3.161,541,2.965,626,2.965,635,2.965,636,4.85,637,2.965,670,1.952,757,2.965,758,2.965,759,2.965,760,2.965,761,2.965,762,3.506,763,4.732,764,3.506,765,3.506,766,6.501,767,3.506,768,3.506,769,3.506,770,3.506,771,3.506]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":592,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.1.13",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["06",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":753,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["100",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["12e51eb",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["15m",{"_index":291,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["17",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":751,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["6.3.8",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["60s",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["7",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["7.2.0",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["76650cd",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["7788688",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":752,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["918d7ca",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["947feeb",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["access",{"_index":485,"title":{},"body":{"controllers/RoleController.html":{}}}],["accesstoken",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["aliases",{"_index":756,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":728,"title":{},"body":{"index.html":{}}}],["api",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apibearerauth",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@post('/logout')@useguards(jwtauthguard",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibearerauth()@useguards(jwtauthguard",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{}}}],["apibody",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibody({type",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiproperty",{"_index":337,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apitags",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags('me",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('roles",{"_index":482,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('users",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":701,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":59,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":69,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["authentication.constants",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["authentication.controller",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/jwt.guard",{"_index":478,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["authenticationcontroller",{"_index":97,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":65,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":126,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":354,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":356,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":379,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["author",{"_index":737,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["available",{"_index":749,"title":{},"body":{"modules.html":{}}}],["await",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["backers",{"_index":729,"title":{},"body":{"index.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["bcrypt",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{}}}],["boolean",{"_index":419,"title":{},"body":{"classes/RefreshToken.html":{}}}],["bootstrap",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":747,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":745,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["building",{"_index":696,"title":{},"body":{"index.html":{}}}],["c103a57",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["canactivate",{"_index":394,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["canactivate(context",{"_index":398,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["catch",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["changelog",{"_index":582,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["class",{"_index":47,"title":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":295,"title":{},"body":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":150,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":152,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":151,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":153,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_constantmodule",{"_index":308,"title":{},"body":{"modules/ConstantModule.html":{},"overview.html":{}}}],["cluster_constantmodule_providers",{"_index":309,"title":{},"body":{"modules/ConstantModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule",{"_index":432,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_exports",{"_index":434,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_providers",{"_index":433,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":509,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_exports",{"_index":511,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":510,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":559,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":560,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":562,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":561,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cmd",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["commitlint",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compare(pass",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["components/authentication/authentication.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["components/authentication/authentication.service",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/authentication/jwt.guard",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["components/authentication/local.guard",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/database/database.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["components/role/role.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["components/role/role.service",{"_index":404,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["components/users/user.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["config",{"_index":349,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('database_url",{"_index":351,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":346,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["constant",{"_index":294,"title":{"classes/Constant.html":{}},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"coverage.html":{}}}],["constant.name",{"_index":316,"title":{},"body":{"modules/ConstantModule.html":{}}}],["constant.schema",{"_index":313,"title":{},"body":{"modules/ConstantModule.html":{},"injectables/ConstantService.html":{}}}],["constant.service",{"_index":314,"title":{},"body":{"modules/ConstantModule.html":{}}}],["constantdocument",{"_index":304,"title":{},"body":{"classes/Constant.html":{},"injectables/ConstantService.html":{},"miscellaneous/typealiases.html":{}}}],["constantmodel",{"_index":323,"title":{},"body":{"injectables/ConstantService.html":{}}}],["constantmodule",{"_index":307,"title":{"modules/ConstantModule.html":{}},"body":{"modules/ConstantModule.html":{},"modules.html":{},"overview.html":{}}}],["constants",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["constantschema",{"_index":305,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constantservice",{"_index":310,"title":{"injectables/ConstantService.html":{}},"body":{"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"coverage.html":{},"overview.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(constantmodel",{"_index":320,"title":{},"body":{"injectables/ConstantService.html":{}}}],["constructor(private",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":395,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["constructor(refreshtokenmodel",{"_index":442,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["constructor(rolemodel",{"_index":516,"title":{},"body":{"injectables/RoleService.html":{}}}],["constructor(usermodel",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["context",{"_index":401,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["context.getargbyindex(0",{"_index":409,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["context.gethandler",{"_index":408,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('roles",{"_index":483,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('users",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":618,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":440,"title":{},"body":{"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":495,"title":{},"body":{"controllers/RoleController.html":{}}}],["create(refreshtoken",{"_index":445,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["create(role",{"_index":466,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["create(user",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["createroledto",{"_index":335,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["creates",{"_index":493,"title":{},"body":{"controllers/RoleController.html":{}}}],["createuserdto",{"_index":120,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dashboard",{"_index":679,"title":{},"body":{"miscellaneous/functions.html":{}}}],["databasemodule",{"_index":66,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["date(date.now",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["day",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/permissions.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":420,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":464,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:id",{"_index":506,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":507,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":468,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletes",{"_index":504,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":61,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":709,"title":{},"body":{"index.html":{}}}],["docs",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["document.sub",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["document.tokenid",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["documentation",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["dto/auth.dto",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/role.dto",{"_index":479,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["dto/user.dto",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e",{"_index":718,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":697,"title":{},"body":{"index.html":{}}}],["email",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["endpoint",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{}}}],["entry",{"_index":674,"title":{},"body":{"miscellaneous/functions.html":{}}}],["env",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envfile",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["executable",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["executioncontext",{"_index":399,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["exist",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expiresat",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["expiresin",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":158,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":403,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":355,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{}}}],["features",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["filter",{"_index":327,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":325,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["find",{"_index":465,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["find(filter",{"_index":521,"title":{},"body":{"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":318,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findone(filter",{"_index":324,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["fixes",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["framework",{"_index":695,"title":{},"body":{"index.html":{}}}],["function",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":671,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":179,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generateaccesstoken(user",{"_index":191,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken",{"_index":180,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken(refreshtoken",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generation",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["get('profile",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["getprofile",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":580,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["graph",{"_index":748,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":724,"title":{},"body":{"index.html":{}}}],["gt",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["guard",{"_index":391,"title":{"guards/PermissionsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":392,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["guards/permissions.guard",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guidelines",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hash(user.password",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["haspermission",{"_index":411,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["head",{"_index":682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hello",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":734,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":741,"title":{},"body":{"index.html":{}}}],["husky",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":471,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":405,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["import",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":677,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":352,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":90,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":330,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["injectmodel(constant.name",{"_index":332,"title":{},"body":{"injectables/ConstantService.html":{}}}],["injectmodel(refreshtoken.name",{"_index":451,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["injectmodel(role.name",{"_index":525,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectmodel(user.name",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["insomnia,postman",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["installation",{"_index":706,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":708,"title":{},"body":{"index.html":{}}}],["isglobal",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":731,"title":{},"body":{"index.html":{}}}],["json",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jwt",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.guard",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["jwt.strategy",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtauthguard",{"_index":39,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":159,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.register",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":189,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":155,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":738,"title":{},"body":{"index.html":{}}}],["license",{"_index":744,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":722,"title":{},"body":{"index.html":{}}}],["literal",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/RefreshTokenService.html":{}}}],["local",{"_index":384,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthguard",{"_index":128,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":156,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["login(@request",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(req",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(user",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logincredentialsdto",{"_index":131,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["logincredentialsdto})@useguards(localauthguard)@post('/login",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["logout(@request",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(payload",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logout(req",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["main",{"_index":673,"title":{},"body":{"miscellaneous/functions.html":{}}}],["make",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":670,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":721,"title":{},"body":{"index.html":{}}}],["mode",{"_index":712,"title":{},"body":{"index.html":{}}}],["model",{"_index":321,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":58,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":60,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":303,"title":{},"body":{"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":312,"title":{},"body":{"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":315,"title":{},"body":{"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":347,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":733,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":739,"title":{},"body":{"index.html":{}}}],["name",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":702,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":743,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":402,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":160,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":302,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":162,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["node.js",{"_index":694,"title":{},"body":{"index.html":{}}}],["notable",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["notfoundexception",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["notfoundexception('role",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["notfoundexception('user",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["npm",{"_index":707,"title":{},"body":{"index.html":{}}}],["nrefreshtoken",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["null",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["number",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser._id",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["object",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":422,"title":{},"body":{"classes/RefreshToken.html":{}}}],["open",{"_index":723,"title":{},"body":{"index.html":{}}}],["optional",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["over",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":750,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":645,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":476,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":501,"title":{},"body":{"controllers/RoleController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passport",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":161,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["passwordfield",{"_index":386,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.tokenid",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["permission",{"_index":487,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"guards/PermissionsGuard.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissions('profile:read",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["permissions('role:create",{"_index":494,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:delete",{"_index":505,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:read",{"_index":490,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:update",{"_index":499,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('user:delete",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["permissions('user:read",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard",{"_index":43,"title":{"guards/PermissionsGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["permissionsguard)@delete('/:id",{"_index":469,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionsguard)@permissions('profile:read')@get('profile",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["permissionsguard)@permissions('user:delete')@delete('/:id",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard)@permissions('user:read')@get",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard)@put('/:id",{"_index":474,"title":{},"body":{"controllers/RoleController.html":{}}}],["please",{"_index":680,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["point",{"_index":675,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{}}}],["post('/login",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/logout",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/refresh",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/register",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["pre",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["prefix",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":714,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":693,"title":{},"body":{"index.html":{}}}],["project",{"_index":585,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["promise",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":298,"title":{},"body":{"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["prop({type",{"_index":415,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["properties",{"_index":297,"title":{"properties.html":{}},"body":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["purpose",{"_index":489,"title":{},"body":{"controllers/RoleController.html":{}}}],["push",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":477,"title":{},"body":{"controllers/RoleController.html":{}}}],["put('/:id",{"_index":500,"title":{},"body":{"controllers/RoleController.html":{}}}],["read",{"_index":732,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["ref",{"_index":423,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["reflect",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":396,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["refresh",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(@body",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(body",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshaccesstoken",{"_index":181,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshaccesstoken(refreshtoken",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":199,"title":{"classes/RefreshToken.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["refreshtoken._id",{"_index":293,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken.name",{"_index":438,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.schema",{"_index":436,"title":{},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{}}}],["refreshtoken.service",{"_index":437,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.userid",{"_index":292,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendocument",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":115,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenmodel",{"_index":444,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["refreshtokenmodule",{"_index":154,"title":{"modules/RefreshTokenModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["refreshtokens/refreshtoken.module",{"_index":163,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["refreshtokens/refreshtoken.schema",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens/refreshtoken.service",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenschema",{"_index":429,"title":{},"body":{"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenservice",{"_index":187,"title":{"injectables/RefreshTokenService.html":{}},"body":{"injectables/AuthenticationService.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(user",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["release",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":705,"title":{},"body":{"index.html":{}}}],["req",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["req.user",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/PermissionsGuard.html":{}}}],["request.user.role",{"_index":410,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["required",{"_index":417,"title":{},"body":{"classes/RefreshToken.html":{}}}],["reset",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["rest",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["result",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["results",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returndocument",{"_index":530,"title":{},"body":{"injectables/RoleService.html":{}}}],["returns",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["revoked",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["rimraf",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":260,"title":{"classes/Role.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"coverage.html":{}}}],["role.controller",{"_index":513,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.name",{"_index":514,"title":{},"body":{"modules/RoleModule.html":{},"classes/User.html":{}}}],["role.permissions.includes(routepermission",{"_index":413,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["role.schema",{"_index":480,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["role.service",{"_index":481,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{}}}],["role/role.module",{"_index":164,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/UserModule.html":{}}}],["role/role.schema",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["role/role.service",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["role:create",{"_index":492,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:delete",{"_index":503,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:read",{"_index":484,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:update",{"_index":497,"title":{},"body":{"controllers/RoleController.html":{}}}],["rolecontroller",{"_index":461,"title":{"controllers/RoleController.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["roledocument",{"_index":458,"title":{},"body":{"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"miscellaneous/typealiases.html":{}}}],["rolemodel",{"_index":518,"title":{},"body":{"injectables/RoleService.html":{}}}],["rolemodule",{"_index":67,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["roles",{"_index":463,"title":{},"body":{"controllers/RoleController.html":{},"changelog.html":{}}}],["roleschema",{"_index":459,"title":{},"body":{"classes/Role.html":{},"modules/RoleModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleservice",{"_index":188,"title":{"injectables/RoleService.html":{}},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["routepermissions",{"_index":406,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["routepermissions.every((routepermission",{"_index":412,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["run",{"_index":681,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["rxjs",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":698,"title":{},"body":{"index.html":{}}}],["schema",{"_index":300,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":301,"title":{},"body":{"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(constant",{"_index":306,"title":{},"body":{"classes/Constant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":430,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(role",{"_index":460,"title":{},"body":{"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":541,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":425,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.boolean",{"_index":427,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.date",{"_index":428,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.objectid",{"_index":426,"title":{},"body":{"classes/RefreshToken.html":{}}}],["secret",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secured",{"_index":486,"title":{},"body":{"controllers/RoleController.html":{}}}],["see",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["server",{"_index":699,"title":{},"body":{"index.html":{}}}],["service",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["set",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setmetadata('permissions",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":678,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["side",{"_index":700,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["simple",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["specification",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sponsors",{"_index":726,"title":{},"body":{"index.html":{}}}],["src/.../authentication.constants.ts",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.service.ts",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.schema.ts",{"_index":757,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":672,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissions.decorator.ts",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refreshtoken.schema.ts",{"_index":758,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.schema.ts",{"_index":759,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":760,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["src/components/authentication/authentication.constants.ts",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.controller.ts",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/components/authentication/authentication.controller.ts:15",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:22",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:27",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:34",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.module.ts",{"_index":157,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/components/authentication/authentication.service.ts",{"_index":178,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.service.ts:107",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:139",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:154",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:164",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:18",{"_index":190,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:26",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:39",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:53",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:78",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/dto/auth.dto.ts",{"_index":388,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/components/authentication/dto/auth.dto.ts:10",{"_index":389,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:12",{"_index":390,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:5",{"_index":431,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/components/authentication/jwt.guard.ts",{"_index":353,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts:17",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/jwt.strategy.ts:8",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/local.guard.ts",{"_index":378,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts",{"_index":380,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts:15",{"_index":383,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/authentication/local.strategy.ts:7",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/constants/constant.module.ts",{"_index":311,"title":{},"body":{"modules/ConstantModule.html":{}}}],["src/components/constants/constant.schema.ts",{"_index":296,"title":{},"body":{"classes/Constant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/constants/constant.schema.ts:9",{"_index":299,"title":{},"body":{"classes/Constant.html":{}}}],["src/components/constants/constant.service.ts",{"_index":317,"title":{},"body":{"injectables/ConstantService.html":{},"coverage.html":{}}}],["src/components/constants/constant.service.ts:13",{"_index":326,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/constants/constant.service.ts:19",{"_index":329,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/constants/constant.service.ts:7",{"_index":322,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/database/database.module.ts",{"_index":345,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/components/refreshtokens/refreshtoken.module.ts",{"_index":435,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts",{"_index":414,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:14",{"_index":424,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:20",{"_index":421,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:26",{"_index":418,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts",{"_index":439,"title":{},"body":{"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:13",{"_index":447,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:19",{"_index":450,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:26",{"_index":446,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:7",{"_index":443,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/role/dto/role.dto.ts",{"_index":336,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/components/role/dto/role.dto.ts:5",{"_index":338,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["src/components/role/dto/role.dto.ts:8",{"_index":339,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["src/components/role/role.controller.ts",{"_index":462,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/components/role/role.controller.ts:33",{"_index":472,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:45",{"_index":467,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:58",{"_index":475,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:74",{"_index":470,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.module.ts",{"_index":512,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/components/role/role.schema.ts",{"_index":455,"title":{},"body":{"classes/Role.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/role/role.schema.ts:12",{"_index":457,"title":{},"body":{"classes/Role.html":{}}}],["src/components/role/role.schema.ts:9",{"_index":456,"title":{},"body":{"classes/Role.html":{}}}],["src/components/role/role.service.ts",{"_index":515,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/components/role/role.service.ts:13",{"_index":522,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:17",{"_index":523,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:23",{"_index":519,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:27",{"_index":524,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:36",{"_index":520,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:8",{"_index":517,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/users/dto/user.dto.ts",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/components/users/dto/user.dto.ts:11",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:14",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:5",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:8",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/user.controller.ts",{"_index":543,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/components/users/user.controller.ts:22",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["src/components/users/user.controller.ts:33",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["src/components/users/user.module.ts",{"_index":563,"title":{},"body":{"modules/UserModule.html":{}}}],["src/components/users/user.schema.ts",{"_index":532,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/user.schema.ts:10",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:13",{"_index":533,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:16",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:19",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.service.ts",{"_index":565,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/components/users/user.service.ts:13",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:17",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:23",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:27",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:8",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["src/constants.ts",{"_index":635,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/permissions.decorator.ts",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guards/permissions.guard.ts",{"_index":393,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["src/guards/permissions.guard.ts:12",{"_index":397,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/guards/permissions.guard.ts:18",{"_index":400,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/main.ts",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":710,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":713,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":715,"title":{},"body":{"index.html":{}}}],["started",{"_index":581,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starter",{"_index":704,"title":{},"body":{"index.html":{}}}],["statements",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":735,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["such",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":727,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":746,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":667,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"index.html":{}}}],["test:covsupport",{"_index":720,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":719,"title":{},"body":{"index.html":{}}}],["testing",{"_index":488,"title":{},"body":{"controllers/RoleController.html":{}}}],["tests",{"_index":717,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":725,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.logout(req.user",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.refreshaccesstoken(body.refreshtoken",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.register(user",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.validatetokenforuser(payload",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validateuser(email",{"_index":387,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.constantmodel.findone(filter",{"_index":333,"title":{},"body":{"injectables/ConstantService.html":{}}}],["this.constantmodel.updateone",{"_index":334,"title":{},"body":{"injectables/ConstantService.html":{}}}],["this.generateaccesstoken(nuser",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generateaccesstoken(user",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(nrefreshtoken",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(token",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.sign(payload",{"_index":290,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.reflector.get",{"_index":407,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.refreshtokenmodel.create",{"_index":454,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.findone(filter",{"_index":452,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.updateone(filter",{"_index":453,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenservice.create",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.findone",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.updateone",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.rolemodel.create(role",{"_index":528,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.deleteone",{"_index":531,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.find(filter",{"_index":526,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.findone(filter",{"_index":527,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.updateone",{"_index":529,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.roleservice.create(role",{"_index":496,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.delete(id",{"_index":508,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.find",{"_index":491,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.findone",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["this.roleservice.update(id",{"_index":502,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.usermodel.create(user",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.deleteone",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find(filter",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone(filter",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.delete(id",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.find",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["token",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token._id",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token.revoked",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["tokenid",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":736,"title":{},"body":{"index.html":{}}}],["true",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{}}}],["try",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["twitter",{"_index":742,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":755,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["types.objectid",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["types/passport",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":703,"title":{},"body":{"index.html":{}}}],["ui",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":416,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["unit",{"_index":716,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":754,"title":{},"body":{"properties.html":{}}}],["update",{"_index":319,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["update(id",{"_index":473,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["update(update",{"_index":328,"title":{},"body":{"injectables/ConstantService.html":{}}}],["updateone",{"_index":441,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updateone(filter",{"_index":448,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updatequery",{"_index":449,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updates",{"_index":498,"title":{},"body":{"controllers/RoleController.html":{}}}],["updatewriteopresult",{"_index":331,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["uri",{"_index":350,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usefactory",{"_index":348,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["useguards(localauthguard",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":123,"title":{"classes/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/RefreshToken.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user._id",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.controller",{"_index":564,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.name",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.role",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.schema",{"_index":549,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":550,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.toobject",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user:delete",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["user:read",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":542,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["usermodel",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":68,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":385,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["users/dto/user.dto",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["users/user.module",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["users/user.schema",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["users/user.service",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["userschema",{"_index":540,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":186,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":382,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetokenforuser",{"_index":182,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatetokenforuser(document",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser",{"_index":183,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser(email",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["value",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":761,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":589,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["watch",{"_index":711,"title":{},"body":{"index.html":{}}}],["website",{"_index":740,"title":{},"body":{"index.html":{}}}],["world",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":730,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController - base controller for the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('profile:read')@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n                    A simple endpoint to test the auth service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from './components/authentication/jwt.guard';\nimport { Permissions } from './decorators/permissions.decorator';\nimport { PermissionsGuard } from './guards/permissions.guard';\n\n/**\n * AppController - base controller for the application\n */\n@ApiTags('Me')\n@Controller()\nexport class AppController {\n    /**\n     * A simple endpoint to test the auth service.\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('profile:read')\n    @Get('profile')\n    getProfile(@Request() req): { email: string } {\n        return req.user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthenticationModule } from './components/authentication/authentication.module';\nimport { DatabaseModule } from './components/database/database.module';\nimport { RoleModule } from './components/role/role.module';\nimport { UserModule } from './components/users/user.module';\nimport { ENVFILE } from './constants';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            envFilePath: ENVFILE,\n            isGlobal: true,\n        }),\n        DatabaseModule,\n        AuthenticationModule,\n        UserModule,\n        RoleModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: LoginCredentialsDto})@UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post('/logout')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(body: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { AuthenticationService } from '../../components/authentication/authentication.service';\nimport { LocalAuthGuard } from '../../components/authentication/local.guard';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { LoginCredentialsDto, RefreshTokenDto } from './dto/auth.dto';\nimport { JwtAuthGuard } from './jwt.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthenticationController {\n    constructor(private readonly authService: AuthenticationService) {}\n\n    @Post('/register')\n    async register(@Body() user: CreateUserDto) {\n        return this.authService.register(user);\n    }\n\n    @ApiBody({ type: LoginCredentialsDto })\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n\n    @Post('/refresh')\n    public async refresh(@Body() body: RefreshTokenDto) {\n        return this.authService.refreshAccessToken(body.refreshToken);\n    }\n\n    @ApiBearerAuth()\n    @Post('/logout')\n    @UseGuards(JwtAuthGuard)\n    async logout(@Request() req) {\n        return this.authService.logout(req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthenticationModule -->\n\nRoleModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RefreshTokenModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { RefreshTokenModule } from '../refreshTokens/refreshToken.module';\nimport { RoleModule } from '../role/role.module';\nimport { UserModule } from '../users/user.module';\nimport { jwtConstants } from './authentication.constants';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n    imports: [\n        UserModule,\n        RoleModule,\n        RefreshTokenModule,\n        PassportModule,\n        JwtModule.register({\n            secret: jwtConstants.secret,\n            signOptions: { expiresIn: '60s' },\n        }),\n    ],\n    controllers: [AuthenticationController],\n    providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n    exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateAccessToken\n                            \n                            \n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateTokenForUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, refreshTokenService: RefreshTokenService, roleService: RoleService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/authentication.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenService\n                                                  \n                                                        \n                                                                        RefreshTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \ngenerateAccessToken(user: UserDocument, token: RefreshTokenDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                RefreshTokenDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \ngenerateRefreshToken(refreshToken: any, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAccessToken(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateTokenForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateTokenForUser(document: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    document\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare, hash } from 'bcrypt';\nimport { RefreshTokenDocument } from '../refreshTokens/refreshToken.schema';\nimport { RefreshTokenService } from '../refreshTokens/refreshToken.service';\nimport { RoleService } from '../role/role.service';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { UserDocument } from '../users/user.schema';\nimport { UserService } from '../users/user.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(\n        private userService: UserService,\n        private refreshTokenService: RefreshTokenService,\n        private roleService: RoleService,\n        private jwtService: JwtService,\n    ) {}\n\n    async validateTokenForUser(document: any) {\n        const token = await this.refreshTokenService.findOne({\n            _id: document.tokenId,\n            userId: document.sub,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException();\n        }\n    }\n\n    async validateUser(email: string, pass: string): Promise {\n        const user = await this.userService.findOne({ email });\n        if (user == null) {\n            throw new NotFoundException('User does not exist!');\n        }\n\n        if (await compare(pass, user.password)) {\n            const { password, ...result } = user.toObject();\n            return result;\n        }\n\n        return null;\n    }\n\n    async login(user: UserDocument) {\n        let token = await this.refreshTokenService.findOne({\n            userId: user._id,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            token = await this.refreshTokenService.create(\n                {\n                    userId: user._id,\n                },\n                new Date(Date.now() + 7 * DAY),\n            );\n        }\n\n        const accessToken = this.generateAccessToken(user, token);\n        const refreshToken = this.generateRefreshToken(token, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async register(user: CreateUserDto) {\n        const role = await this.roleService.findOne({ _id: user.role });\n        if (role == null) {\n            throw new NotFoundException('Role does not exist!');\n        }\n\n        const nUser = await this.userService.create({\n            email: user.email,\n            password: await hash(user.password, 10),\n            name: user.name,\n            role: user.role,\n        });\n\n        const nRefreshToken = await this.refreshTokenService.create(\n            {\n                userId: nUser._id,\n            },\n            new Date(Date.now() + 7 * DAY),\n        );\n\n        const accessToken = this.generateAccessToken(nUser, nRefreshToken);\n        const refreshToken = this.generateRefreshToken(nRefreshToken, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async refreshAccessToken(refreshToken: string) {\n        let payload: any;\n        try {\n            payload = await this.jwtService.verifyAsync(refreshToken);\n        } catch (error) {\n            throw new UnauthorizedException(error.message);\n        }\n        const token = await this.refreshTokenService.findOne({\n            _id: payload.tokenId,\n            userId: payload.userId,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException('Refresh token not found');\n        }\n\n        if (token.revoked === true) {\n            throw new UnauthorizedException('Refresh token revoked');\n        }\n\n        const user = await this.userService.findOne({ _id: payload.userId });\n\n        if (user == null) {\n            throw new UnauthorizedException('User not found');\n        }\n\n        const accessToken = await this.generateAccessToken(user, token);\n        return { accessToken };\n    }\n\n    async logout(payload: any) {\n        const result = await this.refreshTokenService.updateOne(\n            {\n                _id: payload.tokenId,\n                userId: payload.userId,\n                revoked: false,\n            },\n            {\n                $set: {\n                    revoked: true,\n                },\n            },\n        );\n    }\n\n    generateAccessToken(user: UserDocument, token: RefreshTokenDocument) {\n        const payload = {\n            email: user.email,\n            sub: user._id,\n            tokenId: token._id,\n            role: user.role,\n        };\n        return this.jwtService.sign(payload, { expiresIn: '15m' });\n    }\n\n    generateRefreshToken(refreshToken: any, expiresIn: number) {\n        const payload = {\n            userId: refreshToken.userId,\n            tokenId: refreshToken._id,\n        };\n        return this.jwtService.sign(payload, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Constant.html":{"url":"classes/Constant.html","title":"class - Constant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Constant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/constants/constant.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/constants/constant.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type ConstantDocument = Constant & Document;\n\n@Schema()\nexport class Constant {\n    @Prop()\n    permissions: string[];\n}\n\nexport const ConstantSchema = SchemaFactory.createForClass(Constant);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConstantModule.html":{"url":"modules/ConstantModule.html","title":"module - ConstantModule","body":"\n                   \n\n\n\n\n    Modules\n    ConstantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConstantModule\n\n\n\ncluster_ConstantModule_providers\n\n\n\n\nConstantService\n\nConstantService\n\n\n\nConstantModule\n\nConstantModule\n\nConstantModule -->\n\nConstantService->ConstantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/constants/constant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConstantService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Constant, ConstantSchema } from './constant.schema';\nimport { ConstantService } from './constant.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: Constant.name, schema: ConstantSchema },\n        ]),\n    ],\n    providers: [ConstantService],\n})\nexport class ConstantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConstantService.html":{"url":"injectables/ConstantService.html","title":"injectable - ConstantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConstantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/constants/constant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/constants/constant.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/constants/constant.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(update: ConstantDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/constants/constant.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                ConstantDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateWriteOpResult } from 'mongoose';\nimport { Constant, ConstantDocument } from './constant.schema';\n\n@Injectable()\nexport class ConstantService {\n    constructor(\n        @InjectModel(Constant.name)\n        private constantModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.constantModel.findOne(filter);\n    }\n\n    async update(update: ConstantDocument): Promise {\n        return this.constantModel.updateOne({}, update);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/dto/role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/dto/role.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/dto/role.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly permissions: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly email: string;\n\n    @ApiProperty()\n    readonly password: string;\n\n    @ApiProperty()\n    readonly role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n    imports: [\n        MongooseModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: async (config: ConfigService) => ({\n                uri: config.get('DATABASE_URL'),\n            }),\n            inject: [ConfigService],\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './authentication.constants';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthenticationService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n    }\n\n    async validate(payload: any) {\n        await this.authService.validateTokenForUser(payload);\n        return {\n            userId: payload.sub,\n            email: payload.email,\n            tokenId: payload.tokenId,\n            role: payload.role,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthenticationService) {\n        super({\n            usernameField: 'email',\n            passwordField: 'password',\n        });\n    }\n\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionsGuard.html":{"url":"guards/PermissionsGuard.html","title":"guard - PermissionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, roleService: RoleService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/permissions.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/permissions.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { RoleService } from '../components/role/role.service';\n\n@Injectable()\nexport class PermissionsGuard implements CanActivate {\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly roleService: RoleService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const routePermissions = this.reflector.get(\n            'permissions',\n            context.getHandler(),\n        );\n\n        if (!routePermissions) {\n            return true;\n        }\n\n        const request: Request = context.getArgByIndex(0);\n\n        const role = await this.roleService.findOne({ _id: request.user.role });\n        if (role == null) {\n            throw new NotFoundException('Role not found');\n        }\n\n        const hasPermission = routePermissions.every((routePermission) =>\n            role.permissions.includes(routePermission),\n        );\n\n        return hasPermission;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                revoked\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, ObjectId, SchemaTypes } from 'mongoose';\nimport { User } from '../users/user.schema';\n\nexport type RefreshTokenDocument = RefreshToken & Document;\n\n@Schema()\nexport class RefreshToken {\n    @Prop({\n        type: SchemaTypes.ObjectId,\n        ref: User.name,\n        required: true,\n    })\n    userId: ObjectId;\n\n    @Prop({\n        type: SchemaTypes.Boolean,\n        default: false,\n    })\n    revoked: boolean;\n\n    @Prop({\n        type: SchemaTypes.Date,\n        required: true,\n    })\n    expiresAt: Date;\n}\n\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RefreshTokenModule.html":{"url":"modules/RefreshTokenModule.html","title":"module - RefreshTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    RefreshTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refreshToken.schema';\nimport { RefreshTokenService } from './refreshToken.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: RefreshToken.name, schema: RefreshTokenSchema },\n        ]),\n    ],\n    providers: [RefreshTokenService],\n    exports: [RefreshTokenService],\n})\nexport class RefreshTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(refreshTokenModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/refreshTokens/refreshToken.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        refreshTokenModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(refreshToken: literal type, expiresAt: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresAt\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filter: FilterQuery, update: UpdateQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateQuery, UpdateWriteOpResult } from 'mongoose';\nimport { RefreshToken, RefreshTokenDocument } from './refreshToken.schema';\n\n@Injectable()\nexport class RefreshTokenService {\n    constructor(\n        @InjectModel(RefreshToken.name)\n        private refreshTokenModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.refreshTokenModel.findOne(filter);\n    }\n\n    async updateOne(\n        filter: FilterQuery,\n        update: UpdateQuery,\n    ): Promise {\n        return this.refreshTokenModel.updateOne(filter, update);\n    }\n\n    async create(\n        refreshToken: { userId: string },\n        expiresAt: Date,\n    ): Promise {\n        return this.refreshTokenModel.create({ ...refreshToken, expiresAt });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/role.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/role.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type RoleDocument = Role & Document;\n\n@Schema()\nexport class Role {\n    @Prop()\n    name: string;\n\n    @Prop()\n    permissions: string[];\n}\n\nexport const RoleSchema = SchemaFactory.createForClass(Role);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(role: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, role: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Put('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { UpdateWriteOpResult } from 'mongoose';\nimport { Permissions } from '../../decorators/permissions.decorator';\nimport { PermissionsGuard } from '../../guards/permissions.guard';\nimport { JwtAuthGuard } from '../authentication/jwt.guard';\nimport { CreateRoleDto } from './dto/role.dto';\nimport { RoleDocument } from './role.schema';\nimport { RoleService } from './role.service';\n\n@ApiTags('Roles')\n@Controller('roles')\nexport class RoleController {\n    constructor(private readonly roleService: RoleService) {}\n\n    /**\n     * @permissions `role:read`\n     * @description Returns all roles with their permissions\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    // @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:read')\n    @Get()\n    async find(): Promise {\n        return this.roleService.find({});\n    }\n\n    /**\n     * @permissions `role:create`\n     * @description Creates new role with permissions\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    // @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:create')\n    @Post()\n    async create(@Body() role: CreateRoleDto): Promise {\n        return this.roleService.create(role);\n    }\n\n    /**\n     * @permissions `role:update`\n     * @description Updates role with permission\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:update')\n    @Put('/:id')\n    async update(\n        @Param('id') id: string,\n        @Body() role: CreateRoleDto,\n    ): Promise {\n        return this.roleService.update(id, role);\n    }\n\n    /**\n     * @permissions `role:delete`\n     * @description Deletes role\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:delete')\n    @Delete('/:id')\n    async delete(@Param('id') id: string): Promise {\n        return this.roleService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_RoleModule_exports\n\n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RoleController } from './role.controller';\nimport { Role, RoleSchema } from './role.schema';\nimport { RoleService } from './role.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: Role.name, schema: RoleSchema }]),\n    ],\n    controllers: [RoleController],\n    providers: [RoleService],\n    exports: [RoleService],\n})\nexport class RoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/role/role.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(role: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, role: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateWriteOpResult } from 'mongoose';\nimport { CreateRoleDto } from './dto/role.dto';\nimport { Role, RoleDocument } from './role.schema';\n\n@Injectable()\nexport class RoleService {\n    constructor(\n        @InjectModel(Role.name) private roleModel: Model,\n    ) {}\n\n    async find(filter: FilterQuery): Promise {\n        return this.roleModel.find(filter);\n    }\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.roleModel.findOne(filter);\n    }\n\n    async create(role: CreateRoleDto): Promise {\n        return this.roleModel.create(role);\n    }\n\n    async update(\n        id: string,\n        role: CreateRoleDto,\n    ): Promise {\n        return this.roleModel.updateOne({ _id: id }, role, {\n            returnDocument: 'after',\n        });\n    }\n\n    async delete(id: string): Promise {\n        return this.roleModel.deleteOne({ _id: id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Role } from '../role/role.schema';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n    @Prop()\n    name: string;\n\n    @Prop()\n    email: string;\n\n    @Prop()\n    password: string;\n\n    @Prop({ type: Types.ObjectId, ref: Role.name })\n    role: Types.ObjectId;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('user:delete')@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('user:read')@Get()\n                \n            \n\n            \n                \n                    Defined in src/components/users/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { Permissions } from '../../decorators/permissions.decorator';\nimport { PermissionsGuard } from '../../guards/permissions.guard';\nimport { JwtAuthGuard } from '../authentication/jwt.guard';\nimport { UserDocument } from './user.schema';\nimport { UserService } from './user.service';\n\n@ApiTags('Users')\n@ApiBearerAuth()\n@Controller('users')\nexport class UserController {\n    constructor(private readonly userService: UserService) {}\n\n    /**\n     * @permissions `user:read`\n     * @description Returns all users with their permissions\n     */\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('user:read')\n    @Get()\n    async find(): Promise {\n        return this.userService.find({});\n    }\n\n    /**\n     * @permissions `user:delete`\n     * @description Deletes user\n     */\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('user:delete')\n    @Delete('/:id')\n    async delete(@Param('id') id: string): Promise {\n        return this.userService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nRoleModule\n\nRoleModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoleModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoleModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RoleModule } from '../role/role.module';\nimport { UserController } from './user.controller';\nimport { User, UserSchema } from './user.schema';\nimport { UserService } from './user.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n        RoleModule,\n    ],\n    controllers: [UserController],\n    providers: [UserService],\n    exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { CreateUserDto } from './dto/user.dto';\nimport { User, UserDocument } from './user.schema';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectModel(User.name) private userModel: Model,\n    ) {}\n\n    async find(filter: FilterQuery): Promise {\n        return this.userModel.find(filter);\n    }\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.userModel.findOne(filter);\n    }\n\n    async create(user: CreateUserDto): Promise {\n        return this.userModel.create(user);\n    }\n\n    async delete(id: string): Promise {\n        return this.userModel.deleteOne({ _id: id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.0.3 (2022-06-17)\nFeatures\n\nroles & permissions (c103a57)\ntest release cmd (7788688)\n\n0.0.2 (2022-06-15)\nFeatures\n\nbase authentication (76650cd)\nlogin, logout, commitlint and husky (947feeb)\ntest docs generation (12e51eb)\n\nBug Fixes\n\nmake husky pre-push file an executable (918d7ca)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            variable\n            DAY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/constants/constant.schema.ts\n            \n            class\n            Constant\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/constants/constant.schema.ts\n            \n            variable\n            ConstantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/constants/constant.service.ts\n            \n            injectable\n            ConstantService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/role/dto/role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/role/role.schema.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/role/role.schema.ts\n            \n            variable\n            RoleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/users/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENVFILE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/permissions.decorator.ts\n            \n            variable\n            Permissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/permissions.guard.ts\n            \n            guard\n            PermissionsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwagger\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            mongoose : ^6.3.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            setupSwagger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main entry point for the application.\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Setup swagger dashboard, please run the project and head over to /api,\nThere is also a json api specification /api-json that can be imported in rest-api apps such as (insomnia,postman).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConstantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RefreshTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_ConstantModule\n\n\n\ncluster_ConstantModule_providers\n\n\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthenticationModule -->\n\nRoleModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoleModule->UserModule\n\n\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nConstantService\n\nConstantService\n\n\n\nConstantModule\n\nConstantModule\n\nConstantModule -->\n\nConstantService->ConstantModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.3\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConstantDocument   (src/.../constant.schema.ts)\n                        \n                        \n                            RefreshTokenDocument   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            RoleDocument   (src/.../role.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/constants/constant.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ConstantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/refreshTokens/refreshToken.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/role/role.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RoleDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConstantSchema   (src/.../constant.schema.ts)\n                        \n                        \n                            DAY   (src/.../authentication.service.ts)\n                        \n                        \n                            ENV   (src/.../constants.ts)\n                        \n                        \n                            ENVFILE   (src/.../constants.ts)\n                        \n                        \n                            jwtConstants   (src/.../authentication.constants.ts)\n                        \n                        \n                            Permissions   (src/.../permissions.decorator.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            RoleSchema   (src/.../role.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/constants/constant.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ConstantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Constant)\n                    \n                \n\n\n        \n    \n\n    src/components/authentication/authentication.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DAY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 24 * 60 * 60 * 1000\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENVFILE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ENV ? `.env.${ENV}` : '.env'\n                    \n                \n\n\n        \n    \n\n    src/components/authentication/authentication.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: string[]) =>\n    SetMetadata('permissions', permissions)\n                    \n                \n\n\n        \n    \n\n    src/components/refreshTokens/refreshToken.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/components/role/role.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Role)\n                    \n                \n\n\n        \n    \n\n    src/components/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
