var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.512,1,2.285]],["body/controllers/AppController.html",[0,2.503,1,3.783,2,1.503,3,0.304,4,0.271,5,0.239,6,2.876,7,2.065,8,3.92,9,3.92,10,0.488,11,1.557,12,4.635,13,3.401,14,1.221,15,0.026,16,2.876,17,3.401,18,0.664,19,3.401,20,4.635,21,3.92,22,3.448,23,3.92,24,4.635,25,1.142,26,0.664,27,1.142,28,3.92,29,1.142,30,2.876,31,0.529,32,0.53,33,2.53,34,2.271,35,0.572,36,3.096,37,2.271,38,1.503,39,1.746,40,3.401,41,1.503,42,2.53,43,2.581,44,2.53,45,3.401,46,0.304,47,0.038,48,2.271,49,3.401,50,3.401,51,3.401,52,1.618,53,0.875,54,1.142,55,3.401,56,0.017,57,0.017]],["title/modules/AppModule.html",[58,1.075,59,2.285]],["body/modules/AppModule.html",[1,3.382,2,1.943,3,0.282,4,0.251,5,0.221,15,0.026,32,0.568,35,0.53,46,0.282,47,0.035,56,0.016,57,0.016,58,1.381,59,4.445,60,1.297,61,1.943,62,2.663,63,2.663,64,2.663,65,3.627,66,3.627,67,3.067,68,3.325,69,3.627,70,2.257,71,1.617,72,1.617,73,3.149,74,2.447,75,2.257,76,2.663,77,2.342,78,3.149,79,3.149,80,3.149,81,3.149,82,3.149,83,3.149,84,3.27,85,3.149,86,3.149,87,3.149,88,3.149,89,2.103]],["title/injectables/AppService.html",[69,2.077,90,0.62]],["body/injectables/AppService.html",[3,0.402,4,0.358,5,0.316,10,0.645,11,1.866,15,0.025,18,0.877,29,1.51,32,0.402,35,0.756,46,0.402,47,0.051,53,1.43,54,1.51,56,0.021,57,0.021,69,3.375,90,1.008,91,1.727,92,3.801,93,6.303,94,4.495,95,4.495,96,4.495]],["title/controllers/AuthenticationController.html",[0,1.512,97,2.285]],["body/controllers/AuthenticationController.html",[0,1.145,2,1.145,3,0.232,4,0.206,5,0.182,10,0.372,11,1.283,14,1.799,15,0.026,18,0.978,23,2.191,25,1.683,26,0.978,27,1.683,28,4.238,29,1.683,31,0.707,32,0.517,33,1.927,34,1.73,35,0.436,36,2.552,37,1.73,38,1.145,39,1.33,46,0.232,47,0.029,48,1.73,54,1.683,56,0.014,57,0.014,97,2.552,98,2.191,99,1.927,100,2.271,101,2.843,102,2.843,103,4.54,104,3.821,105,3.231,106,2.591,107,2.591,108,2.591,109,2.591,110,3.728,111,2.591,112,2.591,113,2.591,114,2.591,115,3.043,116,3.821,117,2.591,118,3.839,119,2.191,120,2.79,121,3.821,122,2.591,123,1.574,124,2.191,125,3.821,126,1.818,127,2.591,128,1.73,129,2.591,130,2.191,131,2.32,132,2.591,133,2.591,134,2.591,135,2.591,136,1.573,137,1.145,138,1.927,139,2.591,140,2.591,141,2.591,142,2.591,143,2.591,144,2.591,145,2.591,146,2.591,147,2.591,148,2.591,149,2.591]],["title/modules/AuthenticationModule.html",[58,1.075,65,2.077]],["body/modules/AuthenticationModule.html",[2,1.803,3,0.253,4,0.226,5,0.199,15,0.026,32,0.57,35,0.477,46,0.253,47,0.032,56,0.015,57,0.015,58,1.282,60,1.167,61,1.803,65,4.046,67,2.963,68,3.212,70,2.095,71,1.455,72,1.455,74,2.271,75,2.095,97,3.192,126,3.062,150,2.396,151,2.396,152,2.396,153,2.396,154,3.504,155,3.504,156,3.504,157,2.834,158,2.725,159,2.834,160,2.108,161,4.08,162,1.578,163,2.834,164,2.396,165,2.834,166,1.893,167,2.396,168,2.834,169,2.108,170,2.834,171,2.834,172,2.834,173,2.396,174,2.396,175,2.834,176,2.396,177,2.834]],["title/injectables/AuthenticationService.html",[90,0.62,126,1.627]],["body/injectables/AuthenticationService.html",[3,0.107,4,0.096,5,0.084,10,0.172,11,0.692,15,0.026,18,0.909,25,1.564,26,0.943,27,1.564,29,1.497,31,0.725,32,0.417,35,0.202,46,0.107,47,0.014,52,1.528,53,1.199,54,1.418,56,0.008,57,0.008,89,1.377,90,0.374,91,0.461,100,2.04,101,1.534,102,1.534,105,1.743,110,2.015,119,1.743,120,1.789,123,1.739,126,0.981,130,1.015,160,0.893,176,3.058,178,0.893,179,2.062,180,2.062,181,2.062,182,2.062,183,2.062,184,0.981,185,1.201,186,2.027,187,2.352,188,2.009,189,4.224,190,1.201,191,2.062,192,2.565,193,5.346,194,2.146,195,1.201,196,2.062,197,2.709,198,1.201,199,1.878,200,2.062,201,1.201,202,2.062,203,1.201,204,3.058,205,2.062,206,1.201,207,1.201,208,2.062,209,1.201,210,0.729,211,2.062,212,2.709,213,1.201,214,0.911,215,1.015,216,1.743,217,1.201,218,1.201,219,1.015,220,1.201,221,1.201,222,1.201,223,1.015,224,1.201,225,2.88,226,2.691,227,1.015,228,1.743,229,1.015,230,1.789,231,3.57,232,2.709,233,2.416,234,1.201,235,2.821,236,1.201,237,2.015,238,2.709,239,3.109,240,2.015,241,3.338,242,2.39,243,3.572,244,3.142,245,2.062,246,1.201,247,2.062,248,1.201,249,1.201,250,1.148,251,2.709,252,1.201,253,2.709,254,2.062,255,2.062,256,2.717,257,3.948,258,2.062,259,1.201,260,1.235,261,1.015,262,2.709,263,1.015,264,1.201,265,1.201,266,2.062,267,1.201,268,1.015,269,0.893,270,2.062,271,1.201,272,1.201,273,1.201,274,1.201,275,1.201,276,1.201,277,1.201,278,1.201,279,1.743,280,2.709,281,2.062,282,1.743,283,1.201,284,1.201,285,1.201,286,1.201,287,1.201,288,1.743,289,1.201,290,2.062,291,1.201,292,1.201,293,1.201]],["title/classes/Constant.html",[47,0.039,294,2.077]],["body/classes/Constant.html",[3,0.372,4,0.331,5,0.292,10,0.597,14,1.492,15,0.026,18,0.811,31,0.823,32,0.473,41,2.573,46,0.521,47,0.047,53,1.362,56,0.02,57,0.02,210,3.213,225,2.134,294,3.534,295,1.837,296,2.776,297,2.179,298,3.888,299,4.156,300,2.517,301,2.776,302,1.306,303,1.711,304,3.092,305,2.776,306,3.514]],["title/modules/ConstantModule.html",[58,1.075,307,2.285]],["body/modules/ConstantModule.html",[3,0.353,4,0.314,5,0.277,15,0.026,26,0.77,32,0.537,35,0.664,46,0.353,47,0.044,56,0.019,57,0.019,58,1.608,60,1.625,61,2.262,70,2.628,71,2.026,72,2.026,74,2.849,75,2.026,294,2.396,300,1.877,302,1.24,305,3.418,307,4.261,308,3.336,309,3.336,310,3.874,311,3.946,312,2.396,313,3.336,314,3.946,315,2.635,316,3.946]],["title/injectables/ConstantService.html",[90,0.62,310,2.077]],["body/injectables/ConstantService.html",[3,0.293,4,0.261,5,0.23,10,0.471,11,1.519,15,0.026,18,1.01,25,1.738,26,1.01,27,1.738,29,1.519,31,0.806,32,0.499,35,0.552,46,0.293,47,0.037,54,1.519,56,0.017,57,0.017,90,0.82,91,1.261,100,2.172,184,2.152,214,2.466,230,1.827,294,1.993,302,1.031,303,1.351,304,4.15,310,2.747,313,2.775,317,2.775,318,3.457,319,3.726,320,3.281,321,3.726,322,3.281,323,4.523,324,2.192,325,3.726,326,3.281,327,3.021,328,4.523,329,3.281,330,2.192,331,2.192,332,3.281,333,3.281,334,3.281]],["title/classes/CreateRoleDto.html",[47,0.039,335,2.077]],["body/classes/CreateRoleDto.html",[3,0.373,4,0.333,5,0.293,10,0.599,14,1.905,15,0.025,18,1.035,26,1.138,31,0.826,32,0.373,38,1.845,41,2.578,46,0.373,47,0.047,53,1.579,56,0.02,57,0.02,137,2.862,295,1.845,297,2.185,335,3.222,336,3.53,337,4.232,338,4.175,339,4.175]],["title/classes/CreateUserDto.html",[47,0.039,120,1.904]],["body/classes/CreateUserDto.html",[3,0.327,4,0.291,5,0.257,10,0.524,14,2.094,15,0.025,18,1.138,26,1.067,31,0.908,32,0.327,38,1.615,46,0.327,47,0.041,52,2.601,53,1.666,56,0.018,57,0.018,120,2.708,137,2.971,250,3.045,260,2.102,295,1.615,297,2.003,337,4.378,340,3.089,341,3.653,342,3.653,343,3.653,344,3.653]],["title/modules/DatabaseModule.html",[58,1.075,66,2.077]],["body/modules/DatabaseModule.html",[3,0.382,4,0.34,5,0.3,15,0.026,32,0.527,35,0.718,46,0.382,47,0.048,56,0.02,57,0.02,58,1.691,60,1.758,66,3.268,75,2.764,76,4.551,77,3.176,100,1.533,302,1.342,312,2.593,345,4.27,346,5.894,347,4.27,348,4.27,349,4.27,350,4.27,351,4.27,352,4.27]],["title/injectables/JwtAuthGuard.html",[39,1.756,90,0.62]],["body/injectables/JwtAuthGuard.html",[3,0.427,4,0.38,5,0.335,15,0.025,32,0.515,35,0.803,39,2.959,46,0.427,47,0.054,56,0.021,57,0.021,90,1.045,91,1.833,162,2.656,353,4.034,354,4.034,355,3.186,356,4.771]],["title/injectables/JwtStrategy.html",[90,0.62,155,2.077]],["body/injectables/JwtStrategy.html",[3,0.303,4,0.27,5,0.238,10,0.486,11,1.553,15,0.026,18,0.902,25,1.553,26,0.902,27,1.553,29,1.138,31,0.72,32,0.529,35,0.57,46,0.303,47,0.038,52,1.612,54,1.138,56,0.017,57,0.017,90,0.839,91,1.302,100,1.89,110,2.521,126,2.69,136,2.058,137,1.498,138,3.44,155,2.808,162,1.886,166,2.263,167,2.865,169,2.521,174,2.865,184,1.612,204,2.865,231,2.263,235,2.263,242,2.521,260,1.302,279,2.865,288,2.865,355,2.263,357,2.865,358,3.91,359,2.865,360,3.388,361,4.624,362,3.388,363,3.388,364,2.865,365,2.521,366,2.865,367,2.865,368,2.865,369,2.865,370,3.388,371,3.388,372,3.388,373,3.388,374,3.388,375,3.388,376,3.388,377,3.388]],["title/injectables/LocalAuthGuard.html",[90,0.62,128,2.285]],["body/injectables/LocalAuthGuard.html",[3,0.427,4,0.38,5,0.335,15,0.025,32,0.515,35,0.803,46,0.427,47,0.054,56,0.021,57,0.021,90,1.045,91,1.833,128,3.849,162,2.656,354,4.034,355,3.186,378,4.034,379,4.771]],["title/injectables/LocalStrategy.html",[90,0.62,156,2.077]],["body/injectables/LocalStrategy.html",[3,0.3,4,0.267,5,0.235,10,0.481,11,1.541,15,0.026,18,0.896,25,1.541,26,0.896,27,1.541,29,1.126,31,0.714,32,0.503,35,0.564,46,0.3,47,0.038,52,2.183,53,1.567,54,1.126,56,0.017,57,0.017,90,0.833,91,1.288,100,1.879,123,2.155,126,2.678,136,2.035,138,3.414,156,2.787,162,1.866,169,2.493,184,1.594,214,2.029,216,3.881,225,1.721,231,2.239,239,2.035,244,2.493,250,3.283,355,2.239,358,3.881,359,2.834,364,2.834,365,2.493,367,2.834,368,2.834,369,2.834,380,2.834,381,3.352,382,4.59,383,3.352,384,2.834,385,3.352,386,3.352,387,3.352]],["title/classes/LoginCredentialsDto.html",[47,0.039,131,2.077]],["body/classes/LoginCredentialsDto.html",[3,0.359,4,0.32,5,0.282,10,0.576,14,1.858,15,0.025,18,1.01,31,0.805,32,0.359,38,1.774,46,0.463,47,0.058,52,2.723,53,1.611,56,0.019,57,0.019,115,2.437,131,3.142,137,2.882,199,1.909,250,3.188,295,1.774,297,2.13,337,4.281,388,2.985,389,4.013,390,4.013]],["title/guards/PermissionsGuard.html",[43,1.904,391,2.545]],["body/guards/PermissionsGuard.html",[3,0.272,4,0.243,5,0.214,10,0.437,11,1.442,15,0.026,18,0.838,25,1.442,26,0.838,27,1.442,29,1.023,31,0.668,32,0.483,33,3.7,35,0.513,41,1.347,43,2.391,46,0.272,47,0.034,54,1.442,56,0.016,57,0.016,89,2.035,90,0.779,100,1.786,137,1.898,184,2.043,188,2.889,214,1.898,215,2.576,225,2.774,230,2.391,231,2.035,233,2.035,239,1.85,243,2.576,244,2.266,260,1.65,261,2.576,263,2.576,282,2.576,392,3.046,393,2.576,394,5.402,395,3.046,396,5.91,397,3.046,398,4.295,399,5.402,400,3.046,401,3.046,402,2.576,403,2.576,404,3.046,405,3.046,406,4.295,407,3.046,408,3.046,409,3.046,410,3.046,411,4.295,412,3.046,413,3.046]],["title/classes/RefreshToken.html",[47,0.039,199,1.627]],["body/classes/RefreshToken.html",[3,0.292,4,0.261,5,0.23,10,0.469,14,1.855,15,0.026,18,1.008,31,0.964,32,0.462,46,0.462,47,0.037,56,0.017,57,0.017,89,3.721,123,1.346,194,2.184,199,2.458,210,2.74,223,2.765,225,1.679,235,3.451,237,3.843,240,3.357,241,4.369,242,3.357,269,2.432,295,1.445,297,1.858,298,3.721,300,2.146,301,2.184,302,1.027,303,1.346,414,2.184,415,4.369,416,4.711,417,5.571,418,3.27,419,4.512,420,3.816,421,3.27,422,5.167,423,3.816,424,3.27,425,3.27,426,3.27,427,3.27,428,3.27,429,2.184,430,2.765]],["title/classes/RefreshTokenDto.html",[47,0.039,115,2.077]],["body/classes/RefreshTokenDto.html",[3,0.378,4,0.337,5,0.297,10,0.607,14,1.519,15,0.025,18,0.826,31,0.659,32,0.378,38,1.87,46,0.479,47,0.06,52,2.013,53,1.587,56,0.02,57,0.02,115,3.25,131,2.569,137,2.812,199,2.792,250,2.356,295,1.87,297,2.204,337,4.249,388,3.147,431,4.231]],["title/modules/RefreshTokenModule.html",[58,1.075,154,2.077]],["body/modules/RefreshTokenModule.html",[3,0.337,4,0.3,5,0.265,15,0.026,26,0.736,32,0.528,35,0.634,46,0.337,47,0.042,56,0.018,57,0.018,58,1.561,60,1.553,61,2.196,70,2.551,71,1.936,72,1.936,74,2.766,75,1.936,154,3.901,158,3.318,187,3.76,199,1.794,300,1.794,302,1.185,312,2.29,315,2.518,429,3.318,432,3.188,433,3.188,434,3.188,435,3.771,436,3.188,437,3.771,438,3.771]],["title/injectables/RefreshTokenService.html",[90,0.62,187,1.904]],["body/injectables/RefreshTokenService.html",[3,0.249,4,0.222,5,0.195,10,0.4,11,1.352,15,0.026,18,1.012,25,1.741,26,1.012,27,1.741,29,1.589,30,3.405,31,0.893,32,0.464,35,0.468,46,0.249,47,0.031,53,0.716,54,1.589,56,0.015,57,0.015,90,0.73,91,1.07,100,2.216,184,1.915,187,2.242,194,1.859,199,2.466,214,2.535,230,1.55,235,1.859,237,3.857,240,3.52,302,0.875,303,1.146,318,3.16,319,3.463,321,3.463,324,1.859,325,3.95,327,3.463,330,1.859,331,1.859,436,2.354,439,2.354,440,3.16,441,4.731,442,2.784,443,2.784,444,4.027,445,2.784,446,2.784,447,2.784,448,2.784,449,5.185,450,2.784,451,2.784,452,2.784,453,2.784,454,2.784]],["title/classes/Role.html",[47,0.039,260,1.314]],["body/classes/Role.html",[3,0.351,4,0.313,5,0.276,10,0.564,14,1.832,15,0.026,18,0.996,26,1.106,31,0.882,32,0.456,41,2.505,46,0.507,47,0.044,53,1.544,56,0.019,57,0.019,210,3.099,225,2.018,260,2.178,295,1.737,297,2.101,298,4.153,300,2.427,301,2.624,302,1.235,303,1.618,455,2.624,456,3.929,457,3.929,458,2.624,459,2.624,460,3.322]],["title/controllers/RoleController.html",[0,1.512,461,2.285]],["body/controllers/RoleController.html",[0,0.899,2,0.899,3,0.182,4,0.162,5,0.143,7,2.687,10,0.292,11,1.067,14,1.589,15,0.026,16,2.688,18,0.863,21,3.742,25,1.314,26,0.764,27,1.314,29,1.612,31,0.609,32,0.506,34,1.358,35,0.342,36,2.614,37,1.358,38,0.899,39,1.044,41,2.351,42,1.513,43,2.673,44,1.513,46,0.182,47,0.023,48,2.955,53,1.31,54,1.486,56,0.012,57,0.012,99,1.513,100,2.151,118,2.688,124,3.309,136,1.235,137,0.899,188,1.861,214,2.433,239,1.235,260,2.174,303,0.837,319,2.614,331,1.358,335,3.229,440,2.123,458,1.358,461,2.123,462,1.719,463,3.179,464,2.614,465,2.955,466,1.719,467,2.033,468,1.358,469,2.033,470,2.033,471,2.955,472,2.033,473,1.719,474,2.033,475,2.033,476,1.719,477,2.033,478,1.719,479,1.719,480,1.513,481,1.719,482,2.033,483,2.033,484,2.033,485,4.425,486,4.425,487,4.801,488,4.425,489,4.425,490,2.033,491,2.033,492,2.033,493,2.033,494,2.033,495,2.033,496,2.033,497,2.033,498,2.033,499,2.033,500,2.033,501,2.033,502,2.033,503,2.033,504,1.719,505,2.033,506,1.719,507,1.719,508,2.033]],["title/modules/RoleModule.html",[58,1.075,67,1.756]],["body/modules/RoleModule.html",[2,2.156,3,0.328,4,0.292,5,0.258,15,0.026,26,0.716,32,0.544,35,0.617,46,0.328,47,0.041,56,0.018,57,0.018,58,1.532,60,1.51,61,2.156,67,3.276,70,2.504,71,1.883,72,1.883,74,2.715,75,1.883,158,3.257,188,3.199,260,1.409,300,1.744,302,1.152,312,2.227,315,2.449,459,3.257,461,3.66,480,2.728,481,3.101,509,3.101,510,3.101,511,3.101,512,3.667,513,3.667,514,3.101]],["title/injectables/RoleService.html",[90,0.62,188,1.627]],["body/injectables/RoleService.html",[3,0.217,4,0.194,5,0.171,10,0.349,11,1.223,15,0.026,18,1.066,25,1.834,26,1.066,27,1.834,29,1.747,31,0.85,32,0.465,35,0.409,46,0.217,47,0.027,53,1.406,54,1.747,56,0.014,57,0.014,90,0.661,91,0.934,100,2.306,184,1.733,188,1.733,214,2.682,230,1.353,233,2.433,260,2.099,302,0.763,303,1,318,2.919,319,2.919,321,3.243,324,1.623,325,3.782,327,2.919,330,1.623,331,1.623,335,3.439,440,2.433,458,1.623,464,2.433,465,2.433,466,3.08,468,2.433,471,3.474,473,2.054,479,2.054,480,1.807,515,2.054,516,2.429,517,2.429,518,3.643,519,2.429,520,2.429,521,3.08,522,2.429,523,2.429,524,2.429,525,2.429,526,2.429,527,2.429,528,2.429,529,2.429,530,2.429,531,2.429]],["title/classes/User.html",[47,0.039,123,1.409]],["body/classes/User.html",[3,0.301,4,0.268,5,0.236,10,0.483,14,2.024,15,0.026,18,1.1,26,1.023,31,0.949,32,0.469,46,0.469,47,0.038,52,2.494,53,1.569,56,0.017,57,0.017,123,2.159,192,2.043,210,2.794,225,1.727,250,2.92,260,2.167,295,1.487,297,1.895,298,4.244,300,2.189,301,2.247,302,1.057,303,1.385,415,2.845,416,3.891,423,3.891,514,2.845,532,2.247,533,3.364,534,3.364,535,3.364,536,5.244,537,3.364,538,3.364,539,3.364,540,2.247,541,2.845]],["title/controllers/UserController.html",[0,1.512,542,2.285]],["body/controllers/UserController.html",[0,1.317,2,1.317,3,0.266,4,0.237,5,0.209,7,2.567,10,0.428,11,1.419,14,1.518,15,0.026,18,0.825,25,1,26,0.581,27,1,29,1.65,31,0.464,32,0.54,34,1.989,35,0.501,36,2.823,37,1.989,38,1.317,39,1.529,41,2.364,42,2.216,43,2.736,44,2.216,46,0.266,47,0.034,48,3.572,53,1.265,54,1.419,56,0.016,57,0.016,99,2.216,100,2.106,123,1.226,136,1.809,137,1.317,186,2.523,192,1.809,214,2.364,464,3.282,465,3.572,468,1.989,471,2.823,476,2.519,478,2.519,504,2.519,506,2.519,507,2.519,542,2.823,543,2.519,544,4.227,545,2.978,546,2.978,547,2.978,548,2.978,549,2.216,550,2.519,551,2.978,552,2.978,553,2.978,554,2.978,555,2.978,556,2.978,557,2.978,558,2.978]],["title/modules/UserModule.html",[58,1.075,68,1.904]],["body/modules/UserModule.html",[2,2.075,3,0.31,4,0.276,5,0.243,15,0.026,26,0.676,32,0.55,35,0.583,46,0.31,47,0.039,56,0.017,57,0.017,58,1.475,60,1.426,61,2.075,67,3.158,68,3.61,70,2.41,71,1.779,72,1.779,74,2.613,75,2.41,123,1.426,158,3.135,164,2.929,186,3.423,269,2.577,300,1.647,302,1.088,312,2.103,315,2.313,540,3.135,542,3.556,549,2.577,550,2.929,559,2.929,560,2.929,561,2.929,562,3.464,563,3.464,564,3.464]],["title/injectables/UserService.html",[90,0.62,186,1.756]],["body/injectables/UserService.html",[3,0.244,4,0.217,5,0.192,10,0.391,11,1.332,15,0.026,18,1.065,25,1.832,26,1.065,27,1.832,29,1.724,31,0.849,32,0.488,35,0.459,46,0.244,47,0.031,53,1.203,54,1.724,56,0.015,57,0.015,90,0.72,91,1.048,100,2.294,120,2.859,123,1.634,184,1.887,186,2.037,192,1.656,214,2.662,230,1.518,233,1.821,302,0.857,303,1.123,318,3.123,321,3.43,324,1.821,325,3.925,327,3.123,330,1.821,440,2.65,464,2.65,465,2.65,468,2.65,471,2.65,521,3.355,549,2.028,565,2.306,566,2.727,567,2.727,568,3.967,569,3.967,570,2.727,571,2.727,572,2.727,573,2.727,574,2.727,575,2.727,576,2.727,577,2.727,578,2.727,579,2.727]],["title/changelog.html",[580,2.422,581,2.422,582,2.422]],["body/changelog.html",[5,0.388,8,3.765,15,0.02,22,3.312,56,0.02,57,0.02,101,3.312,102,3.312,582,3.765,583,4.453,584,4.453,585,3.312,586,4.453,587,4.453,588,4.453,589,3.765,590,4.453,591,4.453,592,3.765,593,4.453,594,4.453,595,4.453,596,4.453,597,4.453,598,4.453,599,4.453,600,5.525,601,4.453,602,4.453,603,4.453,604,4.453,605,4.453,606,4.453,607,4.453,608,4.453,609,4.453,610,4.453,611,4.453]],["title/coverage.html",[612,3.462]],["body/coverage.html",[0,2.143,1,1.618,5,0.17,6,2.049,15,0.026,31,0.377,39,1.244,41,1.071,43,1.349,47,0.066,56,0.013,57,0.013,69,1.471,84,1.802,90,1.1,92,2.049,97,1.618,98,2.049,115,1.471,120,1.349,123,0.998,126,1.153,128,1.618,131,1.471,155,1.471,156,1.471,166,1.618,178,2.704,186,1.244,187,1.349,188,1.153,199,1.153,226,1.802,239,1.471,260,0.931,294,1.471,296,2.428,305,1.618,310,1.471,317,2.049,335,1.471,336,2.049,340,2.049,353,2.049,357,2.049,378,2.049,380,2.049,388,2.704,391,1.802,393,2.049,414,2.428,429,1.618,439,2.049,455,2.428,459,1.618,461,1.618,462,2.049,515,2.049,532,2.428,540,1.618,542,1.618,543,2.049,565,2.049,612,1.802,613,2.423,614,2.423,615,2.423,616,4.364,617,2.423,618,6.836,619,4.364,620,2.049,621,5.953,622,6.156,623,5.196,624,2.423,625,5.658,626,3.636,627,2.423,628,2.423,629,3.074,630,2.049,631,2.049,632,3.074,633,3.636,634,2.049,635,3.636,636,2.049,637,2.423,638,2.423]],["title/dependencies.html",[61,1.817,639,2.422]],["body/dependencies.html",[15,0.026,35,0.669,38,1.759,56,0.019,57,0.019,61,1.759,77,2.96,160,2.96,162,2.215,219,3.365,302,1.25,303,1.639,365,4.242,366,4.351,384,3.365,402,3.365,403,4.351,640,5.702,641,3.979,642,3.979,643,3.979,644,3.979,645,3.979,646,3.979,647,3.979,648,3.979,649,3.979,650,3.979,651,3.979,652,3.979,653,3.979,654,3.979,655,3.979,656,3.979,657,3.979,658,3.979,659,3.979,660,3.979,661,3.365,662,3.979,663,3.979]],["title/miscellaneous/functions.html",[664,1.594,665,3.475]],["body/miscellaneous/functions.html",[9,3.644,10,0.619,15,0.022,25,1.447,26,0.841,27,1.447,31,0.671,56,0.02,57,0.02,585,3.205,632,3.644,634,5.005,636,4.577,661,3.644,664,2.399,665,3.644,666,5.413,667,4.309,668,4.309,669,4.309,670,4.309,671,5.413,672,4.309,673,4.309,674,3.644,675,3.644,676,4.309,677,4.309,678,6.209,679,5.413,680,4.309,681,4.309,682,4.309,683,4.309,684,4.309,685,4.309,686,3.644]],["title/index.html",[10,0.411,580,2.422,581,2.422]],["body/index.html",[4,0.281,7,2.143,15,0.025,22,3.536,56,0.018,57,0.018,585,2.625,612,2.625,674,2.984,675,5.228,686,2.984,687,3.529,688,3.529,689,4.753,690,3.529,691,3.529,692,3.529,693,3.529,694,3.529,695,3.529,696,5.375,697,3.529,698,3.529,699,3.529,700,3.529,701,6.319,702,3.529,703,3.529,704,3.529,705,3.529,706,4.753,707,3.529,708,3.529,709,3.529,710,3.529,711,4.753,712,3.529,713,3.529,714,3.529,715,4.753,716,4.753,717,3.529,718,3.529,719,3.529,720,3.529,721,2.984,722,3.529,723,3.529,724,3.529,725,3.529,726,3.529,727,3.529,728,3.529,729,3.529,730,3.529,731,2.984,732,3.529,733,3.529,734,3.529,735,3.529,736,3.529,737,3.529,738,2.984]],["title/modules.html",[60,1.916]],["body/modules.html",[15,0.021,56,0.021,57,0.021,59,3.003,60,1.851,65,2.73,66,2.73,67,2.308,68,2.503,154,2.73,307,3.003,721,5.579,739,6.597,740,6.597,741,6.687,742,4.495,743,4.495]],["title/overview.html",[744,3.935]],["body/overview.html",[2,1.268,15,0.025,56,0.015,57,0.015,59,4.309,60,1.181,61,1.819,62,2.426,63,2.426,64,2.426,65,4.032,66,2.922,67,3.135,68,3.461,69,2.922,70,2.113,71,1.473,72,1.473,91,1.102,126,2.839,150,2.426,151,2.426,152,2.426,153,2.426,154,3.518,155,2.922,156,2.922,186,3.064,187,3.322,188,2.839,256,2.426,268,2.426,295,1.268,307,3.512,308,2.426,309,2.426,310,2.922,391,2.134,432,2.426,433,2.426,434,2.426,509,2.426,510,2.426,511,2.426,559,2.426,560,2.426,561,2.426,744,2.426,745,2.869,746,2.869,747,2.869]],["title/properties.html",[297,1.692,639,2.422]],["body/properties.html",[7,3.086,15,0.025,56,0.022,57,0.022,297,2.092,589,4.297,592,4.297,731,4.297,738,4.297,748,5.081]],["title/miscellaneous/typealiases.html",[664,1.594,749,4.11]],["body/miscellaneous/typealiases.html",[10,0.695,15,0.022,31,0.754,56,0.022,57,0.022,192,3.532,194,3.885,296,3.236,304,4.327,414,3.236,455,3.236,458,3.885,532,3.236,664,2.697,750,4.845,751,4.097,752,4.097,753,4.097,754,4.097]],["title/miscellaneous/variables.html",[664,1.594,755,3.475]],["body/miscellaneous/variables.html",[10,0.503,15,0.026,31,0.545,41,2.534,53,0.901,56,0.018,57,0.018,84,3.518,166,3.159,173,2.962,178,2.605,226,3.518,227,2.962,228,3.999,229,2.962,296,2.339,305,3.159,306,2.962,414,2.339,420,5.496,429,3.159,430,2.962,455,2.339,459,3.159,460,2.962,532,2.339,540,3.159,541,2.962,620,2.962,629,2.962,630,4.848,631,2.962,664,1.95,751,2.962,752,2.962,753,2.962,754,2.962,755,2.962,756,3.503,757,4.729,758,3.503,759,3.503,760,6.499,761,3.503,762,3.503,763,3.503,764,3.503,765,3.503]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":592,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.1.13",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["06",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":747,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["100",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["12e51eb",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["15m",{"_index":291,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["2.1.0",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":745,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["6.3.8",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["60s",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["7",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["7.2.0",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["76650cd",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":746,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["918d7ca",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["947feeb",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["access",{"_index":485,"title":{},"body":{"controllers/RoleController.html":{}}}],["accesstoken",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["aliases",{"_index":750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":722,"title":{},"body":{"index.html":{}}}],["api",{"_index":678,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apibearerauth",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@post('/logout')@useguards(jwtauthguard",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibearerauth()@useguards(jwtauthguard",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{}}}],["apibody",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibody({type",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiproperty",{"_index":337,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apitags",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags('me",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('roles",{"_index":482,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('users",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":695,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":59,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":69,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["authentication.constants",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["authentication.controller",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/jwt.guard",{"_index":478,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["authenticationcontroller",{"_index":97,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":65,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":126,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":354,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":356,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":379,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["author",{"_index":731,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["available",{"_index":743,"title":{},"body":{"modules.html":{}}}],["await",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["backers",{"_index":723,"title":{},"body":{"index.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["bcrypt",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{}}}],["boolean",{"_index":419,"title":{},"body":{"classes/RefreshToken.html":{}}}],["bootstrap",{"_index":634,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":741,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":739,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["building",{"_index":690,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":394,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["canactivate(context",{"_index":398,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["catch",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["changelog",{"_index":582,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["class",{"_index":47,"title":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":295,"title":{},"body":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":150,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":152,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":151,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":153,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_constantmodule",{"_index":308,"title":{},"body":{"modules/ConstantModule.html":{},"overview.html":{}}}],["cluster_constantmodule_providers",{"_index":309,"title":{},"body":{"modules/ConstantModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule",{"_index":432,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_exports",{"_index":434,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_providers",{"_index":433,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":509,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_exports",{"_index":511,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":510,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":559,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":560,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":562,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":561,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["commit",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["commitlint",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compare(pass",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["components/authentication/authentication.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["components/authentication/authentication.service",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/authentication/jwt.guard",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["components/authentication/local.guard",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/database/database.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["components/role/role.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["components/role/role.service",{"_index":404,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["components/users/user.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["config",{"_index":349,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('database_url",{"_index":351,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":346,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["constant",{"_index":294,"title":{"classes/Constant.html":{}},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"coverage.html":{}}}],["constant.name",{"_index":316,"title":{},"body":{"modules/ConstantModule.html":{}}}],["constant.schema",{"_index":313,"title":{},"body":{"modules/ConstantModule.html":{},"injectables/ConstantService.html":{}}}],["constant.service",{"_index":314,"title":{},"body":{"modules/ConstantModule.html":{}}}],["constantdocument",{"_index":304,"title":{},"body":{"classes/Constant.html":{},"injectables/ConstantService.html":{},"miscellaneous/typealiases.html":{}}}],["constantmodel",{"_index":323,"title":{},"body":{"injectables/ConstantService.html":{}}}],["constantmodule",{"_index":307,"title":{"modules/ConstantModule.html":{}},"body":{"modules/ConstantModule.html":{},"modules.html":{},"overview.html":{}}}],["constants",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["constantschema",{"_index":305,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constantservice",{"_index":310,"title":{"injectables/ConstantService.html":{}},"body":{"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"coverage.html":{},"overview.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(constantmodel",{"_index":320,"title":{},"body":{"injectables/ConstantService.html":{}}}],["constructor(private",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":395,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["constructor(refreshtokenmodel",{"_index":442,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["constructor(rolemodel",{"_index":516,"title":{},"body":{"injectables/RoleService.html":{}}}],["constructor(usermodel",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["context",{"_index":401,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["context.getargbyindex(0",{"_index":409,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["context.gethandler",{"_index":408,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('roles",{"_index":483,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('users",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":612,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":440,"title":{},"body":{"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":495,"title":{},"body":{"controllers/RoleController.html":{}}}],["create(refreshtoken",{"_index":445,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["create(role",{"_index":466,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["create(user",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["createroledto",{"_index":335,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["creates",{"_index":493,"title":{},"body":{"controllers/RoleController.html":{}}}],["createuserdto",{"_index":120,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dashboard",{"_index":673,"title":{},"body":{"miscellaneous/functions.html":{}}}],["databasemodule",{"_index":66,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["date(date.now",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["day",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/permissions.decorator",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":420,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":464,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:id",{"_index":506,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":507,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":468,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletes",{"_index":504,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":61,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":703,"title":{},"body":{"index.html":{}}}],["docs",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["document.sub",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["document.tokenid",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["documentation",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["dto/auth.dto",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/role.dto",{"_index":479,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["dto/user.dto",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e",{"_index":712,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":691,"title":{},"body":{"index.html":{}}}],["email",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["endpoint",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{}}}],["entry",{"_index":668,"title":{},"body":{"miscellaneous/functions.html":{}}}],["env",{"_index":630,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envfile",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["executable",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["executioncontext",{"_index":399,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["exist",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expiresat",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["expiresin",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":158,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":403,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":355,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{}}}],["features",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["filter",{"_index":327,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":325,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["find",{"_index":465,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["find(filter",{"_index":521,"title":{},"body":{"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":318,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findone(filter",{"_index":324,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["fixes",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["framework",{"_index":689,"title":{},"body":{"index.html":{}}}],["function",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":665,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":179,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generateaccesstoken(user",{"_index":191,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken",{"_index":180,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken(refreshtoken",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generation",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["get('profile",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["getprofile",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":580,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["graph",{"_index":742,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":718,"title":{},"body":{"index.html":{}}}],["gt",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["guard",{"_index":391,"title":{"guards/PermissionsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":392,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["guards/permissions.guard",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guidelines",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hash(user.password",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["haspermission",{"_index":411,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["head",{"_index":676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hello",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":728,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":735,"title":{},"body":{"index.html":{}}}],["husky",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":471,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":405,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["import",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":681,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":671,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":352,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":90,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":330,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["injectmodel(constant.name",{"_index":332,"title":{},"body":{"injectables/ConstantService.html":{}}}],["injectmodel(refreshtoken.name",{"_index":451,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["injectmodel(role.name",{"_index":525,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectmodel(user.name",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["insomnia,postman",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["installation",{"_index":700,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":702,"title":{},"body":{"index.html":{}}}],["isglobal",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":725,"title":{},"body":{"index.html":{}}}],["json",{"_index":679,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jwt",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.guard",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["jwt.strategy",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtauthguard",{"_index":39,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":159,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.register",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":189,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":155,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":732,"title":{},"body":{"index.html":{}}}],["license",{"_index":738,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":716,"title":{},"body":{"index.html":{}}}],["literal",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/RefreshTokenService.html":{}}}],["local",{"_index":384,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthguard",{"_index":128,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":156,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["login(@request",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(req",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(user",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logincredentialsdto",{"_index":131,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["logincredentialsdto})@useguards(localauthguard)@post('/login",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["logout(@request",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(payload",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logout(req",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["main",{"_index":667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["make",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":664,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":715,"title":{},"body":{"index.html":{}}}],["mode",{"_index":706,"title":{},"body":{"index.html":{}}}],["model",{"_index":321,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":58,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":60,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":303,"title":{},"body":{"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":312,"title":{},"body":{"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":315,"title":{},"body":{"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":347,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":727,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":733,"title":{},"body":{"index.html":{}}}],["name",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":696,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":737,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":402,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":160,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":302,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":162,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["node.js",{"_index":688,"title":{},"body":{"index.html":{}}}],["notable",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["notfoundexception",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["notfoundexception('role",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["notfoundexception('user",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["npm",{"_index":701,"title":{},"body":{"index.html":{}}}],["nrefreshtoken",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["null",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["number",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser._id",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["object",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":422,"title":{},"body":{"classes/RefreshToken.html":{}}}],["open",{"_index":717,"title":{},"body":{"index.html":{}}}],["optional",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["over",{"_index":677,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":744,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":639,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":476,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":501,"title":{},"body":{"controllers/RoleController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passport",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":161,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["passwordfield",{"_index":386,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.tokenid",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["permission",{"_index":487,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"guards/PermissionsGuard.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissions('profile:read",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["permissions('role:create",{"_index":494,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:delete",{"_index":505,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:read",{"_index":490,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:update",{"_index":499,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('user:delete",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["permissions('user:read",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard",{"_index":43,"title":{"guards/PermissionsGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["permissionsguard)@delete('/:id",{"_index":469,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionsguard)@permissions('profile:read')@get('profile",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["permissionsguard)@permissions('user:delete')@delete('/:id",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard)@permissions('user:read')@get",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard)@put('/:id",{"_index":474,"title":{},"body":{"controllers/RoleController.html":{}}}],["please",{"_index":674,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["point",{"_index":669,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{}}}],["post('/login",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/logout",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/refresh",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/register",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["pre",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["prefix",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":708,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":687,"title":{},"body":{"index.html":{}}}],["project",{"_index":585,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["promise",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":298,"title":{},"body":{"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["prop({type",{"_index":415,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["properties",{"_index":297,"title":{"properties.html":{}},"body":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["purpose",{"_index":489,"title":{},"body":{"controllers/RoleController.html":{}}}],["push",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":477,"title":{},"body":{"controllers/RoleController.html":{}}}],["put('/:id",{"_index":500,"title":{},"body":{"controllers/RoleController.html":{}}}],["read",{"_index":726,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["ref",{"_index":423,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["reflect",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":396,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["refresh",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(@body",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(body",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshaccesstoken",{"_index":181,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshaccesstoken(refreshtoken",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":199,"title":{"classes/RefreshToken.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["refreshtoken._id",{"_index":293,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken.name",{"_index":438,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.schema",{"_index":436,"title":{},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{}}}],["refreshtoken.service",{"_index":437,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.userid",{"_index":292,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendocument",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":115,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenmodel",{"_index":444,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["refreshtokenmodule",{"_index":154,"title":{"modules/RefreshTokenModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["refreshtokens/refreshtoken.module",{"_index":163,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["refreshtokens/refreshtoken.schema",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens/refreshtoken.service",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenschema",{"_index":429,"title":{},"body":{"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenservice",{"_index":187,"title":{"injectables/RefreshTokenService.html":{}},"body":{"injectables/AuthenticationService.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(user",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["repository",{"_index":699,"title":{},"body":{"index.html":{}}}],["req",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["req.user",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/PermissionsGuard.html":{}}}],["request.user.role",{"_index":410,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["required",{"_index":417,"title":{},"body":{"classes/RefreshToken.html":{}}}],["reset",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["rest",{"_index":682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["result",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["results",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returndocument",{"_index":530,"title":{},"body":{"injectables/RoleService.html":{}}}],["returns",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["revoked",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["rimraf",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":260,"title":{"classes/Role.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"coverage.html":{}}}],["role.controller",{"_index":513,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.name",{"_index":514,"title":{},"body":{"modules/RoleModule.html":{},"classes/User.html":{}}}],["role.permissions.includes(routepermission",{"_index":413,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["role.schema",{"_index":480,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["role.service",{"_index":481,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{}}}],["role/role.module",{"_index":164,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/UserModule.html":{}}}],["role/role.schema",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["role/role.service",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["role:create",{"_index":492,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:delete",{"_index":503,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:read",{"_index":484,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:update",{"_index":497,"title":{},"body":{"controllers/RoleController.html":{}}}],["rolecontroller",{"_index":461,"title":{"controllers/RoleController.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["roledocument",{"_index":458,"title":{},"body":{"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"miscellaneous/typealiases.html":{}}}],["rolemodel",{"_index":518,"title":{},"body":{"injectables/RoleService.html":{}}}],["rolemodule",{"_index":67,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["roles",{"_index":463,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleschema",{"_index":459,"title":{},"body":{"classes/Role.html":{},"modules/RoleModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleservice",{"_index":188,"title":{"injectables/RoleService.html":{}},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["routepermissions",{"_index":406,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["routepermissions.every((routepermission",{"_index":412,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["run",{"_index":675,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["rxjs",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":692,"title":{},"body":{"index.html":{}}}],["schema",{"_index":300,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":301,"title":{},"body":{"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(constant",{"_index":306,"title":{},"body":{"classes/Constant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":430,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(role",{"_index":460,"title":{},"body":{"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":541,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":425,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.boolean",{"_index":427,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.date",{"_index":428,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.objectid",{"_index":426,"title":{},"body":{"classes/RefreshToken.html":{}}}],["secret",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secured",{"_index":486,"title":{},"body":{"controllers/RoleController.html":{}}}],["see",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["server",{"_index":693,"title":{},"body":{"index.html":{}}}],["service",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["set",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setmetadata('permissions",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":672,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":670,"title":{},"body":{"miscellaneous/functions.html":{}}}],["side",{"_index":694,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["simple",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["specification",{"_index":680,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sponsors",{"_index":720,"title":{},"body":{"index.html":{}}}],["src/.../authentication.constants.ts",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.service.ts",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.schema.ts",{"_index":751,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":666,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissions.decorator.ts",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refreshtoken.schema.ts",{"_index":752,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.schema.ts",{"_index":753,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":754,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["src/components/authentication/authentication.constants.ts",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.controller.ts",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/components/authentication/authentication.controller.ts:15",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:22",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:27",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:34",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.module.ts",{"_index":157,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/components/authentication/authentication.service.ts",{"_index":178,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.service.ts:107",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:139",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:154",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:164",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:18",{"_index":190,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:26",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:39",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:53",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:78",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/dto/auth.dto.ts",{"_index":388,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/components/authentication/dto/auth.dto.ts:10",{"_index":389,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:12",{"_index":390,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:5",{"_index":431,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/components/authentication/jwt.guard.ts",{"_index":353,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts:17",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/jwt.strategy.ts:8",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/local.guard.ts",{"_index":378,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts",{"_index":380,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts:15",{"_index":383,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/authentication/local.strategy.ts:7",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/constants/constant.module.ts",{"_index":311,"title":{},"body":{"modules/ConstantModule.html":{}}}],["src/components/constants/constant.schema.ts",{"_index":296,"title":{},"body":{"classes/Constant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/constants/constant.schema.ts:9",{"_index":299,"title":{},"body":{"classes/Constant.html":{}}}],["src/components/constants/constant.service.ts",{"_index":317,"title":{},"body":{"injectables/ConstantService.html":{},"coverage.html":{}}}],["src/components/constants/constant.service.ts:13",{"_index":326,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/constants/constant.service.ts:19",{"_index":329,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/constants/constant.service.ts:7",{"_index":322,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/database/database.module.ts",{"_index":345,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/components/refreshtokens/refreshtoken.module.ts",{"_index":435,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts",{"_index":414,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:14",{"_index":424,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:20",{"_index":421,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:26",{"_index":418,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts",{"_index":439,"title":{},"body":{"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:13",{"_index":447,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:19",{"_index":450,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:26",{"_index":446,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:7",{"_index":443,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/role/dto/role.dto.ts",{"_index":336,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/components/role/dto/role.dto.ts:5",{"_index":338,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["src/components/role/dto/role.dto.ts:8",{"_index":339,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["src/components/role/role.controller.ts",{"_index":462,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/components/role/role.controller.ts:33",{"_index":472,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:45",{"_index":467,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:58",{"_index":475,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:74",{"_index":470,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.module.ts",{"_index":512,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/components/role/role.schema.ts",{"_index":455,"title":{},"body":{"classes/Role.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/role/role.schema.ts:12",{"_index":457,"title":{},"body":{"classes/Role.html":{}}}],["src/components/role/role.schema.ts:9",{"_index":456,"title":{},"body":{"classes/Role.html":{}}}],["src/components/role/role.service.ts",{"_index":515,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/components/role/role.service.ts:13",{"_index":522,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:17",{"_index":523,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:23",{"_index":519,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:27",{"_index":524,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:36",{"_index":520,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:8",{"_index":517,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/users/dto/user.dto.ts",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/components/users/dto/user.dto.ts:11",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:14",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:5",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:8",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/user.controller.ts",{"_index":543,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/components/users/user.controller.ts:22",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["src/components/users/user.controller.ts:33",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["src/components/users/user.module.ts",{"_index":563,"title":{},"body":{"modules/UserModule.html":{}}}],["src/components/users/user.schema.ts",{"_index":532,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/user.schema.ts:10",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:13",{"_index":533,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:16",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:19",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.service.ts",{"_index":565,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/components/users/user.service.ts:13",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:17",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:23",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:27",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:8",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["src/constants.ts",{"_index":629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/permissions.decorator.ts",{"_index":631,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guards/permissions.guard.ts",{"_index":393,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["src/guards/permissions.guard.ts:12",{"_index":397,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/guards/permissions.guard.ts:18",{"_index":400,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/main.ts",{"_index":632,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":704,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":707,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":709,"title":{},"body":{"index.html":{}}}],["started",{"_index":581,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starter",{"_index":698,"title":{},"body":{"index.html":{}}}],["statements",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":729,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["such",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":721,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":740,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":661,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"index.html":{}}}],["test:covsupport",{"_index":714,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":713,"title":{},"body":{"index.html":{}}}],["testing",{"_index":488,"title":{},"body":{"controllers/RoleController.html":{}}}],["tests",{"_index":711,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":719,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.logout(req.user",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.refreshaccesstoken(body.refreshtoken",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.register(user",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.validatetokenforuser(payload",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validateuser(email",{"_index":387,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.constantmodel.findone(filter",{"_index":333,"title":{},"body":{"injectables/ConstantService.html":{}}}],["this.constantmodel.updateone",{"_index":334,"title":{},"body":{"injectables/ConstantService.html":{}}}],["this.generateaccesstoken(nuser",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generateaccesstoken(user",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(nrefreshtoken",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(token",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.sign(payload",{"_index":290,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.reflector.get",{"_index":407,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.refreshtokenmodel.create",{"_index":454,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.findone(filter",{"_index":452,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.updateone(filter",{"_index":453,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenservice.create",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.findone",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.updateone",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.rolemodel.create(role",{"_index":528,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.deleteone",{"_index":531,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.find(filter",{"_index":526,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.findone(filter",{"_index":527,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.updateone",{"_index":529,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.roleservice.create(role",{"_index":496,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.delete(id",{"_index":508,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.find",{"_index":491,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.findone",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["this.roleservice.update(id",{"_index":502,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.usermodel.create(user",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.deleteone",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find(filter",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone(filter",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.delete(id",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.find",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["token",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token._id",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token.revoked",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["tokenid",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":730,"title":{},"body":{"index.html":{}}}],["true",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{}}}],["try",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["twitter",{"_index":736,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":749,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["types.objectid",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["types/passport",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":697,"title":{},"body":{"index.html":{}}}],["ui",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":416,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["unit",{"_index":710,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":748,"title":{},"body":{"properties.html":{}}}],["update",{"_index":319,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["update(id",{"_index":473,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["update(update",{"_index":328,"title":{},"body":{"injectables/ConstantService.html":{}}}],["updateone",{"_index":441,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updateone(filter",{"_index":448,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updatequery",{"_index":449,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updates",{"_index":498,"title":{},"body":{"controllers/RoleController.html":{}}}],["updatewriteopresult",{"_index":331,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["uri",{"_index":350,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usefactory",{"_index":348,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["useguards(localauthguard",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":123,"title":{"classes/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/RefreshToken.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user._id",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.controller",{"_index":564,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.name",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.role",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.schema",{"_index":549,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":550,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.toobject",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user:delete",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["user:read",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":542,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["usermodel",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":68,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":385,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["users/dto/user.dto",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["users/user.module",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["users/user.schema",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["users/user.service",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["userschema",{"_index":540,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":186,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":382,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetokenforuser",{"_index":182,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatetokenforuser(document",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser",{"_index":183,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser(email",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["value",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":755,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":589,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["watch",{"_index":705,"title":{},"body":{"index.html":{}}}],["website",{"_index":734,"title":{},"body":{"index.html":{}}}],["world",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":724,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController - base controller for the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('profile:read')@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n                    A simple endpoint to test the auth service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from './components/authentication/jwt.guard';\nimport { Permissions } from './decorators/permissions.decorator';\nimport { PermissionsGuard } from './guards/permissions.guard';\n\n/**\n * AppController - base controller for the application\n */\n@ApiTags('Me')\n@Controller()\nexport class AppController {\n    /**\n     * A simple endpoint to test the auth service.\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('profile:read')\n    @Get('profile')\n    getProfile(@Request() req): { email: string } {\n        return req.user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthenticationModule } from './components/authentication/authentication.module';\nimport { DatabaseModule } from './components/database/database.module';\nimport { RoleModule } from './components/role/role.module';\nimport { UserModule } from './components/users/user.module';\nimport { ENVFILE } from './constants';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            envFilePath: ENVFILE,\n            isGlobal: true,\n        }),\n        DatabaseModule,\n        AuthenticationModule,\n        UserModule,\n        RoleModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: LoginCredentialsDto})@UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post('/logout')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(body: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { AuthenticationService } from '../../components/authentication/authentication.service';\nimport { LocalAuthGuard } from '../../components/authentication/local.guard';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { LoginCredentialsDto, RefreshTokenDto } from './dto/auth.dto';\nimport { JwtAuthGuard } from './jwt.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthenticationController {\n    constructor(private readonly authService: AuthenticationService) {}\n\n    @Post('/register')\n    async register(@Body() user: CreateUserDto) {\n        return this.authService.register(user);\n    }\n\n    @ApiBody({ type: LoginCredentialsDto })\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n\n    @Post('/refresh')\n    public async refresh(@Body() body: RefreshTokenDto) {\n        return this.authService.refreshAccessToken(body.refreshToken);\n    }\n\n    @ApiBearerAuth()\n    @Post('/logout')\n    @UseGuards(JwtAuthGuard)\n    async logout(@Request() req) {\n        return this.authService.logout(req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthenticationModule -->\n\nRoleModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RefreshTokenModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { RefreshTokenModule } from '../refreshTokens/refreshToken.module';\nimport { RoleModule } from '../role/role.module';\nimport { UserModule } from '../users/user.module';\nimport { jwtConstants } from './authentication.constants';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n    imports: [\n        UserModule,\n        RoleModule,\n        RefreshTokenModule,\n        PassportModule,\n        JwtModule.register({\n            secret: jwtConstants.secret,\n            signOptions: { expiresIn: '60s' },\n        }),\n    ],\n    controllers: [AuthenticationController],\n    providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n    exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateAccessToken\n                            \n                            \n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateTokenForUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, refreshTokenService: RefreshTokenService, roleService: RoleService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/authentication.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenService\n                                                  \n                                                        \n                                                                        RefreshTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \ngenerateAccessToken(user: UserDocument, token: RefreshTokenDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                RefreshTokenDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \ngenerateRefreshToken(refreshToken: any, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAccessToken(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateTokenForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateTokenForUser(document: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    document\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare, hash } from 'bcrypt';\nimport { RefreshTokenDocument } from '../refreshTokens/refreshToken.schema';\nimport { RefreshTokenService } from '../refreshTokens/refreshToken.service';\nimport { RoleService } from '../role/role.service';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { UserDocument } from '../users/user.schema';\nimport { UserService } from '../users/user.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(\n        private userService: UserService,\n        private refreshTokenService: RefreshTokenService,\n        private roleService: RoleService,\n        private jwtService: JwtService,\n    ) {}\n\n    async validateTokenForUser(document: any) {\n        const token = await this.refreshTokenService.findOne({\n            _id: document.tokenId,\n            userId: document.sub,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException();\n        }\n    }\n\n    async validateUser(email: string, pass: string): Promise {\n        const user = await this.userService.findOne({ email });\n        if (user == null) {\n            throw new NotFoundException('User does not exist!');\n        }\n\n        if (await compare(pass, user.password)) {\n            const { password, ...result } = user.toObject();\n            return result;\n        }\n\n        return null;\n    }\n\n    async login(user: UserDocument) {\n        let token = await this.refreshTokenService.findOne({\n            userId: user._id,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            token = await this.refreshTokenService.create(\n                {\n                    userId: user._id,\n                },\n                new Date(Date.now() + 7 * DAY),\n            );\n        }\n\n        const accessToken = this.generateAccessToken(user, token);\n        const refreshToken = this.generateRefreshToken(token, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async register(user: CreateUserDto) {\n        const role = await this.roleService.findOne({ _id: user.role });\n        if (role == null) {\n            throw new NotFoundException('Role does not exist!');\n        }\n\n        const nUser = await this.userService.create({\n            email: user.email,\n            password: await hash(user.password, 10),\n            name: user.name,\n            role: user.role,\n        });\n\n        const nRefreshToken = await this.refreshTokenService.create(\n            {\n                userId: nUser._id,\n            },\n            new Date(Date.now() + 7 * DAY),\n        );\n\n        const accessToken = this.generateAccessToken(nUser, nRefreshToken);\n        const refreshToken = this.generateRefreshToken(nRefreshToken, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async refreshAccessToken(refreshToken: string) {\n        let payload: any;\n        try {\n            payload = await this.jwtService.verifyAsync(refreshToken);\n        } catch (error) {\n            throw new UnauthorizedException(error.message);\n        }\n        const token = await this.refreshTokenService.findOne({\n            _id: payload.tokenId,\n            userId: payload.userId,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException('Refresh token not found');\n        }\n\n        if (token.revoked === true) {\n            throw new UnauthorizedException('Refresh token revoked');\n        }\n\n        const user = await this.userService.findOne({ _id: payload.userId });\n\n        if (user == null) {\n            throw new UnauthorizedException('User not found');\n        }\n\n        const accessToken = await this.generateAccessToken(user, token);\n        return { accessToken };\n    }\n\n    async logout(payload: any) {\n        const result = await this.refreshTokenService.updateOne(\n            {\n                _id: payload.tokenId,\n                userId: payload.userId,\n                revoked: false,\n            },\n            {\n                $set: {\n                    revoked: true,\n                },\n            },\n        );\n    }\n\n    generateAccessToken(user: UserDocument, token: RefreshTokenDocument) {\n        const payload = {\n            email: user.email,\n            sub: user._id,\n            tokenId: token._id,\n            role: user.role,\n        };\n        return this.jwtService.sign(payload, { expiresIn: '15m' });\n    }\n\n    generateRefreshToken(refreshToken: any, expiresIn: number) {\n        const payload = {\n            userId: refreshToken.userId,\n            tokenId: refreshToken._id,\n        };\n        return this.jwtService.sign(payload, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Constant.html":{"url":"classes/Constant.html","title":"class - Constant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Constant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/constants/constant.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/constants/constant.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type ConstantDocument = Constant & Document;\n\n@Schema()\nexport class Constant {\n    @Prop()\n    permissions: string[];\n}\n\nexport const ConstantSchema = SchemaFactory.createForClass(Constant);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConstantModule.html":{"url":"modules/ConstantModule.html","title":"module - ConstantModule","body":"\n                   \n\n\n\n\n    Modules\n    ConstantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConstantModule\n\n\n\ncluster_ConstantModule_providers\n\n\n\n\nConstantService\n\nConstantService\n\n\n\nConstantModule\n\nConstantModule\n\nConstantModule -->\n\nConstantService->ConstantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/constants/constant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConstantService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Constant, ConstantSchema } from './constant.schema';\nimport { ConstantService } from './constant.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: Constant.name, schema: ConstantSchema },\n        ]),\n    ],\n    providers: [ConstantService],\n})\nexport class ConstantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConstantService.html":{"url":"injectables/ConstantService.html","title":"injectable - ConstantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConstantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/constants/constant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/constants/constant.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/constants/constant.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(update: ConstantDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/constants/constant.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                ConstantDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateWriteOpResult } from 'mongoose';\nimport { Constant, ConstantDocument } from './constant.schema';\n\n@Injectable()\nexport class ConstantService {\n    constructor(\n        @InjectModel(Constant.name)\n        private constantModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.constantModel.findOne(filter);\n    }\n\n    async update(update: ConstantDocument): Promise {\n        return this.constantModel.updateOne({}, update);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/dto/role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/dto/role.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/dto/role.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly permissions: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly email: string;\n\n    @ApiProperty()\n    readonly password: string;\n\n    @ApiProperty()\n    readonly role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n    imports: [\n        MongooseModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: async (config: ConfigService) => ({\n                uri: config.get('DATABASE_URL'),\n            }),\n            inject: [ConfigService],\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './authentication.constants';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthenticationService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n    }\n\n    async validate(payload: any) {\n        await this.authService.validateTokenForUser(payload);\n        return {\n            userId: payload.sub,\n            email: payload.email,\n            tokenId: payload.tokenId,\n            role: payload.role,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthenticationService) {\n        super({\n            usernameField: 'email',\n            passwordField: 'password',\n        });\n    }\n\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionsGuard.html":{"url":"guards/PermissionsGuard.html","title":"guard - PermissionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, roleService: RoleService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/permissions.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/permissions.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { RoleService } from '../components/role/role.service';\n\n@Injectable()\nexport class PermissionsGuard implements CanActivate {\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly roleService: RoleService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const routePermissions = this.reflector.get(\n            'permissions',\n            context.getHandler(),\n        );\n\n        if (!routePermissions) {\n            return true;\n        }\n\n        const request: Request = context.getArgByIndex(0);\n\n        const role = await this.roleService.findOne({ _id: request.user.role });\n        if (role == null) {\n            throw new NotFoundException('Role not found');\n        }\n\n        const hasPermission = routePermissions.every((routePermission) =>\n            role.permissions.includes(routePermission),\n        );\n\n        return hasPermission;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                revoked\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, ObjectId, SchemaTypes } from 'mongoose';\nimport { User } from '../users/user.schema';\n\nexport type RefreshTokenDocument = RefreshToken & Document;\n\n@Schema()\nexport class RefreshToken {\n    @Prop({\n        type: SchemaTypes.ObjectId,\n        ref: User.name,\n        required: true,\n    })\n    userId: ObjectId;\n\n    @Prop({\n        type: SchemaTypes.Boolean,\n        default: false,\n    })\n    revoked: boolean;\n\n    @Prop({\n        type: SchemaTypes.Date,\n        required: true,\n    })\n    expiresAt: Date;\n}\n\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RefreshTokenModule.html":{"url":"modules/RefreshTokenModule.html","title":"module - RefreshTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    RefreshTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refreshToken.schema';\nimport { RefreshTokenService } from './refreshToken.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: RefreshToken.name, schema: RefreshTokenSchema },\n        ]),\n    ],\n    providers: [RefreshTokenService],\n    exports: [RefreshTokenService],\n})\nexport class RefreshTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(refreshTokenModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/refreshTokens/refreshToken.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        refreshTokenModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(refreshToken: literal type, expiresAt: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresAt\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filter: FilterQuery, update: UpdateQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateQuery, UpdateWriteOpResult } from 'mongoose';\nimport { RefreshToken, RefreshTokenDocument } from './refreshToken.schema';\n\n@Injectable()\nexport class RefreshTokenService {\n    constructor(\n        @InjectModel(RefreshToken.name)\n        private refreshTokenModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.refreshTokenModel.findOne(filter);\n    }\n\n    async updateOne(\n        filter: FilterQuery,\n        update: UpdateQuery,\n    ): Promise {\n        return this.refreshTokenModel.updateOne(filter, update);\n    }\n\n    async create(\n        refreshToken: { userId: string },\n        expiresAt: Date,\n    ): Promise {\n        return this.refreshTokenModel.create({ ...refreshToken, expiresAt });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/role.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/role.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type RoleDocument = Role & Document;\n\n@Schema()\nexport class Role {\n    @Prop()\n    name: string;\n\n    @Prop()\n    permissions: string[];\n}\n\nexport const RoleSchema = SchemaFactory.createForClass(Role);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(role: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, role: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Put('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { UpdateWriteOpResult } from 'mongoose';\nimport { Permissions } from '../../decorators/permissions.decorator';\nimport { PermissionsGuard } from '../../guards/permissions.guard';\nimport { JwtAuthGuard } from '../authentication/jwt.guard';\nimport { CreateRoleDto } from './dto/role.dto';\nimport { RoleDocument } from './role.schema';\nimport { RoleService } from './role.service';\n\n@ApiTags('Roles')\n@Controller('roles')\nexport class RoleController {\n    constructor(private readonly roleService: RoleService) {}\n\n    /**\n     * @permissions `role:read`\n     * @description Returns all roles with their permissions\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    // @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:read')\n    @Get()\n    async find(): Promise {\n        return this.roleService.find({});\n    }\n\n    /**\n     * @permissions `role:create`\n     * @description Creates new role with permissions\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    // @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:create')\n    @Post()\n    async create(@Body() role: CreateRoleDto): Promise {\n        return this.roleService.create(role);\n    }\n\n    /**\n     * @permissions `role:update`\n     * @description Updates role with permission\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:update')\n    @Put('/:id')\n    async update(\n        @Param('id') id: string,\n        @Body() role: CreateRoleDto,\n    ): Promise {\n        return this.roleService.update(id, role);\n    }\n\n    /**\n     * @permissions `role:delete`\n     * @description Deletes role\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:delete')\n    @Delete('/:id')\n    async delete(@Param('id') id: string): Promise {\n        return this.roleService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_RoleModule_exports\n\n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RoleController } from './role.controller';\nimport { Role, RoleSchema } from './role.schema';\nimport { RoleService } from './role.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: Role.name, schema: RoleSchema }]),\n    ],\n    controllers: [RoleController],\n    providers: [RoleService],\n    exports: [RoleService],\n})\nexport class RoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/role/role.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(role: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, role: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateWriteOpResult } from 'mongoose';\nimport { CreateRoleDto } from './dto/role.dto';\nimport { Role, RoleDocument } from './role.schema';\n\n@Injectable()\nexport class RoleService {\n    constructor(\n        @InjectModel(Role.name) private roleModel: Model,\n    ) {}\n\n    async find(filter: FilterQuery): Promise {\n        return this.roleModel.find(filter);\n    }\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.roleModel.findOne(filter);\n    }\n\n    async create(role: CreateRoleDto): Promise {\n        return this.roleModel.create(role);\n    }\n\n    async update(\n        id: string,\n        role: CreateRoleDto,\n    ): Promise {\n        return this.roleModel.updateOne({ _id: id }, role, {\n            returnDocument: 'after',\n        });\n    }\n\n    async delete(id: string): Promise {\n        return this.roleModel.deleteOne({ _id: id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Role } from '../role/role.schema';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n    @Prop()\n    name: string;\n\n    @Prop()\n    email: string;\n\n    @Prop()\n    password: string;\n\n    @Prop({ type: Types.ObjectId, ref: Role.name })\n    role: Types.ObjectId;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('user:delete')@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('user:read')@Get()\n                \n            \n\n            \n                \n                    Defined in src/components/users/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { Permissions } from '../../decorators/permissions.decorator';\nimport { PermissionsGuard } from '../../guards/permissions.guard';\nimport { JwtAuthGuard } from '../authentication/jwt.guard';\nimport { UserDocument } from './user.schema';\nimport { UserService } from './user.service';\n\n@ApiTags('Users')\n@ApiBearerAuth()\n@Controller('users')\nexport class UserController {\n    constructor(private readonly userService: UserService) {}\n\n    /**\n     * @permissions `user:read`\n     * @description Returns all users with their permissions\n     */\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('user:read')\n    @Get()\n    async find(): Promise {\n        return this.userService.find({});\n    }\n\n    /**\n     * @permissions `user:delete`\n     * @description Deletes user\n     */\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('user:delete')\n    @Delete('/:id')\n    async delete(@Param('id') id: string): Promise {\n        return this.userService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nRoleModule\n\nRoleModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoleModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoleModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RoleModule } from '../role/role.module';\nimport { UserController } from './user.controller';\nimport { User, UserSchema } from './user.schema';\nimport { UserService } from './user.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n        RoleModule,\n    ],\n    controllers: [UserController],\n    providers: [UserService],\n    exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { CreateUserDto } from './dto/user.dto';\nimport { User, UserDocument } from './user.schema';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectModel(User.name) private userModel: Model,\n    ) {}\n\n    async find(filter: FilterQuery): Promise {\n        return this.userModel.find(filter);\n    }\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.userModel.findOne(filter);\n    }\n\n    async create(user: CreateUserDto): Promise {\n        return this.userModel.create(user);\n    }\n\n    async delete(id: string): Promise {\n        return this.userModel.deleteOne({ _id: id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.0.2 (2022-06-15)\nFeatures\n\nbase authentication (76650cd)\nlogin, logout, commitlint and husky (947feeb)\ntest docs generation (12e51eb)\n\nBug Fixes\n\nmake husky pre-push file an executable (918d7ca)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            variable\n            DAY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/constants/constant.schema.ts\n            \n            class\n            Constant\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/constants/constant.schema.ts\n            \n            variable\n            ConstantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/constants/constant.service.ts\n            \n            injectable\n            ConstantService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/role/dto/role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/role/role.schema.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/role/role.schema.ts\n            \n            variable\n            RoleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/users/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENVFILE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/permissions.decorator.ts\n            \n            variable\n            Permissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/permissions.guard.ts\n            \n            guard\n            PermissionsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwagger\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            mongoose : ^6.3.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            setupSwagger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main entry point for the application.\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Setup swagger dashboard, please run the project and head over to /api,\nThere is also a json api specification /api-json that can be imported in rest-api apps such as (insomnia,postman).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConstantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RefreshTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_ConstantModule\n\n\n\ncluster_ConstantModule_providers\n\n\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthenticationModule -->\n\nRoleModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoleModule->UserModule\n\n\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nConstantService\n\nConstantService\n\n\n\nConstantModule\n\nConstantModule\n\nConstantModule -->\n\nConstantService->ConstantModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.2\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConstantDocument   (src/.../constant.schema.ts)\n                        \n                        \n                            RefreshTokenDocument   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            RoleDocument   (src/.../role.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/constants/constant.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ConstantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/refreshTokens/refreshToken.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/role/role.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RoleDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConstantSchema   (src/.../constant.schema.ts)\n                        \n                        \n                            DAY   (src/.../authentication.service.ts)\n                        \n                        \n                            ENV   (src/.../constants.ts)\n                        \n                        \n                            ENVFILE   (src/.../constants.ts)\n                        \n                        \n                            jwtConstants   (src/.../authentication.constants.ts)\n                        \n                        \n                            Permissions   (src/.../permissions.decorator.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            RoleSchema   (src/.../role.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/constants/constant.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ConstantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Constant)\n                    \n                \n\n\n        \n    \n\n    src/components/authentication/authentication.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DAY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 24 * 60 * 60 * 1000\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENVFILE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ENV ? `.env.${ENV}` : '.env'\n                    \n                \n\n\n        \n    \n\n    src/components/authentication/authentication.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: string[]) =>\n    SetMetadata('permissions', permissions)\n                    \n                \n\n\n        \n    \n\n    src/components/refreshTokens/refreshToken.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/components/role/role.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Role)\n                    \n                \n\n\n        \n    \n\n    src/components/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
