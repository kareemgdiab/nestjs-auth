var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.542,1,2.318]],["body/controllers/AppController.html",[0,2.217,1,3.332,2,1.128,3,0.243,4,0.243,5,0.172,6,2.141,7,1.542,8,2.804,9,2.804,10,0.379,11,1.281,12,4.97,13,4.97,14,3.76,15,4.714,16,1.808,17,0.025,18,3.801,19,2.528,20,0.931,21,2.528,22,4.97,23,4.97,24,4.882,25,1.932,26,1.693,27,3.76,28,2.141,29,2.528,30,2.528,31,0.902,32,1.104,33,2.528,34,2.528,35,2.528,36,3.183,37,3.707,38,2.804,39,2.52,40,0.861,41,0.861,42,3.183,43,3.76,44,2.528,45,2.804,46,0.535,47,1.885,48,1.885,49,1.695,50,0.441,51,3.332,52,1.695,53,1.128,54,2.513,55,2.141,56,1.307,57,2.528,58,1.885,59,2.783,60,1.885,61,2.528,62,0.243,63,0.047,64,1.542,65,1.052,66,3.009,67,2.528,68,2.528,69,2.528,70,1.693,71,2.528,72,2.528,73,2.528,74,2.528,75,2.528,76,2.528,77,1.542,78,2.528,79,0.014,80,0.014]],["title/modules/AppModule.html",[81,1.104,82,2.318]],["body/modules/AppModule.html",[1,3.469,2,2.013,3,0.313,4,0.313,5,0.221,17,0.025,46,0.618,50,0.568,54,3.397,55,2.759,62,0.313,63,0.06,77,1.988,79,0.016,80,0.016,81,1.44,82,4.511,83,1.356,84,2.013,85,2.759,86,2.759,87,2.759,88,3.702,89,3.702,90,3.137,91,3.397,92,2.333,93,1.685,94,1.454,95,3.259,96,2.526,97,2.333,98,2.43,99,1.988,100,3.259,101,3.259,102,3.259,103,3.259,104,3.259,105,3.365,106,2.43,107,3.259,108,3.259,109,3.259]],["title/injectables/AppService.html",[54,1.936,110,0.648]],["body/injectables/AppService.html",[3,0.376,4,0.376,5,0.266,7,2.392,8,3.81,9,3.81,10,0.587,11,1.74,15,5.598,17,0.025,20,0.734,26,1.74,32,1.398,36,4.326,37,3.81,39,3.425,45,4.49,46,0.376,50,0.683,54,3.372,62,0.376,63,0.072,70,1.335,79,0.018,80,0.018,110,0.957,111,1.524,112,3.32,113,3.921,114,4.326,115,4.326,116,5.109,117,5.109,118,3.921]],["title/controllers/AuthenticationController.html",[0,1.542,119,2.318]],["body/controllers/AuthenticationController.html",[0,1.204,2,1.204,3,0.259,4,0.259,5,0.183,10,0.404,11,1.344,16,1.866,17,0.025,20,0.961,26,1.747,31,1.031,38,2.012,40,1.747,41,1.747,42,4.343,46,0.565,47,2.012,48,2.012,49,1.809,50,0.47,51,2.644,52,1.809,53,1.204,56,1.395,62,0.259,63,0.05,64,1.646,65,1.123,66,1.809,70,1.747,79,0.014,80,0.014,119,2.644,120,2.285,121,2.012,122,2.184,123,2.942,124,2.942,125,4.662,126,3.945,127,3.34,128,2.698,129,2.698,130,2.698,131,2.698,132,3.825,133,2.698,134,2.698,135,2.698,136,2.698,137,3.129,138,3.945,139,2.698,140,0.812,141,3.948,142,2.285,143,2.872,144,3.945,145,2.698,146,1.641,147,3.945,148,1.891,149,2.698,150,1.809,151,2.698,152,2.285,153,2.406,154,2.698,155,2.698,156,2.698,157,2.698,158,2.012,159,2.698,160,2.698,161,2.698,162,2.698,163,2.698,164,2.698,165,2.698,166,2.698,167,2.698,168,2.698,169,2.698]],["title/modules/AuthenticationModule.html",[81,1.104,88,2.11]],["body/modules/AuthenticationModule.html",[2,1.809,3,0.269,4,0.269,5,0.19,17,0.025,46,0.62,50,0.489,62,0.269,63,0.052,79,0.015,80,0.015,81,1.295,83,1.166,84,1.809,88,4.084,90,2.986,91,3.234,92,2.097,93,1.45,94,1.251,96,2.271,97,2.464,98,3.025,99,1.71,106,2.091,119,3.194,122,0.955,148,3.098,170,2.374,171,2.374,172,2.374,173,2.374,174,3.524,175,3.524,176,3.524,177,2.804,178,2.719,179,3.554,180,2.804,181,2.091,182,4.056,183,1.57,184,1.879,185,2.804,186,2.374,187,2.804,188,2.804,189,2.091,190,2.804,191,2.804,192,2.804,193,2.374,194,2.091,195,2.374,196,2.374,197,2.804,198,2.374,199,2.804,200,2.374]],["title/injectables/AuthenticationService.html",[110,0.648,148,1.658]],["body/injectables/AuthenticationService.html",[3,0.122,4,0.122,5,0.086,10,0.19,11,0.738,17,0.026,20,0.897,26,1.564,31,0.997,32,1.179,40,1.632,41,1.632,46,0.46,50,0.221,62,0.122,63,0.023,70,1.485,77,1.321,79,0.008,80,0.008,110,0.406,111,0.494,122,1.974,123,1.615,124,1.615,127,1.834,132,2.111,140,0.835,142,1.834,143,1.872,146,1.814,148,1.038,152,1.076,181,0.947,198,3.177,201,0.947,202,2.166,203,2.166,204,2.166,205,2.166,206,2.166,207,1.038,208,1.27,209,2.111,210,2.441,211,2.09,212,4.36,213,1.27,214,2.166,215,2.66,216,5.468,217,2.241,218,1.27,219,2.166,220,2.83,221,1.27,222,1.958,223,2.166,224,1.27,225,2.166,226,1.27,227,3.177,228,2.166,229,1.27,230,1.27,231,2.166,232,1.27,233,0.775,234,2.166,235,2.83,236,1.27,237,1.729,238,0.966,239,1.076,240,1.834,241,1.27,242,1.27,243,1.076,244,1.27,245,1.27,246,1.27,247,1.076,248,1.27,249,2.96,250,2.798,251,1.076,252,1.834,253,1.076,254,1.729,255,3.665,256,2.83,257,2.515,258,1.27,259,2.922,260,1.27,261,2.111,262,2.83,263,3.2,264,2.111,265,3.458,266,2.493,267,3.692,268,3.251,269,2.166,270,1.27,271,2.166,272,1.27,273,1.27,274,1.213,275,2.83,276,1.27,277,2.83,278,2.166,279,2.166,280,2.831,281,4.084,282,2.166,283,1.27,284,1.3,285,1.076,286,2.83,287,1.076,288,1.27,289,1.27,290,2.166,291,1.27,292,1.076,293,0.947,294,2.166,295,1.27,296,1.27,297,1.27,298,1.27,299,1.27,300,1.27,301,1.27,302,1.27,303,1.834,304,2.83,305,2.166,306,1.834,307,1.27,308,1.27,309,1.27,310,1.27,311,1.27,312,1.834,313,1.27,314,2.166,315,1.27,316,1.27,317,1.27]],["title/classes/Constant.html",[63,0.064,318,2.11]],["body/classes/Constant.html",[3,0.408,4,0.408,5,0.289,10,0.637,16,1.547,17,0.025,20,0.797,25,2.148,32,1.325,46,0.517,62,0.567,63,0.078,79,0.019,80,0.019,140,0.938,233,3.284,249,2.199,318,3.603,319,1.897,320,2.851,321,2.24,322,3.959,323,4.253,324,2.581,325,2.851,326,1.357,327,1.769,328,3.172,329,2.851,330,3.601]],["title/modules/ConstantModule.html",[81,1.104,331,2.318]],["body/modules/ConstantModule.html",[3,0.389,4,0.389,5,0.275,17,0.025,31,0.813,46,0.585,50,0.705,62,0.389,63,0.075,79,0.019,80,0.019,81,1.665,83,1.684,84,2.326,92,2.696,93,2.092,94,1.805,96,2.92,97,2.092,318,2.469,324,1.94,326,1.292,329,3.496,331,4.329,332,3.427,333,3.427,334,3.94,335,4.047,336,2.469,337,3.427,338,4.047,339,2.713,340,4.047]],["title/injectables/ConstantService.html",[110,0.648,334,2.11]],["body/injectables/ConstantService.html",[3,0.326,4,0.326,5,0.23,10,0.508,11,1.579,17,0.025,20,0.99,26,1.579,31,1.062,40,1.8,41,1.8,46,0.545,50,0.591,62,0.326,63,0.062,70,1.579,79,0.017,80,0.017,110,0.869,111,1.318,122,2.092,140,0.921,207,2.223,238,2.534,254,1.753,318,2.069,326,1.082,327,1.411,328,4.236,334,2.829,337,2.871,341,2.871,342,3.542,343,3.466,344,3.391,345,3.808,346,3.391,347,4.637,348,2.273,349,3.808,350,3.391,351,3.108,352,4.637,353,3.391,354,2.273,355,2.273,356,3.391,357,3.391,358,3.391]],["title/classes/CreateRoleDto.html",[63,0.064,359,2.11]],["body/classes/CreateRoleDto.html",[3,0.41,4,0.41,5,0.29,10,0.64,16,1.963,17,0.025,20,1.011,25,2.152,31,1.189,32,1.53,46,0.41,53,1.905,62,0.41,63,0.079,65,2.725,79,0.019,80,0.019,140,0.941,319,1.905,321,2.246,359,3.293,360,3.616,361,4.298,362,4.271,363,4.271]],["title/classes/CreateUserDto.html",[63,0.064,143,1.936]],["body/classes/CreateUserDto.html",[3,0.361,4,0.361,5,0.255,10,0.563,16,2.155,17,0.025,20,1.11,31,1.119,32,1.612,46,0.361,53,1.677,62,0.361,63,0.069,65,2.826,79,0.018,80,0.018,140,1.032,143,2.783,237,2.879,274,3.118,284,2.164,319,1.677,321,2.068,361,4.445,364,3.183,365,3.759,366,3.759,367,3.759,368,3.759]],["title/modules/DatabaseModule.html",[81,1.104,89,2.11]],["body/modules/DatabaseModule.html",[3,0.419,4,0.419,5,0.296,17,0.025,46,0.574,50,0.76,62,0.419,63,0.08,79,0.02,80,0.02,81,1.746,83,1.816,89,3.338,97,2.829,98,4.08,99,2.662,122,1.486,179,4.457,193,3.695,194,3.254,200,3.695,326,1.393,336,2.662,369,4.364,370,4.364,371,4.364,372,4.364]],["title/injectables/JwtAuthGuard.html",[56,1.788,110,0.648]],["body/injectables/JwtAuthGuard.html",[3,0.466,4,0.466,5,0.329,17,0.025,46,0.56,50,0.845,56,3.018,62,0.466,63,0.089,79,0.021,80,0.021,110,1.093,111,1.885,183,2.715,373,4.106,374,4.106,375,3.25,376,4.849]],["title/injectables/JwtStrategy.html",[110,0.648,175,2.11]],["body/injectables/JwtStrategy.html",[3,0.32,4,0.32,5,0.226,10,0.499,11,1.561,17,0.025,20,0.859,26,1.136,31,0.921,40,1.561,41,1.561,46,0.587,50,0.581,62,0.32,63,0.061,65,1.387,70,1.136,79,0.016,80,0.016,99,2.034,106,2.487,110,0.859,111,1.296,122,1.784,132,2.487,140,0.799,148,2.704,158,3.418,175,2.797,179,4.207,183,1.867,184,2.235,189,2.487,194,3.906,196,2.823,207,2.198,227,2.823,237,1.724,254,2.37,255,2.235,259,2.235,266,2.487,284,1.296,303,2.823,312,2.823,375,2.235,377,2.823,378,3.881,379,2.823,380,3.335,381,4.584,382,3.335,383,3.335,384,2.823,385,2.235,386,2.235,387,2.823,388,2.823,389,2.823,390,3.335,391,3.335,392,3.335,393,3.335,394,3.335,395,3.335,396,3.335,397,3.335]],["title/injectables/LocalAuthGuard.html",[110,0.648,150,2.318]],["body/injectables/LocalAuthGuard.html",[3,0.466,4,0.466,5,0.329,17,0.025,46,0.56,50,0.845,62,0.466,63,0.089,79,0.021,80,0.021,110,1.093,111,1.885,150,3.913,183,2.715,374,4.106,375,3.25,398,4.106,399,4.849]],["title/injectables/LocalStrategy.html",[110,0.648,176,2.11]],["body/injectables/LocalStrategy.html",[3,0.332,4,0.332,5,0.235,10,0.518,11,1.602,17,0.025,20,0.881,26,1.179,31,0.945,32,1.52,40,1.602,41,1.602,46,0.55,50,0.603,62,0.332,63,0.064,64,2.112,70,1.179,79,0.017,80,0.017,110,0.881,111,1.345,122,1.819,140,0.819,146,2.222,148,2.747,158,3.507,176,2.869,183,1.938,189,2.581,207,1.659,237,2.431,238,2.097,240,3.981,249,1.789,255,2.32,263,2.112,268,2.581,274,3.355,375,2.32,378,3.981,379,2.931,384,2.931,385,2.32,387,2.931,388,2.931,389,2.931,400,2.931,401,3.461,402,4.702,403,3.461,404,2.931,405,3.461,406,3.461,407,3.461]],["title/classes/LoginCredentialsDto.html",[63,0.064,153,2.11]],["body/classes/LoginCredentialsDto.html",[3,0.395,4,0.395,5,0.279,10,0.616,16,1.917,17,0.025,20,0.987,32,1.56,46,0.395,53,1.835,62,0.506,63,0.097,65,2.743,79,0.019,80,0.019,137,2.51,140,0.918,153,3.215,222,1.972,237,3.006,274,3.256,319,1.835,321,2.193,361,4.347,408,3.068,409,4.114,410,4.114]],["title/guards/PermissionsGuard.html",[59,1.936,411,2.579]],["body/guards/PermissionsGuard.html",[3,0.303,4,0.303,5,0.214,10,0.473,11,1.503,17,0.025,20,0.827,25,1.148,26,1.075,31,0.887,40,1.503,41,1.503,46,0.529,48,3.794,50,0.55,59,2.471,62,0.303,63,0.058,65,1.836,70,1.503,77,1.926,79,0.016,80,0.016,110,0.827,122,1.733,140,0.769,207,2.116,211,2.956,238,1.968,239,2.672,249,2.848,254,2.281,255,2.116,257,2.116,263,1.926,267,2.672,268,2.354,284,1.715,285,2.672,287,2.672,306,2.672,412,3.156,413,2.672,414,5.509,415,3.156,416,6.007,417,3.156,418,4.413,419,5.509,420,3.156,421,3.156,422,2.672,423,2.354,424,3.156,425,3.156,426,4.413,427,3.156,428,3.156,429,3.156,430,3.156,431,4.413,432,3.156,433,3.156]],["title/classes/RefreshToken.html",[63,0.064,222,1.658]],["body/classes/RefreshToken.html",[3,0.324,4,0.324,5,0.229,10,0.506,16,1.919,17,0.025,20,0.988,28,3.917,46,0.506,62,0.506,63,0.062,77,3.461,79,0.017,80,0.017,140,1.095,146,1.406,217,2.265,222,2.529,233,2.822,247,2.861,249,1.747,259,3.536,261,3.934,264,3.45,265,4.466,266,3.45,293,2.52,319,1.507,321,1.925,322,3.802,324,2.218,325,2.265,326,1.079,327,1.406,434,2.265,435,4.466,436,4.803,437,5.673,438,3.38,439,3.45,440,3.38,441,5.275,442,3.917,443,3.38,444,3.38,445,3.38,446,3.38,447,3.38,448,2.265,449,2.861]],["title/classes/RefreshTokenDto.html",[63,0.064,137,2.11]],["body/classes/RefreshTokenDto.html",[3,0.415,4,0.415,5,0.294,10,0.648,16,1.574,17,0.025,20,0.81,32,1.537,46,0.415,53,1.93,62,0.522,63,0.1,65,2.678,79,0.02,80,0.02,137,3.32,140,0.754,153,2.64,222,2.854,237,2.237,274,2.423,319,1.93,321,2.264,361,4.315,408,3.226,450,4.326]],["title/modules/RefreshTokenModule.html",[81,1.104,174,2.11]],["body/modules/RefreshTokenModule.html",[3,0.372,4,0.372,5,0.263,17,0.025,31,0.779,46,0.576,50,0.675,62,0.372,63,0.071,79,0.018,80,0.018,81,1.618,83,1.612,84,2.262,92,2.621,93,2.004,94,1.729,96,2.839,97,2.004,174,3.967,178,3.399,210,3.821,222,1.858,324,1.858,326,1.237,336,2.364,339,2.598,448,3.399,451,3.281,452,3.281,453,3.281,454,3.875,455,3.281,456,3.875,457,3.875]],["title/injectables/RefreshTokenService.html",[110,0.648,210,1.936]],["body/injectables/RefreshTokenService.html",[3,0.278,4,0.278,5,0.196,10,0.433,11,1.413,17,0.025,20,0.992,26,1.652,31,1.065,32,0.712,40,1.805,41,1.805,46,0.509,50,0.504,62,0.278,63,0.053,70,1.652,79,0.015,80,0.015,110,0.777,111,1.124,122,2.133,140,1.017,207,1.989,210,2.323,217,1.939,222,2.54,238,2.604,254,1.495,259,1.939,261,3.951,264,3.617,326,0.923,327,1.203,342,3.251,343,3.232,345,3.552,348,1.939,349,4.03,351,3.552,354,1.939,355,1.939,455,2.449,458,2.449,459,3.251,460,4.85,461,2.893,462,2.893,463,4.148,464,2.893,465,4.148,466,2.893,467,2.893,468,2.893,469,5.298,470,2.893,471,2.893,472,2.893,473,2.893,474,2.893]],["title/classes/Role.html",[63,0.064,284,1.344]],["body/classes/Role.html",[3,0.387,4,0.387,5,0.274,10,0.604,16,1.892,17,0.025,20,0.974,25,2.095,31,1.157,32,1.497,46,0.499,62,0.553,63,0.074,79,0.019,80,0.019,140,1.004,233,3.174,249,2.084,284,2.239,319,1.798,321,2.164,322,4.223,324,2.494,325,2.702,326,1.287,327,1.677,475,2.702,476,4.031,477,4.031,478,2.702,479,2.702,480,3.413]],["title/controllers/RoleController.html",[0,1.542,481,2.318]],["body/controllers/RoleController.html",[0,0.951,2,0.951,3,0.205,4,0.205,5,0.145,7,2.778,10,0.319,11,1.125,16,1.656,17,0.025,18,2.796,20,0.853,25,1.977,26,1.678,31,0.812,32,1.282,37,3.395,40,1.377,41,1.377,46,0.554,47,3.015,49,1.428,50,0.371,51,2.71,52,1.428,53,0.951,56,1.102,58,1.589,59,2.759,60,1.589,62,0.205,63,0.039,64,1.3,65,0.887,66,3.052,70,1.551,79,0.012,80,0.012,121,1.589,122,2.075,140,0.704,141,2.796,211,1.938,238,2.506,263,1.3,284,2.242,327,0.887,343,2.466,355,1.428,359,3.316,459,2.213,478,1.428,481,2.213,482,1.804,483,2.462,484,2.71,485,3.052,486,1.804,487,2.131,488,1.428,489,2.131,490,2.131,491,3.052,492,2.131,493,1.804,494,2.131,495,2.131,496,1.804,497,2.131,498,1.804,499,1.804,500,1.589,501,1.804,502,2.131,503,2.131,504,2.131,505,4.553,506,4.553,507,4.171,508,4.553,509,3.855,510,2.131,511,2.131,512,2.131,513,2.131,514,2.131,515,2.131,516,2.131,517,2.131,518,2.131,519,2.131,520,2.131,521,2.131,522,2.131,523,2.131,524,1.804,525,2.131,526,1.804,527,1.804,528,2.131]],["title/modules/RoleModule.html",[81,1.104,90,1.788]],["body/modules/RoleModule.html",[2,2.222,3,0.362,4,0.362,5,0.256,17,0.025,31,0.758,46,0.592,50,0.658,62,0.362,63,0.069,79,0.018,80,0.018,81,1.59,83,1.57,84,2.222,90,3.34,92,2.576,93,1.951,94,1.683,96,2.79,97,1.951,178,3.34,211,3.259,284,1.467,324,1.809,326,1.204,336,2.302,339,2.529,479,3.34,481,3.739,500,2.814,501,3.195,529,3.195,530,3.195,531,3.195,532,3.773,533,3.773,534,3.195]],["title/injectables/RoleService.html",[110,0.648,211,1.658]],["body/injectables/RoleService.html",[3,0.243,4,0.243,5,0.172,10,0.38,11,1.283,17,0.025,20,1.044,26,1.811,31,1.12,32,1.371,40,1.898,41,1.898,46,0.511,50,0.442,62,0.243,63,0.047,70,1.811,79,0.014,80,0.014,110,0.706,111,0.985,122,2.217,140,0.971,207,1.806,211,1.806,238,2.75,254,1.31,257,2.525,284,2.166,326,0.809,327,1.054,342,3.013,343,2.743,345,3.336,348,1.699,349,3.868,351,3.013,354,1.699,355,1.699,359,3.521,459,2.525,478,1.699,484,2.525,485,2.525,486,3.189,488,2.525,491,3.565,493,2.146,499,2.146,500,1.89,535,2.146,536,2.535,537,2.535,538,3.767,539,2.535,540,2.535,541,3.189,542,2.535,543,2.535,544,2.535,545,2.535,546,2.535,547,2.535,548,2.535,549,2.535,550,2.535,551,2.535]],["title/classes/User.html",[63,0.064,146,1.439]],["body/classes/User.html",[3,0.333,4,0.333,5,0.236,10,0.52,16,2.087,17,0.025,20,1.075,31,1.075,32,1.522,46,0.514,62,0.514,63,0.064,79,0.017,80,0.017,140,1.078,146,2.226,215,2.119,233,2.875,237,2.766,249,1.796,274,2.996,284,2.23,319,1.549,321,1.961,322,4.315,324,2.26,325,2.328,326,1.108,327,1.445,435,2.941,436,3.991,442,3.991,534,2.941,552,2.328,553,3.473,554,3.473,555,3.473,556,5.35,557,3.473,558,3.473,559,3.473,560,2.328,561,2.941]],["title/controllers/UserController.html",[0,1.542,562,2.318]],["body/controllers/UserController.html",[0,1.378,2,1.378,3,0.297,4,0.297,5,0.21,7,2.651,10,0.462,11,1.48,16,1.581,17,0.025,20,0.814,25,1.985,26,1.713,31,0.621,32,1.237,40,1.052,41,1.052,46,0.588,49,2.07,50,0.538,51,2.913,52,2.07,53,1.378,56,1.597,58,2.303,59,2.816,60,2.303,62,0.297,63,0.057,64,1.884,65,1.285,66,3.658,70,1.48,79,0.016,80,0.016,121,2.303,122,2.032,140,0.538,146,1.285,209,2.6,215,1.884,238,2.434,484,3.371,485,3.658,488,2.07,491,2.913,496,2.615,498,2.615,524,2.615,526,2.615,527,2.615,562,2.913,563,2.615,564,4.346,565,3.088,566,3.088,567,3.088,568,3.088,569,2.303,570,2.615,571,3.088,572,3.088,573,3.088,574,3.088,575,3.088,576,3.088,577,3.088,578,3.088]],["title/modules/UserModule.html",[81,1.104,91,1.936]],["body/modules/UserModule.html",[2,2.143,3,0.343,4,0.343,5,0.242,17,0.025,31,0.718,46,0.599,50,0.622,62,0.343,63,0.066,79,0.017,80,0.017,81,1.533,83,1.486,84,2.143,90,3.225,91,3.675,92,2.483,93,1.847,94,1.593,96,2.69,97,2.483,146,1.486,178,3.22,186,3.024,209,3.485,293,2.664,324,1.713,326,1.14,336,2.179,339,2.394,560,3.22,562,3.638,569,2.664,570,3.024,579,3.024,580,3.024,581,3.024,582,3.572,583,3.572,584,3.572]],["title/injectables/UserService.html",[110,0.648,209,1.788]],["body/injectables/UserService.html",[3,0.272,4,0.272,5,0.192,10,0.425,11,1.393,17,0.025,20,1.043,26,1.788,31,1.118,32,1.18,40,1.896,41,1.896,46,0.534,50,0.494,62,0.272,63,0.052,70,1.788,79,0.015,80,0.015,110,0.766,111,1.102,122,2.206,140,0.97,143,2.94,146,1.701,207,1.961,209,2.114,215,1.73,238,2.729,254,1.466,257,1.901,326,0.905,327,1.18,342,3.215,345,3.519,348,1.901,349,4.006,351,3.215,354,1.901,459,2.741,484,2.741,485,2.741,488,2.741,491,2.741,541,3.462,569,2.114,585,2.401,586,2.835,587,2.835,588,4.089,589,4.089,590,2.835,591,2.835,592,2.835,593,2.835,594,2.835,595,2.835,596,2.835,597,2.835,598,2.835,599,2.835]],["title/changelog.html",[600,2.161,601,2.161,602,2.453]],["body/changelog.html",[5,0.374,8,3.661,17,0.021,24,4.979,25,1.786,79,0.018,80,0.018,123,3.661,124,3.661,343,2.251,483,3.661,602,3.124,603,3.69,604,3.69,605,2.752,606,3.69,607,3.69,608,3.69,609,3.124,610,3.69,611,3.69,612,3.124,613,4.671,614,5.517,615,4.909,616,4.671,617,3.661,618,4.909,619,2.752,620,3.69,621,3.69,622,4.157,623,4.979,624,4.909,625,4.909,626,4.157,627,4.157,628,4.909,629,4.909,630,4.909,631,4.909,632,4.909,633,4.909,634,4.909,635,4.157,636,4.909,637,4.909,638,4.909,639,3.69,640,3.69,641,3.69]],["title/coverage.html",[642,3.979]],["body/coverage.html",[0,2.217,1,1.695,5,0.172,6,2.141,17,0.025,25,0.92,54,1.416,56,1.307,59,1.416,63,0.109,79,0.014,80,0.014,105,1.885,110,1.154,112,2.141,119,1.695,120,2.141,137,1.542,140,0.441,143,1.416,146,1.052,148,1.212,150,1.695,153,1.542,175,1.542,176,1.542,184,1.695,201,2.804,209,1.307,210,1.416,211,1.212,222,1.212,250,1.885,263,1.542,284,0.983,318,1.542,320,2.52,329,1.695,334,1.542,341,2.141,359,1.542,360,2.141,364,2.141,373,2.141,377,2.141,398,2.141,400,2.141,408,2.804,411,1.885,413,2.141,434,2.52,448,1.695,458,2.141,475,2.52,479,1.695,481,1.695,482,2.141,535,2.141,552,2.52,560,1.695,562,1.695,563,2.141,585,2.141,642,2.141,643,1.885,644,2.528,645,2.528,646,4.97,647,2.528,648,2.528,649,6.894,650,5.313,651,2.528,652,5.125,653,6.251,654,5.766,655,3.76,656,3.76,657,2.528,658,2.528,659,3.801,660,1.885,661,2.141,662,3.183,663,3.76,664,2.141,665,3.76,666,2.141,667,2.528,668,2.528]],["title/dependencies.html",[84,1.853,669,2.453]],["body/dependencies.html",[17,0.025,50,0.711,53,1.82,79,0.019,80,0.019,84,1.82,99,2.489,181,3.043,183,2.285,243,3.455,326,1.302,327,1.697,385,3.883,386,3.514,404,3.455,422,3.455,423,3.909,670,5.793,671,4.08,672,4.08,673,4.08,674,4.08,675,4.08,676,4.08,677,4.08,678,4.08,679,4.08,680,4.08,681,4.08,682,4.08,683,4.08,684,4.08,685,4.08,686,4.08,687,4.08,688,4.08,689,4.08,690,4.08,691,3.043,692,4.08,693,4.08]],["title/miscellaneous/functions.html",[694,1.622,695,3.517]],["body/miscellaneous/functions.html",[9,3.283,10,0.659,17,0.022,31,0.885,40,1.499,41,1.499,79,0.02,80,0.02,140,0.767,605,3.283,662,3.727,664,5.081,666,4.658,691,3.283,694,2.465,695,3.727,696,5.501,697,4.402,698,4.402,699,4.402,700,4.402,701,5.501,702,4.402,703,4.402,704,4.402,705,3.727,706,4.402,707,4.402,708,5.322,709,4.658,710,3.727,711,3.727,712,3.727,713,4.402,714,4.402,715,4.402,716,4.402]],["title/index.html",[10,0.434,600,2.161,601,2.161]],["body/index.html",[5,0.379,17,0.021,20,0.537,25,1.043,32,1.014,38,4.472,39,1.922,45,2.139,79,0.015,80,0.015,94,1.279,114,2.428,115,2.428,195,2.428,386,2.763,439,2.139,605,3.6,616,2.428,617,3.074,619,2.139,622,2.428,623,2.428,626,2.428,627,2.428,635,2.428,643,3.936,652,2.428,660,3.936,691,2.139,705,3.491,708,3.491,709,3.491,710,2.428,711,2.428,712,2.428,717,4.734,718,2.428,719,2.868,720,2.868,721,4.123,722,4.123,723,4.123,724,2.868,725,4.123,726,4.123,727,4.827,728,2.868,729,2.868,730,2.868,731,4.123,732,2.868,733,2.868,734,2.868,735,4.123,736,2.868,737,2.868,738,2.868,739,2.868,740,4.123,741,4.123,742,4.123,743,4.123,744,4.827,745,2.868,746,2.868,747,4.123,748,4.123,749,4.123,750,2.868,751,2.868,752,2.868,753,2.868,754,2.868,755,5.278,756,4.123,757,3.936,758,2.868,759,2.868,760,4.827,761,4.123,762,2.428,763,2.868,764,2.868,765,2.868,766,2.868,767,2.868,768,2.868,769,2.868,770,2.428,771,2.428,772,2.868,773,2.428,774,2.868,775,2.428,776,2.868,777,2.868,778,2.868,779,2.428,780,2.868,781,2.868,782,2.868,783,2.868,784,2.868,785,2.868,786,2.868,787,2.428,788,2.868,789,1.922,790,2.139]],["title/license.html",[600,2.161,601,2.161,789,1.942]],["body/license.html",[17,0.017,79,0.017,80,0.017,94,1.611,423,2.692,507,4.097,509,3.057,613,3.057,643,2.692,762,3.057,770,3.057,773,3.057,787,3.057,789,2.42,790,2.692,791,5.457,792,3.611,793,3.057,794,3.611,795,3.057,796,3.611,797,3.611,798,3.611,799,3.611,800,3.611,801,3.611,802,4.838,803,6.578,804,3.611,805,3.611,806,5.457,807,3.611,808,4.838,809,3.611,810,3.611,811,4.838,812,3.611,813,3.611,814,3.611,815,3.611,816,3.611,817,3.611,818,3.611,819,4.838,820,3.611,821,3.611,822,3.611,823,3.611,824,3.611,825,3.611,826,4.838,827,4.838,828,3.611,829,3.611,830,3.611,831,3.611,832,3.611,833,3.611,834,3.611,835,3.611,836,3.611,837,3.611,838,3.611,839,3.611,840,3.611,841,3.611,842,3.611,843,3.611,844,3.611,845,3.611,846,3.611,847,3.611,848,3.611,849,3.611,850,3.611,851,3.611,852,3.611,853,3.611]],["title/modules.html",[83,1.955]],["body/modules.html",[17,0.02,79,0.02,80,0.02,82,3.072,83,1.907,88,2.796,89,2.796,90,2.37,91,2.566,174,2.796,331,3.072,779,3.881,854,6.665,855,6.665,856,6.665,857,6.753,858,4.583]],["title/overview.html",[859,3.979]],["body/overview.html",[2,1.329,17,0.025,54,2.76,79,0.015,80,0.015,82,4.38,83,1.239,84,1.889,85,2.522,86,2.522,87,2.522,88,4.098,89,3.007,90,3.205,91,3.531,92,2.19,93,1.54,94,1.329,111,1.158,148,2.908,170,2.522,171,2.522,172,2.522,173,2.522,174,3.596,175,3.007,176,3.007,209,3.136,210,3.396,211,2.908,280,2.522,292,2.522,319,1.329,331,3.599,332,2.522,333,2.522,334,3.007,411,2.221,451,2.522,452,2.522,453,2.522,529,2.522,530,2.522,531,2.522,579,2.522,580,2.522,581,2.522,859,2.522,860,2.978,861,2.978,862,2.978]],["title/properties.html",[321,1.728,669,2.453]],["body/properties.html",[7,2.862,17,0.025,25,1.706,39,3.144,79,0.021,80,0.021,321,1.951,385,3.144,386,3.144,483,3.498,609,3.971,612,3.971,617,4.266,619,3.498,717,4.844,718,4.844,789,3.144,790,3.498,793,3.971,795,3.971,863,4.69,864,4.69,865,4.69,866,4.69]],["title/miscellaneous/typealiases.html",[694,1.622,867,4.153]],["body/miscellaneous/typealiases.html",[10,0.737,17,0.021,79,0.021,80,0.021,140,0.857,215,3.592,217,3.947,320,3.298,328,4.391,434,3.298,475,3.298,478,3.947,552,3.298,694,2.755,868,4.92,869,4.166,870,4.166,871,4.166,872,4.166]],["title/miscellaneous/variables.html",[694,1.622,757,3.097]],["body/miscellaneous/variables.html",[10,0.539,17,0.025,25,2.117,32,0.885,79,0.017,80,0.017,105,3.599,140,0.627,184,3.235,201,2.683,250,3.599,251,3.046,252,4.087,253,3.046,320,2.411,329,3.235,330,3.046,434,2.411,439,4.902,448,3.235,449,3.046,475,2.411,479,3.235,480,3.046,552,2.411,560,3.235,561,3.046,659,3.046,660,4.341,661,3.046,694,2.014,757,2.683,771,4.087,775,4.087,869,3.046,870,3.046,871,3.046,872,3.046,873,3.598,874,5.447,875,3.598,876,6.573,877,3.598,878,3.598,879,3.598,880,3.598]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":612,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.1.13",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["06",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":862,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":292,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["100",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["12e51eb",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["15m",{"_index":315,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["17",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":613,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["24",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":860,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["6.3.8",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["60s",{"_index":199,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["7",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["7.2.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["76650cd",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["7788688",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":861,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["918d7ca",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["947feeb",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["above",{"_index":825,"title":{},"body":{"license.html":{}}}],["access",{"_index":505,"title":{},"body":{"controllers/RoleController.html":{}}}],["accessed",{"_index":730,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["action",{"_index":848,"title":{},"body":{"license.html":{}}}],["add",{"_index":769,"title":{},"body":{"index.html":{}}}],["aed97c8",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":868,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":817,"title":{},"body":{"license.html":{}}}],["api",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["apibearerauth",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@post('/logout')@useguards(jwtauthguard",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibearerauth()@useguards(jwtauthguard",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{}}}],["apibody",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibody({type",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiproperty",{"_index":361,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apitags",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags('me",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('roles",{"_index":502,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('users",{"_index":571,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":82,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":54,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":852,"title":{},"body":{"license.html":{}}}],["associated",{"_index":804,"title":{},"body":{"license.html":{}}}],["async",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"index.html":{}}}],["authentication",{"_index":617,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["authentication.controller",{"_index":188,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":189,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/jwt.guard",{"_index":498,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["authenticationcontroller",{"_index":119,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":88,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":148,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":374,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":376,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":399,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["author",{"_index":865,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":718,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":787,"title":{},"body":{"index.html":{},"license.html":{}}}],["authservice",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auto",{"_index":722,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":725,"title":{},"body":{"index.html":{}}}],["available",{"_index":779,"title":{},"body":{"index.html":{},"modules.html":{}}}],["await",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"changelog.html":{}}}],["based",{"_index":765,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["body",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"classes/RefreshToken.html":{}}}],["bootstrap",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":857,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":854,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["buildenvironment",{"_index":759,"title":{},"body":{"index.html":{}}}],["c",{"_index":792,"title":{},"body":{"license.html":{}}}],["c103a57",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["caching",{"_index":781,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":414,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["canactivate(context",{"_index":418,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["catch",{"_index":300,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["cd",{"_index":743,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":602,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":799,"title":{},"body":{"license.html":{}}}],["check",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["claim",{"_index":844,"title":{},"body":{"license.html":{}}}],["class",{"_index":63,"title":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":319,"title":{},"body":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{},"overview.html":{}}}],["clients",{"_index":734,"title":{},"body":{"index.html":{}}}],["clone",{"_index":741,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_constantmodule",{"_index":332,"title":{},"body":{"modules/ConstantModule.html":{},"overview.html":{}}}],["cluster_constantmodule_providers",{"_index":333,"title":{},"body":{"modules/ConstantModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule",{"_index":451,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_exports",{"_index":453,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_providers",{"_index":452,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":529,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_exports",{"_index":531,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":530,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":579,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":580,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":582,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":581,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cmd",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["commitlint",{"_index":622,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compare",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compare(pass",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compodoc/compodoc",{"_index":728,"title":{},"body":{"index.html":{}}}],["components/authentication/authentication.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["components/authentication/authentication.service",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/authentication/jwt.guard",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["components/authentication/local.guard",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/database/database.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["components/role/role.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["components/role/role.service",{"_index":424,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["components/users/user.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["compose",{"_index":758,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":824,"title":{},"body":{"license.html":{}}}],["config",{"_index":194,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.get('database_url",{"_index":372,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get(envkeys.jwt_secret",{"_index":196,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["connection",{"_index":773,"title":{},"body":{"index.html":{},"license.html":{}}}],["const",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["constant",{"_index":318,"title":{"classes/Constant.html":{}},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"coverage.html":{}}}],["constant.name",{"_index":340,"title":{},"body":{"modules/ConstantModule.html":{}}}],["constant.schema",{"_index":337,"title":{},"body":{"modules/ConstantModule.html":{},"injectables/ConstantService.html":{}}}],["constant.service",{"_index":338,"title":{},"body":{"modules/ConstantModule.html":{}}}],["constantdocument",{"_index":328,"title":{},"body":{"classes/Constant.html":{},"injectables/ConstantService.html":{},"miscellaneous/typealiases.html":{}}}],["constantmodel",{"_index":347,"title":{},"body":{"injectables/ConstantService.html":{}}}],["constantmodule",{"_index":331,"title":{"modules/ConstantModule.html":{}},"body":{"modules/ConstantModule.html":{},"modules.html":{},"overview.html":{}}}],["constants",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["constantschema",{"_index":329,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constantservice",{"_index":334,"title":{"injectables/ConstantService.html":{}},"body":{"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"coverage.html":{},"overview.html":{}}}],["constructor",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(constantmodel",{"_index":344,"title":{},"body":{"injectables/ConstantService.html":{}}}],["constructor(private",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/LocalStrategy.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":415,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["constructor(refreshtokenmodel",{"_index":461,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["constructor(rolemodel",{"_index":536,"title":{},"body":{"injectables/RoleService.html":{}}}],["constructor(usermodel",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["context",{"_index":421,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["context.getargbyindex(0",{"_index":429,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["context.gethandler",{"_index":428,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["contract",{"_index":849,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('roles",{"_index":503,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('users",{"_index":572,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":819,"title":{},"body":{"license.html":{}}}],["copy",{"_index":802,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":791,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":642,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":747,"title":{},"body":{"index.html":{}}}],["create",{"_index":459,"title":{},"body":{"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":515,"title":{},"body":{"controllers/RoleController.html":{}}}],["create(refreshtoken",{"_index":464,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["create(role",{"_index":486,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["create(user",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["createitem",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["createroledto",{"_index":359,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["creates",{"_index":513,"title":{},"body":{"controllers/RoleController.html":{}}}],["createuserdto",{"_index":143,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["current",{"_index":729,"title":{},"body":{"index.html":{}}}],["damages",{"_index":845,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["database",{"_index":772,"title":{},"body":{"index.html":{}}}],["database_url",{"_index":771,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":89,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["date(date.now",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["day",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":805,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":853,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/permissions.decorator",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":439,"title":{},"body":{"classes/RefreshToken.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["delete",{"_index":484,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:id",{"_index":526,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":527,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":488,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletes",{"_index":524,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":84,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["development",{"_index":723,"title":{},"body":{"index.html":{}}}],["diab",{"_index":795,"title":{},"body":{"license.html":{},"properties.html":{}}}],["distribute",{"_index":815,"title":{},"body":{"license.html":{}}}],["docker",{"_index":619,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["docs",{"_index":626,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["document.sub",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["document.tokenid",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["documentation",{"_index":643,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["dto/auth.dto",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/role.dto",{"_index":499,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["dto/user.dto",{"_index":594,"title":{},"body":{"injectables/UserService.html":{}}}],["dummy",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["eg",{"_index":735,"title":{},"body":{"index.html":{}}}],["email",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["endpoint",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/RoleController.html":{}}}],["enhancements",{"_index":777,"title":{},"body":{"index.html":{}}}],["entry",{"_index":698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["env",{"_index":660,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.development",{"_index":749,"title":{},"body":{"index.html":{}}}],["env.docker",{"_index":754,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":748,"title":{},"body":{"index.html":{}}}],["env.production",{"_index":752,"title":{},"body":{"index.html":{}}}],["envfile",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":760,"title":{},"body":{"index.html":{}}}],["envkeys",{"_index":184,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":301,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["event",{"_index":841,"title":{},"body":{"license.html":{}}}],["executable",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["executioncontext",{"_index":419,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["exist",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expiresat",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["expiresin",{"_index":198,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":423,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":375,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":383,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":391,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{}}}],["features",{"_index":616,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":762,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":351,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":349,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["find",{"_index":485,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["find(filter",{"_index":541,"title":{},"body":{"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":342,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findone(filter",{"_index":348,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["fitness",{"_index":838,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":770,"title":{},"body":{"index.html":{},"license.html":{}}}],["found",{"_index":306,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["free",{"_index":798,"title":{},"body":{"license.html":{}}}],["frequently",{"_index":782,"title":{},"body":{"index.html":{}}}],["function",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":695,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":822,"title":{},"body":{"license.html":{}}}],["g",{"_index":866,"title":{},"body":{"properties.html":{}}}],["gehad",{"_index":794,"title":{},"body":{"license.html":{}}}],["generateaccesstoken",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generateaccesstoken(user",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generated",{"_index":726,"title":{},"body":{"index.html":{}}}],["generaterefreshtoken",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken(refreshtoken",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generation",{"_index":627,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["get('health",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["get('item",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["getitem",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":600,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":740,"title":{},"body":{"index.html":{}}}],["granted",{"_index":797,"title":{},"body":{"license.html":{}}}],["graph",{"_index":858,"title":{},"body":{"modules.html":{}}}],["gt",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["guard",{"_index":411,"title":{"guards/PermissionsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":412,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["guards/permissions.guard",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guidelines",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hash(user.password",{"_index":291,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["haspermission",{"_index":431,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["head",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["heading",{"_index":731,"title":{},"body":{"index.html":{}}}],["health",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["hereby",{"_index":796,"title":{},"body":{"license.html":{}}}],["holders",{"_index":842,"title":{},"body":{"license.html":{}}}],["https://github.com/kareemgdiab/nestjs",{"_index":742,"title":{},"body":{"index.html":{}}}],["husky",{"_index":623,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["id",{"_index":491,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":392,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":425,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["implied",{"_index":834,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["imports",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":828,"title":{},"body":{"license.html":{}}}],["including",{"_index":808,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":200,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":110,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":354,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["injectmodel(constant.name",{"_index":356,"title":{},"body":{"injectables/ConstantService.html":{}}}],["injectmodel(refreshtoken.name",{"_index":471,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["injectmodel(role.name",{"_index":545,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectmodel(user.name",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["insomnia",{"_index":736,"title":{},"body":{"index.html":{}}}],["insomnia,postman",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["install",{"_index":745,"title":{},"body":{"index.html":{}}}],["installation",{"_index":738,"title":{},"body":{"index.html":{}}}],["isglobal",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["item",{"_index":74,"title":{},"body":{"controllers/AppController.html":{}}}],["json",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["jwt",{"_index":386,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["jwt.guard",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["jwt.strategy",{"_index":190,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt_secret",{"_index":775,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":56,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":390,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":192,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":175,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kareem",{"_index":793,"title":{},"body":{"license.html":{},"properties.html":{}}}],["kareemgdiab",{"_index":788,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":863,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":833,"title":{},"body":{"license.html":{}}}],["liability",{"_index":846,"title":{},"body":{"license.html":{}}}],["liable",{"_index":843,"title":{},"body":{"license.html":{}}}],["license",{"_index":789,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["limitation",{"_index":809,"title":{},"body":{"license.html":{}}}],["limited",{"_index":835,"title":{},"body":{"license.html":{}}}],["list",{"_index":778,"title":{},"body":{"index.html":{}}}],["literal",{"_index":465,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["load",{"_index":756,"title":{},"body":{"index.html":{}}}],["loaded",{"_index":761,"title":{},"body":{"index.html":{}}}],["local",{"_index":404,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":191,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthguard",{"_index":150,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":176,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["login(@request",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(req",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(user",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logincredentialsdto",{"_index":153,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["logincredentialsdto})@useguards(localauthguard)@post('/login",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["logout(@request",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(payload",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logout(req",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["lookup",{"_index":780,"title":{},"body":{"index.html":{}}}],["main",{"_index":697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["make",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":739,"title":{},"body":{"index.html":{}}}],["matching",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":837,"title":{},"body":{"license.html":{}}}],["merge",{"_index":813,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":694,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":790,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["model",{"_index":345,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["models",{"_index":783,"title":{},"body":{"index.html":{}}}],["modify",{"_index":812,"title":{},"body":{"license.html":{}}}],["module",{"_index":81,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":83,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":864,"title":{},"body":{"properties.html":{}}}],["mongodb://localhost/nestjs",{"_index":774,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":327,"title":{},"body":{"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":336,"title":{},"body":{"modules/ConstantModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":339,"title":{},"body":{"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":370,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["name",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":768,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":717,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":422,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":326,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"modules/DatabaseModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["node_env",{"_index":766,"title":{},"body":{"index.html":{}}}],["node_env=development",{"_index":767,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":840,"title":{},"body":{"license.html":{}}}],["notable",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["notfoundexception",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["notfoundexception('role",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["notfoundexception('user",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["notice",{"_index":826,"title":{},"body":{"license.html":{}}}],["npm",{"_index":744,"title":{},"body":{"index.html":{}}}],["nrefreshtoken",{"_index":294,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["null",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["number",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser._id",{"_index":295,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["object",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":441,"title":{},"body":{"classes/RefreshToken.html":{}}}],["obtaining",{"_index":801,"title":{},"body":{"license.html":{}}}],["ok",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["openapi",{"_index":733,"title":{},"body":{"index.html":{}}}],["optional",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["otherwise",{"_index":851,"title":{},"body":{"license.html":{}}}],["out",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["over",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":859,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":669,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":496,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":521,"title":{},"body":{"controllers/RoleController.html":{}}}],["parameters",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":839,"title":{},"body":{"license.html":{}}}],["pass",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passport",{"_index":385,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"properties.html":{}}}],["passportmodule",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":387,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":388,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["passwordfield",{"_index":406,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":396,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":395,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.tokenid",{"_index":303,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":304,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["permission",{"_index":507,"title":{},"body":{"controllers/RoleController.html":{},"license.html":{}}}],["permissions",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"guards/PermissionsGuard.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["permissions('item:create",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["permissions('item:read",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["permissions('profile:read",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["permissions('role:create",{"_index":514,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:delete",{"_index":525,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:read",{"_index":510,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('role:update",{"_index":519,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions('user:delete",{"_index":577,"title":{},"body":{"controllers/UserController.html":{}}}],["permissions('user:read",{"_index":574,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard",{"_index":59,"title":{"guards/PermissionsGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["permissionsguard)@delete('/:id",{"_index":489,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionsguard)@permissions('item:create')@post('item",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["permissionsguard)@permissions('item:read')@get('item",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["permissionsguard)@permissions('profile:read')@get('profile",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["permissionsguard)@permissions('user:delete')@delete('/:id",{"_index":565,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard)@permissions('user:read')@get",{"_index":567,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionsguard)@put('/:id",{"_index":494,"title":{},"body":{"controllers/RoleController.html":{}}}],["permit",{"_index":820,"title":{},"body":{"license.html":{}}}],["person",{"_index":800,"title":{},"body":{"license.html":{}}}],["persons",{"_index":821,"title":{},"body":{"license.html":{}}}],["please",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["point",{"_index":699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portions",{"_index":830,"title":{},"body":{"license.html":{}}}],["possibly",{"_index":732,"title":{},"body":{"index.html":{}}}],["post",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{}}}],["post('/login",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/logout",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/refresh",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/register",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('item",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["postman",{"_index":737,"title":{},"body":{"index.html":{}}}],["pre",{"_index":635,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["prefix",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":751,"title":{},"body":{"index.html":{}}}],["project",{"_index":605,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["promise",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":322,"title":{},"body":{"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["prop({type",{"_index":435,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["properties",{"_index":321,"title":{"properties.html":{}},"body":{"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Role.html":{},"classes/User.html":{},"properties.html":{}}}],["provided",{"_index":831,"title":{},"body":{"license.html":{}}}],["providers",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["publish",{"_index":814,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":509,"title":{},"body":{"controllers/RoleController.html":{},"license.html":{}}}],["push",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":497,"title":{},"body":{"controllers/RoleController.html":{}}}],["put('/:id",{"_index":520,"title":{},"body":{"controllers/RoleController.html":{}}}],["rbac",{"_index":719,"title":{},"body":{"index.html":{}}}],["readme",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["redis",{"_index":784,"title":{},"body":{"index.html":{}}}],["ref",{"_index":442,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["reflect",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":416,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["refresh",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(@body",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(body",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshaccesstoken",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshaccesstoken(refreshtoken",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":222,"title":{"classes/RefreshToken.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["refreshtoken._id",{"_index":317,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken.name",{"_index":457,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.schema",{"_index":455,"title":{},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{}}}],["refreshtoken.service",{"_index":456,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.userid",{"_index":316,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendocument",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":137,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenmodel",{"_index":463,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["refreshtokenmodule",{"_index":174,"title":{"modules/RefreshTokenModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["refreshtokens/refreshtoken.module",{"_index":185,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["refreshtokens/refreshtoken.schema",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens/refreshtoken.service",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenschema",{"_index":448,"title":{},"body":{"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenservice",{"_index":210,"title":{"injectables/RefreshTokenService.html":{}},"body":{"injectables/AuthenticationService.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(user",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["release",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["reloading",{"_index":746,"title":{},"body":{"index.html":{}}}],["req",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["req.user",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/PermissionsGuard.html":{}}}],["request.user.role",{"_index":430,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["required",{"_index":437,"title":{},"body":{"classes/RefreshToken.html":{}}}],["reset",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["responder",{"_index":116,"title":{},"body":{"injectables/AppService.html":{}}}],["response",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["rest",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["restriction",{"_index":807,"title":{},"body":{"license.html":{}}}],["result",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["results",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returndocument",{"_index":550,"title":{},"body":{"injectables/RoleService.html":{}}}],["returns",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ConstantService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["revokable",{"_index":720,"title":{},"body":{"index.html":{}}}],["revoked",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["rights",{"_index":810,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":284,"title":{"classes/Role.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"coverage.html":{}}}],["role.controller",{"_index":533,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.name",{"_index":534,"title":{},"body":{"modules/RoleModule.html":{},"classes/User.html":{}}}],["role.permissions.includes(routepermission",{"_index":433,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["role.schema",{"_index":500,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["role.service",{"_index":501,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{}}}],["role/role.module",{"_index":186,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/UserModule.html":{}}}],["role/role.schema",{"_index":559,"title":{},"body":{"classes/User.html":{}}}],["role/role.service",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["role:create",{"_index":512,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:delete",{"_index":523,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:read",{"_index":504,"title":{},"body":{"controllers/RoleController.html":{}}}],["role:update",{"_index":517,"title":{},"body":{"controllers/RoleController.html":{}}}],["rolecontroller",{"_index":481,"title":{"controllers/RoleController.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["roledocument",{"_index":478,"title":{},"body":{"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"miscellaneous/typealiases.html":{}}}],["rolemodel",{"_index":538,"title":{},"body":{"injectables/RoleService.html":{}}}],["rolemodule",{"_index":90,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["roles",{"_index":483,"title":{},"body":{"controllers/RoleController.html":{},"changelog.html":{},"properties.html":{}}}],["roleschema",{"_index":479,"title":{},"body":{"classes/Role.html":{},"modules/RoleModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleservice",{"_index":211,"title":{"injectables/RoleService.html":{}},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["route",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["routepermissions",{"_index":426,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["routepermissions.every((routepermission",{"_index":432,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["run",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["rxjs",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":324,"title":{},"body":{"classes/Constant.html":{},"modules/ConstantModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":325,"title":{},"body":{"classes/Constant.html":{},"classes/RefreshToken.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(constant",{"_index":330,"title":{},"body":{"classes/Constant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":449,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(role",{"_index":480,"title":{},"body":{"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":561,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":444,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.boolean",{"_index":446,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.date",{"_index":447,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.objectid",{"_index":445,"title":{},"body":{"classes/RefreshToken.html":{}}}],["secret",{"_index":195,"title":{},"body":{"modules/AuthenticationModule.html":{},"index.html":{}}}],["secretorkey",{"_index":393,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secured",{"_index":506,"title":{},"body":{"controllers/RoleController.html":{}}}],["see",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":818,"title":{},"body":{"license.html":{}}}],["service",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{}}}],["set",{"_index":310,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setmetadata('permissions",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":666,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shall",{"_index":827,"title":{},"body":{"license.html":{}}}],["sign",{"_index":776,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":197,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["simple",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["software",{"_index":803,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"modules/ConstantModule.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["specification",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["specify",{"_index":764,"title":{},"body":{"index.html":{}}}],["src/.../authentication.service.ts",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.schema.ts",{"_index":869,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissions.decorator.ts",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refreshtoken.schema.ts",{"_index":870,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.schema.ts",{"_index":871,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":872,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:23",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:34",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:45",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:53",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":113,"title":{},"body":{"injectables/AppService.html":{}}}],["src/components/authentication/authentication.controller.ts",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/components/authentication/authentication.controller.ts:15",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:22",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:27",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:34",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.module.ts",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/components/authentication/authentication.service.ts",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.service.ts:107",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:139",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:154",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:164",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:18",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:26",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:39",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:53",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:78",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/dto/auth.dto.ts",{"_index":408,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/components/authentication/dto/auth.dto.ts:10",{"_index":409,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:12",{"_index":410,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:5",{"_index":450,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/components/authentication/jwt.guard.ts",{"_index":373,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts:21",{"_index":382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/jwt.strategy.ts:9",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/local.guard.ts",{"_index":398,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts",{"_index":400,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts:15",{"_index":403,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/authentication/local.strategy.ts:7",{"_index":401,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/constants/constant.module.ts",{"_index":335,"title":{},"body":{"modules/ConstantModule.html":{}}}],["src/components/constants/constant.schema.ts",{"_index":320,"title":{},"body":{"classes/Constant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/constants/constant.schema.ts:9",{"_index":323,"title":{},"body":{"classes/Constant.html":{}}}],["src/components/constants/constant.service.ts",{"_index":341,"title":{},"body":{"injectables/ConstantService.html":{},"coverage.html":{}}}],["src/components/constants/constant.service.ts:13",{"_index":350,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/constants/constant.service.ts:19",{"_index":353,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/constants/constant.service.ts:7",{"_index":346,"title":{},"body":{"injectables/ConstantService.html":{}}}],["src/components/database/database.module.ts",{"_index":369,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/components/refreshtokens/refreshtoken.module.ts",{"_index":454,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts",{"_index":434,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:14",{"_index":443,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:20",{"_index":440,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:26",{"_index":438,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts",{"_index":458,"title":{},"body":{"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:13",{"_index":467,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:19",{"_index":470,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:26",{"_index":466,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:7",{"_index":462,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/role/dto/role.dto.ts",{"_index":360,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/components/role/dto/role.dto.ts:5",{"_index":362,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["src/components/role/dto/role.dto.ts:8",{"_index":363,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["src/components/role/role.controller.ts",{"_index":482,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/components/role/role.controller.ts:33",{"_index":492,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:45",{"_index":487,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:58",{"_index":495,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.controller.ts:74",{"_index":490,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/components/role/role.module.ts",{"_index":532,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/components/role/role.schema.ts",{"_index":475,"title":{},"body":{"classes/Role.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/role/role.schema.ts:12",{"_index":477,"title":{},"body":{"classes/Role.html":{}}}],["src/components/role/role.schema.ts:9",{"_index":476,"title":{},"body":{"classes/Role.html":{}}}],["src/components/role/role.service.ts",{"_index":535,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/components/role/role.service.ts:13",{"_index":542,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:17",{"_index":543,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:23",{"_index":539,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:27",{"_index":544,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:36",{"_index":540,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/role/role.service.ts:8",{"_index":537,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/components/users/dto/user.dto.ts",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/components/users/dto/user.dto.ts:11",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:14",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:5",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:8",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/user.controller.ts",{"_index":563,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/components/users/user.controller.ts:22",{"_index":568,"title":{},"body":{"controllers/UserController.html":{}}}],["src/components/users/user.controller.ts:33",{"_index":566,"title":{},"body":{"controllers/UserController.html":{}}}],["src/components/users/user.module.ts",{"_index":583,"title":{},"body":{"modules/UserModule.html":{}}}],["src/components/users/user.schema.ts",{"_index":552,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/user.schema.ts:10",{"_index":554,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:13",{"_index":553,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:16",{"_index":555,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:19",{"_index":557,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.service.ts",{"_index":585,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/components/users/user.service.ts:13",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:17",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:23",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:27",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:8",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["src/constants.ts",{"_index":659,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/permissions.decorator.ts",{"_index":661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guards/permissions.guard.ts",{"_index":413,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["src/guards/permissions.guard.ts:12",{"_index":417,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/guards/permissions.guard.ts:18",{"_index":420,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/main.ts",{"_index":662,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["start:dev",{"_index":750,"title":{},"body":{"index.html":{}}}],["startdocker",{"_index":753,"title":{},"body":{"index.html":{}}}],["started",{"_index":601,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["strategy",{"_index":384,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":311,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["subject",{"_index":823,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":816,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":829,"title":{},"body":{"license.html":{}}}],["such",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super",{"_index":389,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":855,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":856,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":691,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["table",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["testing",{"_index":508,"title":{},"body":{"controllers/RoleController.html":{}}}],["tests",{"_index":786,"title":{},"body":{"index.html":{}}}],["this.appservice.health",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.logout(req.user",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.refreshaccesstoken(body.refreshtoken",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.register(user",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.validatetokenforuser(payload",{"_index":394,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validateuser(email",{"_index":407,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.constantmodel.findone(filter",{"_index":357,"title":{},"body":{"injectables/ConstantService.html":{}}}],["this.constantmodel.updateone",{"_index":358,"title":{},"body":{"injectables/ConstantService.html":{}}}],["this.generateaccesstoken(nuser",{"_index":296,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generateaccesstoken(user",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(nrefreshtoken",{"_index":297,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(token",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.sign(payload",{"_index":314,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":299,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.reflector.get",{"_index":427,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.refreshtokenmodel.create",{"_index":474,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.findone(filter",{"_index":472,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.updateone(filter",{"_index":473,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenservice.create",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.findone",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.updateone",{"_index":309,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.rolemodel.create(role",{"_index":548,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.deleteone",{"_index":551,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.find(filter",{"_index":546,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.findone(filter",{"_index":547,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolemodel.updateone",{"_index":549,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.roleservice.create(role",{"_index":516,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.delete(id",{"_index":528,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.find",{"_index":511,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.findone",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{}}}],["this.roleservice.update(id",{"_index":522,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.usermodel.create(user",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.deleteone",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find(filter",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone(filter",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.delete(id",{"_index":578,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.find",{"_index":575,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["token",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token._id",{"_index":313,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token.revoked",{"_index":307,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["tokenid",{"_index":312,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["tokens",{"_index":721,"title":{},"body":{"index.html":{}}}],["tort",{"_index":850,"title":{},"body":{"license.html":{}}}],["true",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{}}}],["try",{"_index":298,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["type",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Constant.html":{},"injectables/ConstantService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"guards/PermissionsGuard.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":867,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":558,"title":{},"body":{"classes/User.html":{}}}],["types.objectid",{"_index":556,"title":{},"body":{"classes/User.html":{}}}],["types/passport",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":305,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":308,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":302,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":436,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["unit",{"_index":785,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["unless",{"_index":763,"title":{},"body":{"index.html":{}}}],["up",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["update",{"_index":343,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"changelog.html":{}}}],["update(id",{"_index":493,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["update(update",{"_index":352,"title":{},"body":{"injectables/ConstantService.html":{}}}],["updateone",{"_index":460,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updateone(filter",{"_index":468,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updatequery",{"_index":469,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updates",{"_index":518,"title":{},"body":{"controllers/RoleController.html":{}}}],["updatewriteopresult",{"_index":355,"title":{},"body":{"injectables/ConstantService.html":{},"injectables/RefreshTokenService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["uri",{"_index":371,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["use",{"_index":811,"title":{},"body":{"license.html":{}}}],["used",{"_index":755,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":193,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["useguards(localauthguard",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":146,"title":{"classes/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/RefreshToken.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user._id",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.controller",{"_index":584,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":290,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.name",{"_index":293,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.role",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.schema",{"_index":569,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":570,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.toobject",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user:delete",{"_index":576,"title":{},"body":{"controllers/UserController.html":{}}}],["user:read",{"_index":573,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":562,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["usermodel",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":91,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":405,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":564,"title":{},"body":{"controllers/UserController.html":{}}}],["users/dto/user.dto",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["users/user.module",{"_index":187,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["users/user.schema",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["users/user.service",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["userschema",{"_index":560,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":209,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthenticationService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":727,"title":{},"body":{"index.html":{}}}],["validate",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":402,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetokenforuser",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatetokenforuser(document",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser(email",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["value",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":652,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":757,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":609,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["warranties",{"_index":836,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":832,"title":{},"body":{"license.html":{}}}],["whether",{"_index":847,"title":{},"body":{"license.html":{}}}],["without",{"_index":806,"title":{},"body":{"license.html":{}}}],["workflow",{"_index":724,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ConstantModule.html":{},"modules/RefreshTokenModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController - base controller for the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createItem\n                            \n                            \n                                getItem\n                            \n                            \n                                getProfile\n                            \n                            \n                                health\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createItem\n                        \n                    \n                \n            \n            \n                \ncreateItem()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('item:create')@Post('item')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:45\n                \n            \n\n\n            \n                \n                    Dummy route to test permissions\n\n\n                    \n                        Returns :     { created: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('item:read')@Get('item')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:34\n                \n            \n\n\n            \n                \n                    Dummy route to test permissions\n\n\n                    \n                        Returns :     { name: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('profile:read')@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:23\n                \n            \n\n\n            \n                \n                    A simple endpoint to test the auth service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:53\n                \n            \n\n\n            \n                \n                    Health check endpoint.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { JwtAuthGuard } from './components/authentication/jwt.guard';\nimport { Permissions } from './decorators/permissions.decorator';\nimport { PermissionsGuard } from './guards/permissions.guard';\n\n/**\n * AppController - base controller for the application\n */\n@ApiTags('Me')\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    /**\n     * A simple endpoint to test the auth service.\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('profile:read')\n    @Get('profile')\n    getProfile(@Request() req) {\n        return req.user;\n    }\n\n    /**\n     * Dummy route to test permissions\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('item:read')\n    @Get('item')\n    getItem() {\n        return { name: 'test-item' };\n    }\n\n    /**\n     * Dummy route to test permissions\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('item:create')\n    @Post('item')\n    createItem() {\n        return { created: true };\n    }\n\n    /**\n     * Health check endpoint.\n     */\n    @Get('health')\n    health(): string {\n        return this.appService.health();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthenticationModule } from './components/authentication/authentication.module';\nimport { DatabaseModule } from './components/database/database.module';\nimport { RoleModule } from './components/role/role.module';\nimport { UserModule } from './components/users/user.module';\nimport { ENVFILE } from './constants';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            envFilePath: ENVFILE,\n            isGlobal: true,\n        }),\n        DatabaseModule,\n        AuthenticationModule,\n        UserModule,\n        RoleModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService - base service for the application\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                health\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        health\n                        \n                    \n                \n            \n            \n                \nhealth()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:12\n                \n            \n\n\n            \n                \n                    Simple up and running responder for the health check endpoint.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nhealth check response\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * AppService - base service for the application\n */\n@Injectable()\nexport class AppService {\n    /**\n     * Simple up and running responder for the health check endpoint.\n     * @returns {string} - health check response\n     */\n    health(): string {\n        return 'OK';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: LoginCredentialsDto})@UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post('/logout')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(body: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { AuthenticationService } from '../../components/authentication/authentication.service';\nimport { LocalAuthGuard } from '../../components/authentication/local.guard';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { LoginCredentialsDto, RefreshTokenDto } from './dto/auth.dto';\nimport { JwtAuthGuard } from './jwt.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthenticationController {\n    constructor(private readonly authService: AuthenticationService) {}\n\n    @Post('/register')\n    async register(@Body() user: CreateUserDto) {\n        return this.authService.register(user);\n    }\n\n    @ApiBody({ type: LoginCredentialsDto })\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n\n    @Post('/refresh')\n    public async refresh(@Body() body: RefreshTokenDto) {\n        return this.authService.refreshAccessToken(body.refreshToken);\n    }\n\n    @ApiBearerAuth()\n    @Post('/logout')\n    @UseGuards(JwtAuthGuard)\n    async logout(@Request() req) {\n        return this.authService.logout(req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthenticationModule -->\n\nRoleModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RefreshTokenModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { EnvKeys } from '../../constants';\nimport { RefreshTokenModule } from '../refreshTokens/refreshToken.module';\nimport { RoleModule } from '../role/role.module';\nimport { UserModule } from '../users/user.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n    imports: [\n        UserModule,\n        RoleModule,\n        RefreshTokenModule,\n        PassportModule,\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (config: ConfigService) => ({\n                secret: config.get(EnvKeys.JWT_SECRET),\n                signOptions: { expiresIn: '60s' },\n            }),\n            inject: [ConfigService],\n        }),\n    ],\n    controllers: [AuthenticationController],\n    providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n    exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateAccessToken\n                            \n                            \n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateTokenForUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, refreshTokenService: RefreshTokenService, roleService: RoleService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/authentication.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenService\n                                                  \n                                                        \n                                                                        RefreshTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \ngenerateAccessToken(user: UserDocument, token: RefreshTokenDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                RefreshTokenDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \ngenerateRefreshToken(refreshToken: any, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAccessToken(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateTokenForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateTokenForUser(document: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    document\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare, hash } from 'bcrypt';\nimport { RefreshTokenDocument } from '../refreshTokens/refreshToken.schema';\nimport { RefreshTokenService } from '../refreshTokens/refreshToken.service';\nimport { RoleService } from '../role/role.service';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { UserDocument } from '../users/user.schema';\nimport { UserService } from '../users/user.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(\n        private userService: UserService,\n        private refreshTokenService: RefreshTokenService,\n        private roleService: RoleService,\n        private jwtService: JwtService,\n    ) {}\n\n    async validateTokenForUser(document: any) {\n        const token = await this.refreshTokenService.findOne({\n            _id: document.tokenId,\n            userId: document.sub,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException();\n        }\n    }\n\n    async validateUser(email: string, pass: string): Promise {\n        const user = await this.userService.findOne({ email });\n        if (user == null) {\n            throw new NotFoundException('User does not exist!');\n        }\n\n        if (await compare(pass, user.password)) {\n            const { password, ...result } = user.toObject();\n            return result;\n        }\n\n        return null;\n    }\n\n    async login(user: UserDocument) {\n        let token = await this.refreshTokenService.findOne({\n            userId: user._id,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            token = await this.refreshTokenService.create(\n                {\n                    userId: user._id,\n                },\n                new Date(Date.now() + 7 * DAY),\n            );\n        }\n\n        const accessToken = this.generateAccessToken(user, token);\n        const refreshToken = this.generateRefreshToken(token, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async register(user: CreateUserDto) {\n        const role = await this.roleService.findOne({ _id: user.role });\n        if (role == null) {\n            throw new NotFoundException('Role does not exist!');\n        }\n\n        const nUser = await this.userService.create({\n            email: user.email,\n            password: await hash(user.password, 10),\n            name: user.name,\n            role: user.role,\n        });\n\n        const nRefreshToken = await this.refreshTokenService.create(\n            {\n                userId: nUser._id,\n            },\n            new Date(Date.now() + 7 * DAY),\n        );\n\n        const accessToken = this.generateAccessToken(nUser, nRefreshToken);\n        const refreshToken = this.generateRefreshToken(nRefreshToken, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async refreshAccessToken(refreshToken: string) {\n        let payload: any;\n        try {\n            payload = await this.jwtService.verifyAsync(refreshToken);\n        } catch (error) {\n            throw new UnauthorizedException(error.message);\n        }\n        const token = await this.refreshTokenService.findOne({\n            _id: payload.tokenId,\n            userId: payload.userId,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException('Refresh token not found');\n        }\n\n        if (token.revoked === true) {\n            throw new UnauthorizedException('Refresh token revoked');\n        }\n\n        const user = await this.userService.findOne({ _id: payload.userId });\n\n        if (user == null) {\n            throw new UnauthorizedException('User not found');\n        }\n\n        const accessToken = await this.generateAccessToken(user, token);\n        return { accessToken };\n    }\n\n    async logout(payload: any) {\n        const result = await this.refreshTokenService.updateOne(\n            {\n                _id: payload.tokenId,\n                userId: payload.userId,\n                revoked: false,\n            },\n            {\n                $set: {\n                    revoked: true,\n                },\n            },\n        );\n    }\n\n    generateAccessToken(user: UserDocument, token: RefreshTokenDocument) {\n        const payload = {\n            email: user.email,\n            sub: user._id,\n            tokenId: token._id,\n            role: user.role,\n        };\n        return this.jwtService.sign(payload, { expiresIn: '15m' });\n    }\n\n    generateRefreshToken(refreshToken: any, expiresIn: number) {\n        const payload = {\n            userId: refreshToken.userId,\n            tokenId: refreshToken._id,\n        };\n        return this.jwtService.sign(payload, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Constant.html":{"url":"classes/Constant.html","title":"class - Constant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Constant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/constants/constant.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/constants/constant.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type ConstantDocument = Constant & Document;\n\n@Schema()\nexport class Constant {\n    @Prop()\n    permissions: string[];\n}\n\nexport const ConstantSchema = SchemaFactory.createForClass(Constant);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConstantModule.html":{"url":"modules/ConstantModule.html","title":"module - ConstantModule","body":"\n                   \n\n\n\n\n    Modules\n    ConstantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConstantModule\n\n\n\ncluster_ConstantModule_providers\n\n\n\n\nConstantService\n\nConstantService\n\n\n\nConstantModule\n\nConstantModule\n\nConstantModule -->\n\nConstantService->ConstantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/constants/constant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConstantService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Constant, ConstantSchema } from './constant.schema';\nimport { ConstantService } from './constant.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: Constant.name, schema: ConstantSchema },\n        ]),\n    ],\n    providers: [ConstantService],\n})\nexport class ConstantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConstantService.html":{"url":"injectables/ConstantService.html","title":"injectable - ConstantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConstantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/constants/constant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/constants/constant.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/constants/constant.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(update: ConstantDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/constants/constant.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                ConstantDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateWriteOpResult } from 'mongoose';\nimport { Constant, ConstantDocument } from './constant.schema';\n\n@Injectable()\nexport class ConstantService {\n    constructor(\n        @InjectModel(Constant.name)\n        private constantModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.constantModel.findOne(filter);\n    }\n\n    async update(update: ConstantDocument): Promise {\n        return this.constantModel.updateOne({}, update);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/dto/role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/dto/role.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/dto/role.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateRoleDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly permissions: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly email: string;\n\n    @ApiProperty()\n    readonly password: string;\n\n    @ApiProperty()\n    readonly role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n    imports: [\n        MongooseModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: async (config: ConfigService) => ({\n                uri: config.get('DATABASE_URL'),\n            }),\n            inject: [ConfigService],\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { ConfigService } from '@nestjs/config';\nimport { EnvKeys } from '../../constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        private readonly authService: AuthenticationService,\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: config.get(EnvKeys.JWT_SECRET),\n        });\n    }\n\n    async validate(payload: any) {\n        await this.authService.validateTokenForUser(payload);\n        return {\n            userId: payload.sub,\n            email: payload.email,\n            tokenId: payload.tokenId,\n            role: payload.role,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthenticationService) {\n        super({\n            usernameField: 'email',\n            passwordField: 'password',\n        });\n    }\n\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionsGuard.html":{"url":"guards/PermissionsGuard.html","title":"guard - PermissionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, roleService: RoleService)\n                    \n                \n                        \n                            \n                                Defined in src/guards/permissions.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/permissions.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { RoleService } from '../components/role/role.service';\n\n@Injectable()\nexport class PermissionsGuard implements CanActivate {\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly roleService: RoleService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const routePermissions = this.reflector.get(\n            'permissions',\n            context.getHandler(),\n        );\n\n        if (!routePermissions) {\n            return true;\n        }\n\n        const request: Request = context.getArgByIndex(0);\n\n        const role = await this.roleService.findOne({ _id: request.user.role });\n        if (role == null) {\n            throw new NotFoundException('Role not found');\n        }\n\n        const hasPermission = routePermissions.every((routePermission) =>\n            role.permissions.includes(routePermission),\n        );\n\n        return hasPermission;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                revoked\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, ObjectId, SchemaTypes } from 'mongoose';\nimport { User } from '../users/user.schema';\n\nexport type RefreshTokenDocument = RefreshToken & Document;\n\n@Schema()\nexport class RefreshToken {\n    @Prop({\n        type: SchemaTypes.ObjectId,\n        ref: User.name,\n        required: true,\n    })\n    userId: ObjectId;\n\n    @Prop({\n        type: SchemaTypes.Boolean,\n        default: false,\n    })\n    revoked: boolean;\n\n    @Prop({\n        type: SchemaTypes.Date,\n        required: true,\n    })\n    expiresAt: Date;\n}\n\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RefreshTokenModule.html":{"url":"modules/RefreshTokenModule.html","title":"module - RefreshTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    RefreshTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refreshToken.schema';\nimport { RefreshTokenService } from './refreshToken.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: RefreshToken.name, schema: RefreshTokenSchema },\n        ]),\n    ],\n    providers: [RefreshTokenService],\n    exports: [RefreshTokenService],\n})\nexport class RefreshTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(refreshTokenModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/refreshTokens/refreshToken.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        refreshTokenModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(refreshToken: literal type, expiresAt: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresAt\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filter: FilterQuery, update: UpdateQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateQuery, UpdateWriteOpResult } from 'mongoose';\nimport { RefreshToken, RefreshTokenDocument } from './refreshToken.schema';\n\n@Injectable()\nexport class RefreshTokenService {\n    constructor(\n        @InjectModel(RefreshToken.name)\n        private refreshTokenModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.refreshTokenModel.findOne(filter);\n    }\n\n    async updateOne(\n        filter: FilterQuery,\n        update: UpdateQuery,\n    ): Promise {\n        return this.refreshTokenModel.updateOne(filter, update);\n    }\n\n    async create(\n        refreshToken: { userId: string },\n        expiresAt: Date,\n    ): Promise {\n        return this.refreshTokenModel.create({ ...refreshToken, expiresAt });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/role.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/role/role.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type RoleDocument = Role & Document;\n\n@Schema()\nexport class Role {\n    @Prop()\n    name: string;\n\n    @Prop()\n    permissions: string[];\n}\n\nexport const RoleSchema = SchemaFactory.createForClass(Role);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(role: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, role: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard, PermissionsGuard)@Put('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/role/role.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { UpdateWriteOpResult } from 'mongoose';\nimport { Permissions } from '../../decorators/permissions.decorator';\nimport { PermissionsGuard } from '../../guards/permissions.guard';\nimport { JwtAuthGuard } from '../authentication/jwt.guard';\nimport { CreateRoleDto } from './dto/role.dto';\nimport { RoleDocument } from './role.schema';\nimport { RoleService } from './role.service';\n\n@ApiTags('Roles')\n@Controller('roles')\nexport class RoleController {\n    constructor(private readonly roleService: RoleService) {}\n\n    /**\n     * @permissions `role:read`\n     * @description Returns all roles with their permissions\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    // @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:read')\n    @Get()\n    async find(): Promise {\n        return this.roleService.find({});\n    }\n\n    /**\n     * @permissions `role:create`\n     * @description Creates new role with permissions\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    // @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:create')\n    @Post()\n    async create(@Body() role: CreateRoleDto): Promise {\n        return this.roleService.create(role);\n    }\n\n    /**\n     * @permissions `role:update`\n     * @description Updates role with permission\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:update')\n    @Put('/:id')\n    async update(\n        @Param('id') id: string,\n        @Body() role: CreateRoleDto,\n    ): Promise {\n        return this.roleService.update(id, role);\n    }\n\n    /**\n     * @permissions `role:delete`\n     * @description Deletes role\n     * @access Endpoint not secured by permission for testing purpose only\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    // @Permissions('role:delete')\n    @Delete('/:id')\n    async delete(@Param('id') id: string): Promise {\n        return this.roleService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_RoleModule_exports\n\n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RoleController } from './role.controller';\nimport { Role, RoleSchema } from './role.schema';\nimport { RoleService } from './role.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: Role.name, schema: RoleSchema }]),\n    ],\n    controllers: [RoleController],\n    providers: [RoleService],\n    exports: [RoleService],\n})\nexport class RoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/role/role.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/role/role.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(role: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, role: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/role/role.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateWriteOpResult } from 'mongoose';\nimport { CreateRoleDto } from './dto/role.dto';\nimport { Role, RoleDocument } from './role.schema';\n\n@Injectable()\nexport class RoleService {\n    constructor(\n        @InjectModel(Role.name) private roleModel: Model,\n    ) {}\n\n    async find(filter: FilterQuery): Promise {\n        return this.roleModel.find(filter);\n    }\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.roleModel.findOne(filter);\n    }\n\n    async create(role: CreateRoleDto): Promise {\n        return this.roleModel.create(role);\n    }\n\n    async update(\n        id: string,\n        role: CreateRoleDto,\n    ): Promise {\n        return this.roleModel.updateOne({ _id: id }, role, {\n            returnDocument: 'after',\n        });\n    }\n\n    async delete(id: string): Promise {\n        return this.roleModel.deleteOne({ _id: id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { Role } from '../role/role.schema';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n    @Prop()\n    name: string;\n\n    @Prop()\n    email: string;\n\n    @Prop()\n    password: string;\n\n    @Prop({ type: Types.ObjectId, ref: Role.name })\n    role: Types.ObjectId;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('user:delete')@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, PermissionsGuard)@Permissions('user:read')@Get()\n                \n            \n\n            \n                \n                    Defined in src/components/users/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { Permissions } from '../../decorators/permissions.decorator';\nimport { PermissionsGuard } from '../../guards/permissions.guard';\nimport { JwtAuthGuard } from '../authentication/jwt.guard';\nimport { UserDocument } from './user.schema';\nimport { UserService } from './user.service';\n\n@ApiTags('Users')\n@ApiBearerAuth()\n@Controller('users')\nexport class UserController {\n    constructor(private readonly userService: UserService) {}\n\n    /**\n     * @permissions `user:read`\n     * @description Returns all users with their permissions\n     */\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('user:read')\n    @Get()\n    async find(): Promise {\n        return this.userService.find({});\n    }\n\n    /**\n     * @permissions `user:delete`\n     * @description Deletes user\n     */\n    @UseGuards(JwtAuthGuard, PermissionsGuard)\n    @Permissions('user:delete')\n    @Delete('/:id')\n    async delete(@Param('id') id: string): Promise {\n        return this.userService.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nRoleModule\n\nRoleModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoleModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoleModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RoleModule } from '../role/role.module';\nimport { UserController } from './user.controller';\nimport { User, UserSchema } from './user.schema';\nimport { UserService } from './user.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n        RoleModule,\n    ],\n    controllers: [UserController],\n    providers: [UserService],\n    exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { CreateUserDto } from './dto/user.dto';\nimport { User, UserDocument } from './user.schema';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectModel(User.name) private userModel: Model,\n    ) {}\n\n    async find(filter: FilterQuery): Promise {\n        return this.userModel.find(filter);\n    }\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.userModel.findOne(filter);\n    }\n\n    async create(user: CreateUserDto): Promise {\n        return this.userModel.create(user);\n    }\n\n    async delete(id: string): Promise {\n        return this.userModel.deleteOne({ _id: id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.0.4 (2022-06-17)\nFeatures\n\nbase authentication (76650cd)\ndocker and readme update (aed97c8)\nlogin, logout, commitlint and husky (947feeb)\nroles & permissions (c103a57)\ntest docs generation (12e51eb)\ntest release cmd (7788688)\n\nBug Fixes\n\nmake husky pre-push file an executable (918d7ca)\n\n0.0.3 (2022-06-17)\nFeatures\n\nroles & permissions (c103a57)\ntest release cmd (7788688)\n\n0.0.2 (2022-06-15)\nFeatures\n\nbase authentication (76650cd)\nlogin, logout, commitlint and husky (947feeb)\ntest docs generation (12e51eb)\n\nBug Fixes\n\nmake husky pre-push file an executable (918d7ca)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            variable\n            DAY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/constants/constant.schema.ts\n            \n            class\n            Constant\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/constants/constant.schema.ts\n            \n            variable\n            ConstantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/constants/constant.service.ts\n            \n            injectable\n            ConstantService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/role/dto/role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/role/role.schema.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/role/role.schema.ts\n            \n            variable\n            RoleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/users/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENVFILE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            EnvKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/permissions.decorator.ts\n            \n            variable\n            Permissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/permissions.guard.ts\n            \n            guard\n            PermissionsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwagger\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            mongoose : ^6.3.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            setupSwagger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main entry point for the application.\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Setup swagger dashboard, please run the project and head over to /api,\nThere is also a json api specification /api-json that can be imported in rest-api apps such as (insomnia,postman).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Auth\n\n  \n\n\nA NestJS Authentication & Authorization Service.\n\n\n\n\n\n\n\n\n\nFeatures\n\nJWT Authentication\nRBAC\nRevokable Tokens\nAuto docs generation\nDevelopment workflow (husky, commitlint)\n\nDocumentation\n\nDocumentation is automatically generated using @compodoc/compodoc,\nCheck out current project documentation on /nestjs-auth\n\n\nA Swagger documentation is also automatically generated and can be accessed by running the project and heading to /api\nand possibly the openapi specification json file that can be imported in rest clients (eg,. insomnia, postman) by heading to /api-json\n\nInstallation\nManual\n  git clone https://github.com/kareemgdiab/nestjs-auth\n  cd nestjs-auth\n  \n  npm install\n\n  # For development and auto reloading\n  cp .env.example .env.development\n  npm run start:dev\n\n  # For production\n  cp .env.example .env.production\n  npm startDocker\ngit clone https://github.com/kareemgdiab/nestjs-auth\ncd nestjs-auth\n\n# Pre-defined `.env.docker` file is used to load variables\n\ndocker-compose up --buildEnvironment Variables\nEnvironment variables are loaded using .env files.\n\nBy default .env is loaded unless you specify which environment file to load based on NODE_ENV variable so if NODE_ENV=development the env file to be used will be .env.development\n\nTo run this project, you will need to add the following environment variables to your .env file\nDATABASE_URL - Database Connection String. (eg,. mongodb://localhost/nestjs-auth).\nJWT_SECRET - A secret string used to sign jwt tokens.\nEnhancements\n\nList of all available permissions as a lookup\nCaching frequently used models using redis\nUnit Tests\n\nAuthors\n\n@kareemgdiab\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Kareem Gehad Diab\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConstantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RefreshTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_ConstantModule\n\n\n\ncluster_ConstantModule_providers\n\n\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthenticationModule -->\n\nRoleModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoleModule->UserModule\n\n\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nConstantService\n\nConstantService\n\n\n\nConstantModule\n\nConstantModule\n\nConstantModule -->\n\nConstantService->ConstantModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.4\n        \n            Description : A NestJS Authentication & Authorization Service\n        \n            Keywords : nestjs, authentication, authorization, jwt, passport, roles, permissions, docker, mongodb\n        \n            License : MIT\n        \n            Author : Kareem G. Diab\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConstantDocument   (src/.../constant.schema.ts)\n                        \n                        \n                            RefreshTokenDocument   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            RoleDocument   (src/.../role.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/constants/constant.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ConstantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/refreshTokens/refreshToken.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/role/role.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RoleDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConstantSchema   (src/.../constant.schema.ts)\n                        \n                        \n                            DAY   (src/.../authentication.service.ts)\n                        \n                        \n                            ENV   (src/.../constants.ts)\n                        \n                        \n                            ENVFILE   (src/.../constants.ts)\n                        \n                        \n                            EnvKeys   (src/.../constants.ts)\n                        \n                        \n                            Permissions   (src/.../permissions.decorator.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            RoleSchema   (src/.../role.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/constants/constant.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ConstantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Constant)\n                    \n                \n\n\n        \n    \n\n    src/components/authentication/authentication.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DAY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 24 * 60 * 60 * 1000\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENVFILE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ENV ? `.env.${ENV}` : '.env'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EnvKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    JWT_SECRET: 'JWT_SECRET',\n    DATABASE_URL: 'DATABASE_URL',\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: string[]) =>\n    SetMetadata('permissions', permissions)\n                    \n                \n\n\n        \n    \n\n    src/components/refreshTokens/refreshToken.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/components/role/role.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Role)\n                    \n                \n\n\n        \n    \n\n    src/components/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
