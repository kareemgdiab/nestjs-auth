var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.806,1,2.016]],["body/controllers/AppController.html",[0,2.955,1,3.298,2,1.77,3,0.423,4,0.375,5,0.328,6,2.577,7,2.232,8,3.517,9,3.517,10,0.585,11,1.808,12,4.231,13,3.1,14,1.452,15,0.034,16,3.1,17,0.851,18,3.1,19,4.231,20,4.231,21,3.047,22,3.517,23,4.231,24,1.324,25,0.93,26,1.324,27,3.517,28,1.324,29,2.577,30,0.645,31,0.658,32,2.577,33,2.577,34,0.645,35,3.517,36,2.577,37,1.599,38,1.77,39,3.1,40,3.1,41,0.423,42,0.161,43,2.577,44,3.1,45,3.1,46,1.324,47,1.21,48,1.324,49,3.1,50,0.023,51,0.023]],["title/modules/AppModule.html",[52,1.131,53,2.016]],["body/modules/AppModule.html",[1,2.931,2,2.274,3,0.388,4,0.343,5,0.3,15,0.034,31,0.779,34,0.591,41,0.388,42,0.147,50,0.021,51,0.021,52,1.423,53,3.817,54,1.213,55,1.866,56,2.361,57,2.361,58,2.361,59,3.107,60,3.107,61,2.807,62,3.107,63,2.274,64,1.621,65,1.621,66,2.84,67,2.538,68,2.274,69,2.361,70,2.045,71,2.84,72,2.84,73,2.84,74,2.84,75,2.84,76,2.868,77,2.84,78,2.84,79,2.84,80,2.84,81,2.045]],["title/injectables/AppService.html",[62,1.806,82,0.597]],["body/injectables/AppService.html",[3,0.546,4,0.483,5,0.423,10,0.755,11,2.135,15,0.033,17,1.097,28,1.708,31,0.546,34,0.832,41,0.546,42,0.207,47,1.951,48,1.708,50,0.027,51,0.027,62,2.853,82,0.943,83,1.561,84,3.323,85,5.711,86,3.998,87,3.998,88,3.998]],["title/controllers/AuthenticationController.html",[0,1.806,89,2.016]],["body/controllers/AuthenticationController.html",[0,1.253,2,1.253,3,0.3,4,0.265,5,0.232,10,0.414,11,1.411,14,2.069,15,0.034,17,1.212,22,1.825,24,1.887,25,1.324,26,1.887,27,3.671,28,1.887,30,0.827,31,0.705,32,1.825,33,1.825,34,0.457,35,2.745,36,1.825,37,1.132,38,1.253,41,0.3,42,0.114,43,1.825,48,1.887,50,0.018,51,0.018,89,2.104,90,1.825,91,2.195,92,2.669,93,2.379,94,2.379,95,3.97,96,3.302,97,2.745,98,2.195,99,2.195,100,2.195,101,2.195,102,3.181,103,2.195,104,2.195,105,2.195,106,2.195,107,2.522,108,3.302,109,2.195,110,3.97,111,1.825,112,2.278,113,3.302,114,2.195,115,1.29,116,2.195,117,3.302,118,1.411,119,2.195,120,1.399,121,2.195,122,1.825,123,1.886,124,2.195,125,2.195,126,2.195,127,2.195,128,1.581,129,1.253,130,1.581,131,2.195,132,2.195,133,2.195,134,2.195,135,2.195,136,2.195,137,2.195,138,2.195,139,2.195,140,2.195,141,2.195]],["title/modules/AuthenticationModule.html",[52,1.131,59,1.806]],["body/modules/AuthenticationModule.html",[2,2.089,3,0.344,4,0.305,5,0.267,15,0.034,31,0.782,34,0.525,41,0.344,42,0.131,50,0.02,51,0.02,52,1.308,54,1.078,55,1.715,59,3.429,61,2.699,63,2.089,64,1.44,65,1.44,67,2.332,68,2.089,89,2.744,118,2.504,142,2.097,143,2.097,144,2.097,145,2.097,146,2.987,147,2.987,148,2.987,149,2.522,150,2.636,151,2.522,152,1.817,153,3.659,154,1.301,155,2.522,156,2.522,157,1.607,158,2.097,159,2.522,160,1.817,161,2.522,162,2.522,163,2.522,164,2.097,165,2.097,166,2.522,167,2.097,168,2.522]],["title/injectables/AuthenticationService.html",[82,0.597,118,1.352]],["body/injectables/AuthenticationService.html",[3,0.14,4,0.124,5,0.109,10,0.194,11,0.761,15,0.034,17,1.137,24,1.77,25,1.291,26,1.77,28,1.69,30,0.862,31,0.54,34,0.214,41,0.14,42,0.053,46,1.201,47,1.617,48,1.597,50,0.01,51,0.01,81,1.283,82,0.336,83,0.402,92,2.394,93,1.283,94,1.283,97,1.481,102,1.698,111,1.481,112,1.45,115,1.46,118,0.761,122,0.855,152,0.741,167,2.643,169,0.741,170,1.782,171,1.782,172,1.782,173,1.782,174,1.782,175,1.017,176,1.028,177,1.797,178,1.928,179,3.738,180,1.028,181,1.782,182,2.382,183,4.789,184,1.792,185,1.028,186,1.782,187,2.358,188,1.028,189,1.488,190,1.782,191,1.028,192,1.782,193,1.028,194,2.643,195,1.782,196,1.028,197,1.028,198,1.782,199,1.028,200,0.741,201,1.782,202,2.358,203,1.028,204,1.136,205,1.028,206,1.481,207,1.028,208,1.028,209,0.855,210,1.028,211,1.028,212,0.855,213,1.028,214,3.163,215,2.29,216,0.855,217,1.481,218,0.855,219,1.698,220,3.376,221,2.358,222,2.812,223,1.028,224,2.382,225,1.028,226,1.698,227,2.358,228,3.203,229,1.698,230,2.895,231,2.025,232,3.483,233,2.895,234,1.782,235,1.028,236,1.028,237,1.028,238,1.028,239,0.919,240,2.358,241,1.028,242,2.358,243,1.782,244,1.782,245,2.812,246,3.483,247,1.782,248,1.028,249,1.028,250,1.028,251,1.782,252,1.028,253,1.028,254,0.741,255,1.782,256,1.028,257,1.028,258,1.028,259,1.028,260,1.028,261,1.028,262,1.028,263,1.028,264,1.481,265,2.358,266,1.782,267,1.782,268,1.028,269,1.028,270,1.028,271,1.028,272,1.028,273,1.481,274,1.028,275,1.782,276,1.028,277,1.028,278,1.028]],["title/classes/CreateUserDto.html",[42,0.164,112,1.632]],["body/classes/CreateUserDto.html",[3,0.466,4,0.412,5,0.361,10,0.644,14,2.369,15,0.033,17,1.388,25,1.516,30,1.053,31,0.466,37,1.76,41,0.466,42,0.177,46,2.16,47,2.245,50,0.024,51,0.024,112,2.328,129,3.44,239,2.608,279,1.76,280,2.836,281,2.115,282,4.224,283,3.412,284,3.412,285,3.412]],["title/modules/DatabaseModule.html",[52,1.131,60,1.806]],["body/modules/DatabaseModule.html",[3,0.515,4,0.456,5,0.399,15,0.034,31,0.725,34,0.786,41,0.515,42,0.195,50,0.026,51,0.026,52,1.723,54,1.613,60,2.752,68,2.752,69,4.006,70,2.719,92,1.769,286,3.775,287,5.309,288,2.719,289,1.613,290,3.775,291,3.775,292,3.775,293,3.775,294,3.775,295,3.775]],["title/injectables/JwtAuthGuard.html",[38,1.806,82,0.597]],["body/injectables/JwtAuthGuard.html",[3,0.583,4,0.516,5,0.452,15,0.033,31,0.711,34,0.89,38,2.973,41,0.583,42,0.221,50,0.028,51,0.028,82,0.983,83,1.669,154,2.204,296,3.552,297,3.552,298,2.723,299,4.273]],["title/injectables/JwtStrategy.html",[82,0.597,147,1.806]],["body/injectables/JwtStrategy.html",[3,0.403,4,0.357,5,0.312,10,0.557,11,1.748,15,0.034,17,1.123,24,1.748,25,1.227,26,1.748,28,1.261,30,0.852,31,0.727,34,0.615,41,0.403,42,0.153,46,1.261,48,1.261,50,0.022,51,0.022,82,0.772,83,1.153,92,2.2,102,2.126,118,2.166,128,2.126,129,1.686,130,2.947,147,2.336,154,1.523,157,1.881,158,2.454,160,2.126,165,2.454,175,1.686,194,2.454,220,2.126,224,1.881,231,2.126,264,2.454,273,2.454,298,1.881,300,2.454,301,3.401,302,2.454,303,2.952,304,4.091,305,2.952,306,2.952,307,2.454,308,2.126,309,2.454,310,2.454,311,2.454,312,2.454,313,2.952,314,2.952,315,2.952,316,2.952,317,2.952,318,2.952,319,2.952]],["title/injectables/LocalAuthGuard.html",[82,0.597,120,2.016]],["body/injectables/LocalAuthGuard.html",[3,0.583,4,0.516,5,0.452,15,0.033,31,0.711,34,0.89,41,0.583,42,0.221,50,0.028,51,0.028,82,0.983,83,1.669,120,3.318,154,2.204,297,3.552,298,2.723,320,3.552,321,4.273]],["title/injectables/LocalStrategy.html",[82,0.597,148,1.806]],["body/injectables/LocalStrategy.html",[3,0.395,4,0.35,5,0.306,10,0.547,11,1.724,15,0.034,17,1.108,24,1.724,25,1.21,26,1.724,28,1.237,30,0.84,31,0.686,34,0.603,41,0.395,42,0.15,46,1.724,47,2.138,48,1.237,50,0.022,51,0.022,82,0.762,83,1.13,92,2.177,115,1.815,118,2.148,128,2.085,130,2.907,148,2.304,154,1.493,160,2.085,175,1.653,204,2.572,206,3.355,214,1.845,220,2.085,228,2.085,233,2.406,239,2.727,298,1.845,301,3.355,302,2.406,307,2.406,308,2.085,310,2.406,311,2.406,312,2.406,322,2.406,323,2.895,324,4.036,325,2.895,326,2.406,327,2.895,328,2.895,329,2.895]],["title/classes/LoginCredentialsDto.html",[42,0.164,123,1.806]],["body/classes/LoginCredentialsDto.html",[3,0.481,4,0.426,5,0.373,10,0.665,14,2.16,15,0.033,17,1.266,30,0.96,31,0.481,37,1.818,41,0.63,42,0.239,46,2.195,47,2.209,50,0.025,51,0.025,107,2.013,123,2.633,129,3.375,189,1.506,239,2.65,279,1.818,281,2.16,282,4.179,330,2.539,331,3.525,332,3.525]],["title/classes/RefreshToken.html",[42,0.164,189,1.352]],["body/classes/RefreshToken.html",[3,0.385,4,0.341,5,0.298,10,0.532,14,2.146,15,0.034,17,1.257,30,1.161,31,0.625,41,0.625,42,0.146,50,0.021,51,0.021,81,3.578,115,1.101,184,1.796,189,1.957,200,2.853,212,2.343,214,1.796,224,2.919,226,3.299,229,2.853,230,3.807,231,2.853,254,2.03,279,1.454,281,1.856,289,1.204,333,1.796,334,4.58,335,4.968,336,4.968,337,2.818,338,3.961,339,3.293,340,2.818,341,4.58,342,3.961,343,2.818,344,4.13,345,2.524,346,2.343,347,2.818,348,1.609,349,2.818,350,2.818,351,2.818,352,1.796,353,2.343]],["title/classes/RefreshTokenDto.html",[42,0.164,107,1.806]],["body/classes/RefreshTokenDto.html",[3,0.51,4,0.452,5,0.395,10,0.706,14,1.751,15,0.033,17,1.026,30,0.778,31,0.51,37,1.928,41,0.654,42,0.248,46,1.597,47,2.176,50,0.026,51,0.026,107,2.734,123,2.134,129,3.289,189,2.257,239,1.928,279,1.928,281,2.244,282,4.149,330,2.691,354,3.737]],["title/modules/RefreshTokenModule.html",[52,1.131,146,1.806]],["body/modules/RefreshTokenModule.html",[3,0.449,4,0.398,5,0.348,15,0.034,25,0.987,31,0.724,34,0.685,41,0.449,42,0.17,50,0.024,51,0.024,52,1.575,54,1.406,55,2.065,63,2.516,64,1.879,65,1.879,67,2.808,68,1.879,146,3.319,150,3.173,178,3.166,189,1.406,288,2.37,289,1.406,345,2.097,352,2.808,355,2.736,356,2.736,357,2.736,358,3.291,359,2.736,360,3.291,361,2.736,362,3.291]],["title/injectables/RefreshTokenService.html",[82,0.597,178,1.632]],["body/injectables/RefreshTokenService.html",[3,0.324,4,0.286,5,0.251,10,0.447,11,1.494,15,0.034,17,1.259,24,1.959,25,1.375,26,1.959,28,1.775,29,2.906,30,1.066,31,0.626,34,0.493,41,0.324,42,0.123,47,0.925,48,1.775,50,0.019,51,0.019,82,0.66,83,0.925,92,2.599,175,1.996,178,1.803,184,1.51,189,1.959,204,3.261,219,1.707,224,1.51,226,3.303,229,2.992,289,1.013,348,1.353,359,1.97,363,1.97,364,3.454,365,3.454,366,4.154,367,2.37,368,3.812,369,2.37,370,3.496,371,2.37,372,2.37,373,1.97,374,4.4,375,2.37,376,3.812,377,2.37,378,4.586,379,4.586,380,2.37,381,1.97,382,2.37,383,2.37,384,2.37,385,2.37,386,2.37]],["title/classes/User.html",[42,0.164,115,1.236]],["body/classes/User.html",[3,0.444,4,0.392,5,0.344,10,0.613,14,2.312,15,0.034,17,1.354,25,1.48,30,1.099,31,0.596,41,0.674,42,0.168,46,2.108,47,2.214,50,0.023,51,0.023,115,1.927,182,2.07,200,3.145,214,2.07,239,2.545,279,1.675,281,2.046,289,1.388,344,4.816,345,2.783,346,2.7,348,1.855,387,2.07,388,3.248,389,3.248,390,3.248,391,2.07,392,2.7]],["title/modules/UserModule.html",[52,1.131,61,1.632]],["body/modules/UserModule.html",[3,0.453,4,0.401,5,0.351,15,0.034,25,0.996,31,0.727,34,0.691,41,0.453,42,0.172,50,0.024,51,0.024,52,1.584,54,1.419,55,2.077,61,3.005,63,2.531,64,1.896,65,1.896,67,2.824,68,1.896,115,1.297,150,3.192,177,3.171,254,2.392,288,2.392,289,1.419,345,2.116,361,2.76,391,2.824,393,2.76,394,2.76,395,2.76,396,3.321,397,2.76,398,3.321]],["title/injectables/UserService.html",[82,0.597,177,1.632]],["body/injectables/UserService.html",[3,0.382,4,0.338,5,0.296,10,0.528,11,1.683,15,0.034,17,1.252,24,1.949,25,1.368,26,1.949,28,1.683,30,0.95,31,0.713,34,0.582,41,0.382,42,0.145,48,1.683,50,0.021,51,0.021,82,0.744,83,1.092,92,2.537,112,2.554,115,1.539,175,2.25,177,2.032,182,1.782,204,3.155,219,2.014,289,1.195,348,1.597,364,3.275,365,3.792,368,4.117,373,2.325,374,4.117,376,3.275,381,2.325,397,2.325,399,2.325,400,2.797,401,2.797,402,3.94,403,3.94,404,2.797,405,2.797,406,2.797,407,2.797,408,2.797,409,2.797]],["title/changelog.html",[410,2.208,411,2.208,412,2.208]],["body/changelog.html",[5,0.525,8,3.288,15,0.027,21,2.849,50,0.027,51,0.027,93,2.849,94,2.849,412,3.288,413,3.955,414,3.955,415,2.849,416,3.955,417,3.955,418,3.955,419,3.288,420,3.955,421,3.955,422,3.288,423,3.955,424,3.955,425,3.955,426,3.955,427,3.955,428,3.955,429,3.955,430,4.964,431,3.955,432,3.955,433,3.955,434,3.955,435,3.955,436,3.955,437,3.955,438,3.955,439,3.955,440,3.955,441,3.955]],["title/coverage.html",[442,3.09]],["body/coverage.html",[0,2.074,1,1.591,5,0.264,6,2.076,15,0.034,30,0.52,38,1.426,42,0.259,50,0.02,51,0.02,62,1.426,76,1.798,82,1.041,84,2.076,89,1.591,90,2.076,107,1.426,112,1.288,115,0.975,118,1.067,120,1.591,123,1.426,147,1.426,148,1.426,157,1.591,169,2.616,177,1.288,178,1.288,189,1.067,215,1.798,228,1.798,280,2.076,296,2.076,300,2.076,320,2.076,322,2.076,330,2.616,333,2.315,352,1.591,363,2.076,387,2.315,391,1.591,399,2.076,442,1.798,443,2.497,444,2.497,445,2.497,446,4.282,447,2.497,448,6.15,449,3.633,450,2.076,451,5.213,452,5.513,453,3.633,454,2.497,455,4.282,456,4.702,457,3.02,458,2.076,459,3.02,460,3.633,461,2.076,462,3.633,463,2.076,464,2.497,465,2.497]],["title/dependencies.html",[55,1.779,466,2.208]],["body/dependencies.html",[15,0.034,34,0.727,37,1.801,50,0.025,51,0.025,55,1.636,70,2.515,152,2.515,154,1.801,209,2.903,289,1.492,308,3.684,309,3.809,326,2.903,348,1.994,467,5.115,468,3.492,469,3.492,470,3.492,471,3.492,472,3.492,473,3.492,474,4.582,475,3.492,476,3.492,477,3.492,478,3.492,479,3.492,480,3.492,481,3.492,482,3.492,483,3.492,484,3.492,485,3.492,486,3.492,487,3.492,488,3.492,489,3.492,490,2.903,491,3.492,492,3.492]],["title/miscellaneous/functions.html",[493,1.37,494,3.157]],["body/miscellaneous/functions.html",[9,3.17,10,0.72,15,0.029,24,1.629,25,1.144,26,1.629,30,0.794,50,0.026,51,0.026,415,2.747,459,3.17,461,4.434,463,4.032,490,3.17,493,1.967,494,3.17,495,4.851,496,3.813,497,3.813,498,3.813,499,3.813,500,4.851,501,3.813,502,3.813,503,3.17,504,3.17,505,3.813,506,3.813,507,5.614,508,4.851,509,3.813,510,3.813,511,3.813,512,3.813,513,3.813,514,3.813,515,3.17]],["title/index.html",[10,0.501,410,2.208,411,2.208]],["body/index.html",[4,0.37,7,2.205,15,0.033,21,3.021,50,0.023,51,0.023,415,2.205,442,2.205,503,2.545,504,4.631,515,2.545,516,3.061,517,3.061,518,4.195,519,3.061,520,3.061,521,3.061,522,3.061,523,3.061,524,3.061,525,4.786,526,3.061,527,3.061,528,3.061,529,3.061,530,5.704,531,3.061,532,3.061,533,3.061,534,3.061,535,4.195,536,3.061,537,3.061,538,3.061,539,3.061,540,4.195,541,3.061,542,3.061,543,3.061,544,4.195,545,4.195,546,3.061,547,3.061,548,3.061,549,3.061,550,2.545,551,3.061,552,3.061,553,3.061,554,3.061,555,3.061,556,3.061,557,3.061,558,3.061,559,3.061,560,2.545,561,3.061,562,3.061,563,3.061,564,3.061,565,3.061,566,3.061,567,2.545]],["title/modules.html",[54,1.833]],["body/modules.html",[15,0.028,50,0.028,51,0.028,53,2.692,54,1.805,59,2.412,60,2.412,61,2.179,146,2.412,550,4.84,568,5.822,569,5.822,570,5.973,571,4.224,572,4.224]],["title/overview.html",[573,3.567]],["body/overview.html",[2,1.615,15,0.033,50,0.021,51,0.021,53,3.739,54,1.209,55,1.861,56,2.352,57,2.352,58,2.352,59,3.469,60,2.62,61,2.879,62,2.62,63,2.268,64,1.615,65,1.615,83,1.105,118,2.385,142,2.352,143,2.352,144,2.352,145,2.352,146,3.103,147,2.62,148,2.62,177,2.879,178,2.879,279,1.459,355,2.352,356,2.352,357,2.352,393,2.352,394,2.352,395,2.352,573,2.352,574,3.971,575,2.829,576,2.829]],["title/properties.html",[281,1.779,466,2.208]],["body/properties.html",[7,3.305,15,0.033,50,0.029,51,0.029,281,2.15,419,3.815,422,3.815,560,3.815,567,3.815,577,4.589]],["title/miscellaneous/typealiases.html",[493,1.37,578,3.798]],["body/miscellaneous/typealiases.html",[10,0.861,15,0.029,30,0.95,50,0.029,51,0.029,182,3.45,184,3.45,333,2.906,387,2.906,493,2.352,579,4.56,580,3.791,581,3.791]],["title/miscellaneous/variables.html",[493,1.37,582,3.157]],["body/miscellaneous/variables.html",[10,0.647,15,0.034,30,0.714,50,0.024,51,0.024,76,3.26,157,2.884,164,2.849,169,2.469,215,3.26,216,2.849,217,3.763,218,2.849,333,2.184,339,4.786,352,2.884,353,2.849,387,2.184,391,2.884,392,2.849,450,2.849,457,2.849,458,4.481,493,1.768,580,2.849,581,2.849,582,2.849,583,3.427,584,4.526,585,3.427,586,5.757,587,3.427,588,3.427,589,3.427,590,3.427]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":422,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.1.13",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["06",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["1.0.0",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["100",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["12e51eb",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["15m",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["2",{"_index":575,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":574,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["6.3.8",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/variables.html":{}}}],["60s",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["7",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["7.2.0",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["76650cd",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":576,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["918d7ca",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["947feeb",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["accesstoken",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["aliases",{"_index":579,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":551,"title":{},"body":{"index.html":{}}}],["api",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apibearerauth",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["apibearerauth()@post('/logout')@useguards(jwtauthguard",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('profile",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["apibody",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibody({type",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiproperty",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apitags",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["apitags('authentication",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags('me",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["app",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":524,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":53,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":62,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["authentication.constants",{"_index":158,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["authentication.controller",{"_index":159,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":160,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["authenticationcontroller",{"_index":89,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":59,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":118,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":297,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":299,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":321,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["author",{"_index":560,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["available",{"_index":572,"title":{},"body":{"modules.html":{}}}],["await",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["backers",{"_index":552,"title":{},"body":{"index.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["body",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["boolean",{"_index":338,"title":{},"body":{"classes/RefreshToken.html":{}}}],["bootstrap",{"_index":461,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":570,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":568,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["building",{"_index":519,"title":{},"body":{"index.html":{}}}],["catch",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["changelog",{"_index":412,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["class",{"_index":42,"title":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":142,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":144,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":143,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":145,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule",{"_index":355,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_exports",{"_index":357,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_refreshtokenmodule_providers",{"_index":356,"title":{},"body":{"modules/RefreshTokenModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":393,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":394,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":395,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["commit",{"_index":420,"title":{},"body":{"changelog.html":{}}}],["commitlint",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["compare(pass",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["components/authentication/authentication.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["components/authentication/authentication.service",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/authentication/jwt.guard",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["components/authentication/local.guard",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["components/database/database.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["components/users/user.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["config",{"_index":292,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.get('database_url",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":287,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/RefreshToken.html":{},"classes/User.html":{}}}],["constants",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["constructor",{"_index":175,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(refreshtokenmodel",{"_index":367,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["constructor(usermodel",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":176,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"overview.html":{}}}],["coverage",{"_index":442,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":364,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["create(refreshtoken",{"_index":371,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["create(user",{"_index":403,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":112,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dashboard",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["databasemodule",{"_index":60,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["date(date.now",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["day",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["default",{"_index":339,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":55,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":532,"title":{},"body":{"index.html":{}}}],["docs",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"classes/User.html":{}}}],["document.sub",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["document.tokenid",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["documentation",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["dto/auth.dto",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/user.dto",{"_index":406,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e",{"_index":541,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":520,"title":{},"body":{"index.html":{}}}],["email",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["endpoint",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["entry",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["env",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envfile",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["executable",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["exist",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expiresat",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["expiresin",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":150,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":298,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{}}}],["features",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["filter",{"_index":376,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":374,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":365,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["findone(filter",{"_index":373,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["fixes",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["framework",{"_index":518,"title":{},"body":{"index.html":{}}}],["function",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":494,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":170,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generateaccesstoken(user",{"_index":181,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken",{"_index":171,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generaterefreshtoken(refreshtoken",{"_index":186,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generation",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["get('profile",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":85,"title":{},"body":{"injectables/AppService.html":{}}}],["getprofile",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":410,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["graph",{"_index":571,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":547,"title":{},"body":{"index.html":{}}}],["gt",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["guidelines",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hash(user.password",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["head",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hello",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":557,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":564,"title":{},"body":{"index.html":{}}}],["husky",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["identifier",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imports",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":381,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["injectmodel(refreshtoken.name",{"_index":383,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["injectmodel(user.name",{"_index":407,"title":{},"body":{"injectables/UserService.html":{}}}],["insomnia,postman",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["installation",{"_index":529,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":531,"title":{},"body":{"index.html":{}}}],["isglobal",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":554,"title":{},"body":{"index.html":{}}}],["json",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jwt",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.guard",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["jwt.strategy",{"_index":161,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtauthguard",{"_index":38,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":157,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":151,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.register",{"_index":163,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":179,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":147,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":561,"title":{},"body":{"index.html":{}}}],["license",{"_index":567,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":545,"title":{},"body":{"index.html":{}}}],["literal",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/RefreshTokenService.html":{}}}],["local",{"_index":326,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":162,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthguard",{"_index":120,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":148,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["login(@request",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(req",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(user",{"_index":190,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logincredentialsdto",{"_index":123,"title":{"classes/LoginCredentialsDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["logincredentialsdto})@useguards(localauthguard)@post('/login",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"changelog.html":{}}}],["logout(@request",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(payload",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logout(req",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["main",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["make",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":493,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":544,"title":{},"body":{"index.html":{}}}],["mode",{"_index":535,"title":{},"body":{"index.html":{}}}],["model",{"_index":368,"title":{},"body":{"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":52,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":54,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":348,"title":{},"body":{"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":288,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":361,"title":{},"body":{"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":290,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":556,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":562,"title":{},"body":{"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":525,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":566,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":152,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":289,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":154,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"dependencies.html":{}}}],["new",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["node.js",{"_index":517,"title":{},"body":{"index.html":{}}}],["notable",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["notfoundexception",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["notfoundexception('user",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["npm",{"_index":530,"title":{},"body":{"index.html":{}}}],["nrefreshtoken",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["null",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["number",{"_index":187,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["nuser._id",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["object",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":341,"title":{},"body":{"classes/RefreshToken.html":{}}}],["open",{"_index":546,"title":{},"body":{"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["over",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":573,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":466,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passport",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":153,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["passwordfield",{"_index":328,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.tokenid",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["please",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["point",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/login",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/logout",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/refresh",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('/register",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["pre",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["prefix",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["private",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":537,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":516,"title":{},"body":{"index.html":{}}}],["project",{"_index":415,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["promise",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":344,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["prop({type",{"_index":334,"title":{},"body":{"classes/RefreshToken.html":{}}}],["properties",{"_index":281,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["push",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["read",{"_index":555,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{}}}],["ref",{"_index":342,"title":{},"body":{"classes/RefreshToken.html":{}}}],["reflect",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(@body",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(body",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshaccesstoken",{"_index":172,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshaccesstoken(refreshtoken",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":189,"title":{"classes/RefreshToken.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["refreshtoken._id",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken.name",{"_index":362,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.schema",{"_index":359,"title":{},"body":{"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{}}}],["refreshtoken.service",{"_index":360,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["refreshtoken.userid",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendocument",{"_index":184,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":107,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenmodel",{"_index":370,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["refreshtokenmodule",{"_index":146,"title":{"modules/RefreshTokenModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules.html":{},"overview.html":{}}}],["refreshtokens/refreshtoken.module",{"_index":155,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["refreshtokens/refreshtoken.schema",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens/refreshtoken.service",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenschema",{"_index":352,"title":{},"body":{"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenservice",{"_index":178,"title":{"injectables/RefreshTokenService.html":{}},"body":{"injectables/AuthenticationService.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(user",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["repository",{"_index":528,"title":{},"body":{"index.html":{}}}],["req",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["req.user",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["required",{"_index":336,"title":{},"body":{"classes/RefreshToken.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["rest",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["result",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["results",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["revoked",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["rimraf",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["rxjs",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":521,"title":{},"body":{"index.html":{}}}],["schema",{"_index":345,"title":{},"body":{"classes/RefreshToken.html":{},"modules/RefreshTokenModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":346,"title":{},"body":{"classes/RefreshToken.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":353,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":392,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":347,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.boolean",{"_index":350,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.date",{"_index":351,"title":{},"body":{"classes/RefreshToken.html":{}}}],["schematypes.objectid",{"_index":349,"title":{},"body":{"classes/RefreshToken.html":{}}}],["secret",{"_index":164,"title":{},"body":{"modules/AuthenticationModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["server",{"_index":522,"title":{},"body":{"index.html":{}}}],["service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["set",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setup",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupswagger",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["side",{"_index":523,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["simple",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"modules/RefreshTokenModule.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["specification",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sponsors",{"_index":549,"title":{},"body":{"index.html":{}}}],["src/.../authentication.constants.ts",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication.service.ts",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../refreshtoken.schema.ts",{"_index":580,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":581,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:17",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["src/components/authentication/authentication.constants.ts",{"_index":450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.controller.ts",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/components/authentication/authentication.controller.ts:15",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:22",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:27",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.controller.ts:34",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/components/authentication/authentication.module.ts",{"_index":149,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/components/authentication/authentication.service.ts",{"_index":169,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/authentication/authentication.service.ts:131",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:146",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:155",{"_index":188,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:17",{"_index":180,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:24",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:37",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:51",{"_index":191,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:76",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/authentication.service.ts:99",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/components/authentication/dto/auth.dto.ts",{"_index":330,"title":{},"body":{"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/components/authentication/dto/auth.dto.ts:10",{"_index":331,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:12",{"_index":332,"title":{},"body":{"classes/LoginCredentialsDto.html":{}}}],["src/components/authentication/dto/auth.dto.ts:5",{"_index":354,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/components/authentication/jwt.guard.ts",{"_index":296,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/jwt.strategy.ts:17",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/jwt.strategy.ts:8",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/components/authentication/local.guard.ts",{"_index":320,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts",{"_index":322,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/components/authentication/local.strategy.ts:15",{"_index":325,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/authentication/local.strategy.ts:7",{"_index":323,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/components/database/database.module.ts",{"_index":286,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/components/refreshtokens/refreshtoken.module.ts",{"_index":358,"title":{},"body":{"modules/RefreshTokenModule.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts",{"_index":333,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:14",{"_index":343,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:20",{"_index":340,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.schema.ts:26",{"_index":337,"title":{},"body":{"classes/RefreshToken.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts",{"_index":363,"title":{},"body":{"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:13",{"_index":375,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:19",{"_index":380,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:26",{"_index":372,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/refreshtokens/refreshtoken.service.ts:7",{"_index":369,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["src/components/users/dto/user.dto.ts",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/components/users/dto/user.dto.ts:11",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:5",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/dto/user.dto.ts:8",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/components/users/user.module.ts",{"_index":396,"title":{},"body":{"modules/UserModule.html":{}}}],["src/components/users/user.schema.ts",{"_index":387,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/user.schema.ts:12",{"_index":388,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:15",{"_index":390,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.schema.ts:9",{"_index":389,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/user.service.ts",{"_index":399,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/components/users/user.service.ts:13",{"_index":405,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:19",{"_index":404,"title":{},"body":{"injectables/UserService.html":{}}}],["src/components/users/user.service.ts:8",{"_index":401,"title":{},"body":{"injectables/UserService.html":{}}}],["src/constants.ts",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":459,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":533,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":536,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":538,"title":{},"body":{"index.html":{}}}],["started",{"_index":411,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starter",{"_index":527,"title":{},"body":{"index.html":{}}}],["statements",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":558,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{}}}],["sub",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["such",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["super",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":550,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":569,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":490,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"index.html":{}}}],["test:covsupport",{"_index":543,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":542,"title":{},"body":{"index.html":{}}}],["tests",{"_index":540,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":548,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.logout(req.user",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.refreshaccesstoken(body.refreshtoken",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.register(user",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.validatetokenforuser(payload",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validateuser(email",{"_index":329,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.generateaccesstoken(nuser",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generateaccesstoken(user",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(nrefreshtoken",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.generaterefreshtoken(token",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.sign(payload",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync(refreshtoken",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenmodel.create",{"_index":386,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.findone(filter",{"_index":384,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenmodel.updateone(filter",{"_index":385,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.refreshtokenservice.create",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.findone",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenservice.updateone",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usermodel.create(user",{"_index":409,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone(filter",{"_index":408,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.findone",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{}}}],["token",{"_index":183,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token._id",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["token.revoked",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["tokenid",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":559,"title":{},"body":{"index.html":{}}}],["true",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["try",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["twitter",{"_index":565,"title":{},"body":{"index.html":{}}}],["type",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginCredentialsDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":578,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/passport",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":526,"title":{},"body":{"index.html":{}}}],["ui",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('refresh",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":335,"title":{},"body":{"classes/RefreshToken.html":{}}}],["unit",{"_index":539,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":577,"title":{},"body":{"properties.html":{}}}],["update",{"_index":378,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updateone",{"_index":366,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updateone(filter",{"_index":377,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updatequery",{"_index":379,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["updatewriteopresult",{"_index":382,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["uri",{"_index":293,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usefactory",{"_index":291,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthguard",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{}}}],["useguards(localauthguard",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":115,"title":{"classes/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/RefreshToken.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user._id",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.email",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.name",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.schema",{"_index":397,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":398,"title":{},"body":{"modules/UserModule.html":{}}}],["user.toobject",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["userdocument",{"_index":182,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenService.html":{}}}],["usermodel",{"_index":402,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":61,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":327,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users/dto/user.dto",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["users/user.module",{"_index":156,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["users/user.schema",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/RefreshToken.html":{}}}],["users/user.service",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["userschema",{"_index":391,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":177,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthenticationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":324,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetokenforuser",{"_index":173,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validatetokenforuser(document",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser",{"_index":174,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser(email",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["value",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":582,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":419,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["watch",{"_index":534,"title":{},"body":{"index.html":{}}}],["website",{"_index":563,"title":{},"body":{"index.html":{}}}],["world",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":553,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/RefreshTokenModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController - base controller for the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:17\n                \n            \n\n\n            \n                \n                    A simple endpoint to test the auth service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from './components/authentication/jwt.guard';\n\n/**\n * AppController - base controller for the application\n */\n@ApiTags('Me')\n@Controller()\nexport class AppController {\n    /**\n     * A simple endpoint to test the auth service.\n     */\n    @ApiBearerAuth()\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    getProfile(@Request() req): { email: string } {\n        return req.user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthenticationModule } from './components/authentication/authentication.module';\nimport { DatabaseModule } from './components/database/database.module';\nimport { UserModule } from './components/users/user.module';\nimport { ENVFILE } from './constants';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            envFilePath: ENVFILE,\n            isGlobal: true,\n        }),\n        DatabaseModule,\n        AuthenticationModule,\n        UserModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({type: LoginCredentialsDto})@UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Post('/logout')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(body: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/components/authentication/authentication.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { AuthenticationService } from '../../components/authentication/authentication.service';\nimport { LocalAuthGuard } from '../../components/authentication/local.guard';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { LoginCredentialsDto, RefreshTokenDto } from './dto/auth.dto';\nimport { JwtAuthGuard } from './jwt.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthenticationController {\n    constructor(private readonly authService: AuthenticationService) {}\n\n    @Post('/register')\n    async register(@Body() user: CreateUserDto) {\n        return this.authService.register(user);\n    }\n\n    @ApiBody({ type: LoginCredentialsDto })\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n\n    @Post('/refresh')\n    public async refresh(@Body() body: RefreshTokenDto) {\n        return this.authService.refreshAccessToken(body.refreshToken);\n    }\n\n    @ApiBearerAuth()\n    @Post('/logout')\n    @UseGuards(JwtAuthGuard)\n    async logout(@Request() req) {\n        return this.authService.logout(req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RefreshTokenModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { RefreshTokenModule } from '../refreshTokens/refreshToken.module';\nimport { UserModule } from '../users/user.module';\nimport { jwtConstants } from './authentication.constants';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n    imports: [\n        UserModule,\n        RefreshTokenModule,\n        PassportModule,\n        JwtModule.register({\n            secret: jwtConstants.secret,\n            signOptions: { expiresIn: '60s' },\n        }),\n    ],\n    controllers: [AuthenticationController],\n    providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n    exports: [AuthenticationService],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateAccessToken\n                            \n                            \n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateTokenForUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, refreshTokenService: RefreshTokenService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenService\n                                                  \n                                                        \n                                                                        RefreshTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \ngenerateAccessToken(user: UserDocument, token: RefreshTokenDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                RefreshTokenDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \ngenerateRefreshToken(refreshToken: any, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAccessToken(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateTokenForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateTokenForUser(document: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    document\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/authentication.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NotFoundException,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare, hash } from 'bcrypt';\nimport { RefreshTokenDocument } from '../refreshTokens/refreshToken.schema';\nimport { RefreshTokenService } from '../refreshTokens/refreshToken.service';\nimport { CreateUserDto } from '../users/dto/user.dto';\nimport { UserDocument } from '../users/user.schema';\nimport { UserService } from '../users/user.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(\n        private userService: UserService,\n        private refreshTokenService: RefreshTokenService,\n        private jwtService: JwtService,\n    ) {}\n\n    async validateTokenForUser(document: any) {\n        const token = await this.refreshTokenService.findOne({\n            _id: document.tokenId,\n            userId: document.sub,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException();\n        }\n    }\n\n    async validateUser(email: string, pass: string): Promise {\n        const user = await this.userService.findOne({ email });\n        if (user == null) {\n            throw new NotFoundException('User does not exist!');\n        }\n\n        if (await compare(pass, user.password)) {\n            const { password, ...result } = user.toObject();\n            return result;\n        }\n\n        return null;\n    }\n\n    async login(user: UserDocument) {\n        let token = await this.refreshTokenService.findOne({\n            userId: user._id,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            token = await this.refreshTokenService.create(\n                {\n                    userId: user._id,\n                },\n                new Date(Date.now() + 7 * DAY),\n            );\n        }\n\n        const accessToken = this.generateAccessToken(user, token);\n        const refreshToken = this.generateRefreshToken(token, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async register(user: CreateUserDto) {\n        const nUser = await this.userService.create({\n            email: user.email,\n            password: await hash(user.password, 10),\n            name: user.name,\n        });\n\n        const nRefreshToken = await this.refreshTokenService.create(\n            {\n                userId: nUser._id,\n            },\n            new Date(Date.now() + 7 * DAY),\n        );\n\n        const accessToken = this.generateAccessToken(nUser, nRefreshToken);\n        const refreshToken = this.generateRefreshToken(nRefreshToken, 7 * DAY);\n\n        return {\n            accessToken,\n            refreshToken,\n        };\n    }\n\n    async refreshAccessToken(refreshToken: string) {\n        let payload: any;\n        try {\n            payload = await this.jwtService.verifyAsync(refreshToken);\n        } catch (error) {\n            throw new UnauthorizedException(error.message);\n        }\n        const token = await this.refreshTokenService.findOne({\n            _id: payload.tokenId,\n            userId: payload.userId,\n            expiresAt: { $gt: new Date() },\n            revoked: false,\n        });\n\n        if (token == null) {\n            throw new UnauthorizedException('Refresh token not found');\n        }\n\n        if (token.revoked === true) {\n            throw new UnauthorizedException('Refresh token revoked');\n        }\n\n        const user = await this.userService.findOne({ _id: payload.userId });\n\n        if (user == null) {\n            throw new UnauthorizedException('User not found');\n        }\n\n        const accessToken = await this.generateAccessToken(user, token);\n        return { accessToken };\n    }\n\n    async logout(payload: any) {\n        const result = await this.refreshTokenService.updateOne(\n            {\n                _id: payload.tokenId,\n                userId: payload.userId,\n                revoked: false,\n            },\n            {\n                $set: {\n                    revoked: true,\n                },\n            },\n        );\n    }\n\n    generateAccessToken(user: UserDocument, token: RefreshTokenDocument) {\n        const payload = {\n            email: user.email,\n            sub: user._id,\n            tokenId: token._id,\n        };\n        return this.jwtService.sign(payload, { expiresIn: '15m' });\n    }\n\n    generateRefreshToken(refreshToken: any, expiresIn: number) {\n        const payload = {\n            userId: refreshToken.userId,\n            tokenId: refreshToken._id,\n        };\n        return this.jwtService.sign(payload, { expiresIn });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n    @ApiProperty()\n    readonly name: string;\n\n    @ApiProperty()\n    readonly email: string;\n\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n    imports: [\n        MongooseModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: async (config: ConfigService) => ({\n                uri: config.get('DATABASE_URL'),\n            }),\n            inject: [ConfigService],\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './authentication.constants';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthenticationService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n    }\n\n    async validate(payload: any) {\n        await this.authService.validateTokenForUser(payload);\n        return {\n            userId: payload.sub,\n            email: payload.email,\n            tokenId: payload.tokenId,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/authentication/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthenticationService) {\n        super({\n            usernameField: 'email',\n            passwordField: 'password',\n        });\n    }\n\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginCredentialsDto.html":{"url":"classes/LoginCredentialsDto.html","title":"class - LoginCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresAt\n                            \n                            \n                                revoked\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/refreshTokens/refreshToken.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, ObjectId, SchemaTypes } from 'mongoose';\nimport { User } from '../users/user.schema';\n\nexport type RefreshTokenDocument = RefreshToken & Document;\n\n@Schema()\nexport class RefreshToken {\n    @Prop({\n        type: SchemaTypes.ObjectId,\n        ref: User.name,\n        required: true,\n    })\n    userId: ObjectId;\n\n    @Prop({\n        type: SchemaTypes.Boolean,\n        default: false,\n    })\n    revoked: boolean;\n\n    @Prop({\n        type: SchemaTypes.Date,\n        required: true,\n    })\n    expiresAt: Date;\n}\n\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/authentication/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/authentication/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n    @ApiProperty()\n    readonly refreshToken: string;\n}\n\nexport class LoginCredentialsDto {\n    @ApiProperty()\n    readonly email: string;\n    @ApiProperty()\n    readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RefreshTokenModule.html":{"url":"modules/RefreshTokenModule.html","title":"module - RefreshTokenModule","body":"\n                   \n\n\n\n\n    Modules\n    RefreshTokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RefreshTokenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refreshToken.schema';\nimport { RefreshTokenService } from './refreshToken.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: RefreshToken.name, schema: RefreshTokenSchema },\n        ]),\n    ],\n    providers: [RefreshTokenService],\n    exports: [RefreshTokenService],\n})\nexport class RefreshTokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/refreshTokens/refreshToken.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(refreshTokenModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/refreshTokens/refreshToken.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        refreshTokenModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(refreshToken: literal type, expiresAt: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresAt\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filter: FilterQuery, update: UpdateQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/refreshTokens/refreshToken.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model, UpdateQuery, UpdateWriteOpResult } from 'mongoose';\nimport { RefreshToken, RefreshTokenDocument } from './refreshToken.schema';\n\n@Injectable()\nexport class RefreshTokenService {\n    constructor(\n        @InjectModel(RefreshToken.name)\n        private refreshTokenModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.refreshTokenModel.findOne(filter);\n    }\n\n    async updateOne(\n        filter: FilterQuery,\n        update: UpdateQuery,\n    ): Promise {\n        return this.refreshTokenModel.updateOne(filter, update);\n    }\n\n    async create(\n        refreshToken: { userId: string },\n        expiresAt: Date,\n    ): Promise {\n        return this.refreshTokenModel.create({ ...refreshToken, expiresAt });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/user.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n    @Prop()\n    name: string;\n\n    @Prop()\n    email: string;\n\n    @Prop()\n    password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './user.schema';\nimport { UserService } from './user.service';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    ],\n    providers: [UserService],\n    exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { CreateUserDto } from './dto/user.dto';\nimport { User, UserDocument } from './user.schema';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectModel(User.name) private userModel: Model,\n    ) {}\n\n    async findOne(\n        filter: FilterQuery,\n    ): Promise {\n        return this.userModel.findOne(filter);\n    }\n\n    async create(user: CreateUserDto): Promise {\n        return this.userModel.create(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.0.2 (2022-06-15)\nFeatures\n\nbase authentication (76650cd)\nlogin, logout, commitlint and husky (947feeb)\ntest docs generation (12e51eb)\n\nBug Fixes\n\nmake husky pre-push file an executable (918d7ca)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/components/authentication/authentication.service.ts\n            \n            variable\n            DAY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            LoginCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/dto/auth.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/authentication/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.schema.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/refreshTokens/refreshToken.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            ENVFILE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSwagger\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            mongoose : ^6.3.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            setupSwagger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main entry point for the application.\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Setup swagger dashboard, please run the project and head over to /api,\nThere is also a json api specification /api-json that can be imported in rest-api apps such as (insomnia,postman).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RefreshTokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_RefreshTokenModule\n\n\n\ncluster_RefreshTokenModule_exports\n\n\n\ncluster_RefreshTokenModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRefreshTokenModule\n\nRefreshTokenModule\n\nAuthenticationModule -->\n\nRefreshTokenModule->AuthenticationModule\n\n\n\n\n\nRefreshTokenService \n\nRefreshTokenService \n\nRefreshTokenService  -->\n\nRefreshTokenModule->RefreshTokenService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nRefreshTokenModule -->\n\nRefreshTokenService->RefreshTokenModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.2\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RefreshTokenDocument   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/refreshTokens/refreshToken.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/components/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (src/.../authentication.service.ts)\n                        \n                        \n                            ENV   (src/.../constants.ts)\n                        \n                        \n                            ENVFILE   (src/.../constants.ts)\n                        \n                        \n                            jwtConstants   (src/.../authentication.constants.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refreshToken.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/authentication/authentication.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DAY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 24 * 60 * 60 * 1000\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENVFILE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ENV ? `.env.${ENV}` : '.env'\n                    \n                \n\n\n        \n    \n\n    src/components/authentication/authentication.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n    src/components/refreshTokens/refreshToken.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/components/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
